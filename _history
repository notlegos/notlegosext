{"entries":[{"timestamp":1726419022759,"editorVersion":"7.0.42","changes":[{"type":"edited","filename":"main.blocks","patch":[{"diffs":[[0,"id=\""],[-1,"R~1|uui5a_NVIDAA[Q?D"],[1,"%^K2`#,Scyvg18@!5}7+"],[0,"\" x=\""],[-1,"876"],[1,"771"],[0,"\" y=\"-"],[-1,"389"],[1,"284"],[0,"\"><m"]],"start1":112,"start2":112,"length1":45,"length2":45},{"diffs":[[0,"id=\""],[-1,"l2xk:WQV3eLB=H/kitkO"],[1,"Ucsp5ece6r~c1%IN#{#z"],[0,"\"><m"]],"start1":546,"start2":546,"length1":28,"length2":28},{"diffs":[[0,"id=\""],[-1,"?,vu01{`prw;(l?USH7!"],[1,",M)m|~xdp=5ipz{z5~ML"],[0,"\"><m"]],"start1":743,"start2":743,"length1":28,"length2":28},{"diffs":[[0,"id=\""],[-1,"{X]-AIh;Y/]1HK}d+{s["],[1,"KxSUPQ9N?B,{cl/ZPz4c"],[0,"\"><m"]],"start1":938,"start2":938,"length1":28,"length2":28},{"diffs":[[0,"id=\""],[-1,"z*vTF^FU1Sz9x3`VnV)T"],[1,"IjI2V3l+YD@Hf3NO!6#1"],[0,"\"><m"]],"start1":1111,"start2":1111,"length1":28,"length2":28},{"diffs":[[0,"id=\""],[-1,"KyiO*@S,D21*64KZ35V~"],[1,"6T%Bz=b)@JFDOh~ihg-:"],[0,"\"><f"]],"start1":1214,"start2":1214,"length1":28,"length2":28},{"diffs":[[0,"id=\""],[-1,")Lj5N!+@U,_`oZ|0{=lv"],[1,",+IJ.SP0xS(T-=tIM9U+"],[0,"\"><f"]],"start1":1310,"start2":1310,"length1":28,"length2":28},{"diffs":[[0,"id=\""],[-1,"w+VxoNDbq;;Tc1f{+[g7"],[1,"%,/mCigyYVUO+J$}N:ce"],[0,"\"><f"]],"start1":1409,"start2":1409,"length1":28,"length2":28},{"diffs":[[0,"id=\""],[-1,"^=r|w11I/CjUMmY_VtX6"],[1,"=-=MomdEFcJL%c5k#SW5"],[0,"\"><f"]],"start1":1503,"start2":1503,"length1":28,"length2":28},{"diffs":[[0,"id=\""],[-1,"`0[v6u)PO@Y,lSvpL*BK"],[1,"yFBl{%H68u22l=(n+q_Q"],[0,"\"><f"]],"start1":1600,"start2":1600,"length1":28,"length2":28},{"diffs":[[0,"id=\""],[-1,"`[^AkvjEJ@_^pkW^/(qK"],[1,"Dl[NkQ[X3+,E8*G=T4oO"],[0,"\"><f"]],"start1":1701,"start2":1701,"length1":28,"length2":28},{"diffs":[[0,"id=\""],[-1,"E|5ZTgtVKXw^.JQLX~rB"],[1,"$Qg{DHXeKuce}(f?Z}na"],[0,"\"><f"]],"start1":1821,"start2":1821,"length1":28,"length2":28},{"diffs":[[0,"id=\""],[-1,"^!P9q^:MhZv^@ueoG_x."],[1,"4UhuSbdsF@T?naH=];tR"],[0,"\"><f"]],"start1":1913,"start2":1913,"length1":28,"length2":28},{"diffs":[[0,"id=\""],[-1,"MC-wDo7+NsnRtu[#onh-"],[1,"*yt6D0PDZbB@G,t{O/`@"],[0,"\"><f"]],"start1":2012,"start2":2012,"length1":28,"length2":28},{"diffs":[[0,"id=\""],[-1,"*pDP)]*Htx^fr=.-}ay3"],[1,"_G[8+{NCI|/,(sRFW@ak"],[0,"\"><f"]],"start1":2113,"start2":2113,"length1":28,"length2":28},{"diffs":[[0,"id=\""],[-1,"M63V$.t5PzGhXFBJ,RY3"],[1,"]rtrf};/Oc,?1G;tLP}M"],[0,"\"><f"]],"start1":2235,"start2":2235,"length1":28,"length2":28},{"diffs":[[0,"id=\""],[-1,"Uz@ibPF)0^lg44F~r[$w"],[1,"~Y5B`$^c#$Qzo3sv@odi"],[0,"\"><f"]],"start1":2336,"start2":2336,"length1":28,"length2":28},{"diffs":[[0,"id=\""],[-1,"aGAp}U@!=?2^Hk4?N,%["],[1,"UZw1SoA~erie.P:?V,0O"],[0,"\"><f"]],"start1":2492,"start2":2492,"length1":28,"length2":28},{"diffs":[[0,"id=\""],[-1,"]8{d71CT;[K=+bB/)#;;"],[1,"/n`U9o]/x*+Z[#*FT}W0"],[0,"\"><f"]],"start1":2586,"start2":2586,"length1":28,"length2":28},{"diffs":[[0,"id=\""],[-1,"lONOAn|R0P6R2k:/M?Co"],[1,"uhUO6g]2LssAvfBB)~#!"],[0,"\"><f"]],"start1":2683,"start2":2683,"length1":28,"length2":28},{"diffs":[[0,"id=\""],[-1,"ZWZd2G-5kQkn*}|(arvE"],[1,";Pvz`opBVHi%Ltg{Q:V7"],[0,"\"><f"]],"start1":2784,"start2":2784,"length1":28,"length2":28},{"diffs":[[0,"id=\""],[-1,"=YrD1R7W9hPXD;~#5orU"],[1,"r7os9wzl39{rrkArgHZK"],[0,"\"><f"]],"start1":2904,"start2":2904,"length1":28,"length2":28},{"diffs":[[0,"id=\""],[-1,"`k/jU-^nY7{G()!zH%Ot"],[1,"t#}uiQ,75TpAVQxqpdY;"],[0,"\"><f"]],"start1":2996,"start2":2996,"length1":28,"length2":28},{"diffs":[[0,"id=\""],[-1,"qHo5UKW40e9blZq8m)8D"],[1,"J40#VpJaPkmnxSXPB8y2"],[0,"\"><f"]],"start1":3093,"start2":3093,"length1":28,"length2":28},{"diffs":[[0,"id=\""],[-1,"jt^wzJc7D,NZKEERwHL;"],[1,"@$#JK_,5C/bM{NR|t0,s"],[0,"\"><f"]],"start1":3194,"start2":3194,"length1":28,"length2":28},{"diffs":[[0,"id=\""],[-1,".Z|BYGLG`4^szwxuW~Dw"],[1,"sl/!F!B:!8q/Y%EWjaIK"],[0,"\"><f"]],"start1":3316,"start2":3316,"length1":28,"length2":28},{"diffs":[[0,"id=\""],[-1,"q_Jab;gt)$q`gkIWC@S3"],[1,"8_1DS8*{07fSA$@#7zU8"],[0,"\"><f"]],"start1":3417,"start2":3417,"length1":28,"length2":28},{"diffs":[[0,"id=\""],[-1,"uxx~87:YFqcXTY|tf#AP"],[1,";IR|!xcn?i^yDWRyQ;(M"],[0,"\"><m"]],"start1":3596,"start2":3596,"length1":28,"length2":28},{"diffs":[[0,"id=\""],[-1,"mP?[/BRHbi_mxBLCbAVw"],[1,"~g1JyeX8qcm_bQ^GV^[q"],[0,"\"><f"]],"start1":3758,"start2":3758,"length1":28,"length2":28},{"diffs":[[0,"id=\""],[-1,"t-{(_WuGeojw7BR%j6mZ"],[1,"naA.:cN0mJ|p,vS4hhvC"],[0,"\"><f"]],"start1":3848,"start2":3848,"length1":28,"length2":28},{"diffs":[[0,"id=\""],[-1,"Xv]Esrj;SwwyE3L-VGfu"],[1,".gMe|^YTqmMo!)X%mMF:"],[0,"\"><m"]],"start1":3994,"start2":3994,"length1":28,"length2":28},{"diffs":[[0,"id=\""],[-1,"dURhu^/21wjNhvvp-vRr"],[1,"0K]vCRhSaAvmAzR/Ap`^"],[0,"\"><f"]],"start1":4156,"start2":4156,"length1":28,"length2":28},{"diffs":[[0,"id=\""],[-1,"JytPB3P%V$iM+kQ8.|.q"],[1,"^5q}K(Am`;]$-n2dxtNy"],[0,"\"><f"]],"start1":4246,"start2":4246,"length1":28,"length2":28},{"diffs":[[0,"id=\""],[-1,"n;5|1`{VSN6%H@9s^i93"],[1,"x+1%#jOazC4GU`L*2.u7"],[0,"\" x="]],"start1":4395,"start2":4395,"length1":28,"length2":28},{"diffs":[[0,"id=\""],[-1,"BMuj$,VjAWf5g8+4WV7U"],[1,"W/xsRA)aAUc[S;dorFl7"],[0,"\"><n"]],"start1":4493,"start2":4493,"length1":28,"length2":28},{"diffs":[[0,"id=\""],[-1,"U6o;|k}?m.nz3xLsf*Hk"],[1,"HhX;d2%5OYCw=MPqt?b6"],[0,"\"><f"]],"start1":4556,"start2":4556,"length1":28,"length2":28},{"diffs":[[0,"id=\""],[-1,"?UUbijzpYlQWi)3=D![l"],[1,"~%X{mEZR(S]7Mvrk.I`9"],[0,"\"><f"]],"start1":4664,"start2":4664,"length1":28,"length2":28},{"diffs":[[0,"id=\""],[-1,"T!b?^(uQN}~4p3]?:*XA"],[1,"8B,eZajyAo$Km+z$iRiy"],[0,"\"><f"]],"start1":4766,"start2":4766,"length1":28,"length2":28},{"diffs":[[0,"id=\""],[-1,"=BBkY@AIH@Qu|N,SOYgJ"],[1,"~B-K#ftGg*OH@dZwUnay"],[0,"\" x="]],"start1":4938,"start2":4938,"length1":28,"length2":28},{"diffs":[[0,"id=\""],[-1,"*CNHLq9:-$vFd(@U#nqP"],[1,"N^=?=fPB3k}Im!D7+^eh"],[0,"\"><v"]],"start1":5068,"start2":5068,"length1":28,"length2":28},{"diffs":[[0,"id=\""],[-1,"XG8}(bKpx4Y~ka@7FCgL"],[1,"TkN/CG,Kk3Zld9Y8.+h~"],[0,"\"><f"]],"start1":5140,"start2":5140,"length1":28,"length2":28},{"diffs":[[0,"id=\""],[-1,"EkZQ}O9s)UHA0ag0:duv"],[1,"I{Okjk(3;5okdaXRJgpG"],[0,"\"><v"]],"start1":5229,"start2":5229,"length1":28,"length2":28},{"diffs":[[0,"id=\""],[-1,"TJ1m33L]^8HiE*-+1TvH"],[1,"F3#SaQH!)A158/mT(n0p"],[0,"\"><f"]],"start1":5301,"start2":5301,"length1":28,"length2":28},{"diffs":[[0,"id=\""],[-1,"s|8-ORqJkz)3rhcL?f,q"],[1,".=xGN3Vg%2r]Y5T6,CdM"],[0,"\" x="]],"start1":5459,"start2":5459,"length1":28,"length2":28},{"diffs":[[0,"id=\""],[-1,"P?4l~)LnKR63Ulyr5L@P"],[1,"_-pN0T3vMUEDhcju/DTG"],[0,"\"><v"]],"start1":5590,"start2":5590,"length1":28,"length2":28},{"diffs":[[0,"id=\""],[-1,"y%4sWo0fX:=NDFeajSxX"],[1,"TkN/CG,Kk3Zld9Y8.+h~"],[0,"\"><f"]],"start1":5662,"start2":5662,"length1":28,"length2":28},{"diffs":[[0,"id=\""],[-1,"9?23b=HZ!(~p@D`.[/F%"],[1,"3Tc_KDQK.PmPS/_^Xc[{"],[0,"\"><v"]],"start1":5750,"start2":5750,"length1":28,"length2":28},{"diffs":[[0,"id=\""],[-1,"i*kNxwKl5lRq)}bEqi0;"],[1,"s?gR`}7k8?n|GZa.:Ba]"],[0,"\"><f"]],"start1":5822,"start2":5822,"length1":28,"length2":28},{"diffs":[[0,"id=\""],[-1,";5P04kXf.wsC~FRj{l;T"],[1,"UWpE44fq0}pI;+PVpZ}Y"],[0,"\" di"]],"start1":5968,"start2":5968,"length1":28,"length2":28},{"diffs":[[0,"id=\""],[-1,"a7tWSra9il#t}{95lZHB"],[1,"TkN/CG,Kk3Zld9Y8.+h~"],[0,"\"><f"]],"start1":6107,"start2":6107,"length1":28,"length2":28},{"diffs":[[0,"id=\""],[-1,"GtZoC|#/*Ye(3m;^B$n_"],[1,"^w)+87A=iXA~zt4#I%6@"],[0,"\" di"]],"start1":6195,"start2":6195,"length1":28,"length2":28},{"diffs":[[0,"id=\""],[-1,"HsKwzibi3Qu,,t+|;)3N"],[1,"{ItsIYXVEIr4PHzq/}jo"],[0,"\" di"]],"start1":6304,"start2":6304,"length1":28,"length2":28},{"diffs":[[0,"id=\""],[-1,"e##Mw|4]{){m~hJq.*)Y"],[1,"MCs{Jq@~s1]Yf,^~j1S."],[0,"\" di"]],"start1":6467,"start2":6467,"length1":28,"length2":28},{"diffs":[[0,"id=\""],[-1,"-^;sM/6#EO#dH!z.j{|6"],[1,"7p8wc@SJO`gvYZ6Yq0vh"],[0,"\" di"]],"start1":6607,"start2":6607,"length1":28,"length2":28},{"diffs":[[0,"id=\""],[-1,"C*FdbqX~l_!hZDCe_|*D"],[1,"FeRrC7Ata;FmV;6d{1Rw"],[0,"\" di"]],"start1":6730,"start2":6730,"length1":28,"length2":28},{"diffs":[[0,"id=\""],[-1,"UiGejT`X6^R)}W.NI44@"],[1,"j;/mX-HM67V*+N^URSUQ"],[0,"\" di"]],"start1":6867,"start2":6867,"length1":28,"length2":28},{"diffs":[[0,"id=\""],[-1,"c=+uErW:w_E)FNJ-Q:?]"],[1,"%c}P{U!YfeLPGv/|?N}["],[0,"\" di"]],"start1":6973,"start2":6973,"length1":28,"length2":28},{"diffs":[[0,"id=\""],[-1,"fs2=Qx)~F0zt%.2jv:st"],[1,"1Xf=)I7hRLE=F{v2wE~f"],[0,"\" di"]],"start1":7122,"start2":7122,"length1":28,"length2":28},{"diffs":[[0,"id=\""],[-1,"8[P)aik+5@jo0~BqV9S`"],[1,"/[Ze{yq~m#!w+iYyg9i9"],[0,"\" di"]],"start1":7304,"start2":7304,"length1":28,"length2":28},{"diffs":[[0,"id=\""],[-1,")VBvNSxv[8j%W}]=8bUp"],[1,"l{vD]}Ls{/^lNDm2NKXQ"],[0,"\" di"]],"start1":7442,"start2":7442,"length1":28,"length2":28},{"diffs":[[0,"id=\""],[-1,"tS=UA:!+]lhjR{)gykdw"],[1,"8HPem)3PUR}JV@15@}n6"],[0,"\" di"]],"start1":7593,"start2":7593,"length1":28,"length2":28},{"diffs":[[0,"id=\""],[-1,"xf:(8e!)Q?-D++;@Fs0{"],[1,":OW+=1cP.y0Bu#0N;6`#"],[0,"\" di"]],"start1":7738,"start2":7738,"length1":28,"length2":28},{"diffs":[[0,"id=\""],[-1,"dP;VFPVEMpmo|MID2.g("],[1,"V|Lh@`f1yf#/VL5O8Ykx"],[0,"\" di"]],"start1":7873,"start2":7873,"length1":28,"length2":28},{"diffs":[[0,"id=\""],[-1,"!lAbCc%5)|rvwjJzCuCt"],[1,"Czn}%(r,R6rQD@(Hqw(o"],[0,"\" di"]],"start1":8018,"start2":8018,"length1":28,"length2":28},{"diffs":[[0,"id=\""],[-1,"o#7FJ4ms`}F7y{?H%M3S"],[1,"xMRDF+00ZTfH(ID|^]L."],[0,"\" di"]],"start1":8159,"start2":8159,"length1":28,"length2":28}]},{"type":"edited","filename":"pxt.json","patch":[{"diffs":[[0,"\": \""],[-1,"NotLegosExt"],[1,"SoundExtension"],[0,"\",\n "]],"start1":11,"start2":11,"length1":19,"length2":22},{"diffs":[[0,"itor\": \""],[-1,"block"],[1,"t"],[0,"sprj\"\n}\n"]],"start1":564,"start2":564,"length1":21,"length2":17}]}]}],"snapshots":[{"timestamp":1726419022758,"editorVersion":"7.0.42","text":{"main.blocks":"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables></variables><block type=\"function_definition\" id=\"%^K2`#,Scyvg18@!5}7+\" x=\"771\" y=\"-284\"><mutation name=\"isNearly\" functionid=\"EJ-e{hyfU}h#54aiK_va\"><arg name=\"reference\" id=\"ny7ow5a4osvk7lxcjplo\" type=\"number\"></arg><arg name=\"reading\" id=\"tj27h704jt5cuayc9nsr\" type=\"number\"></arg><arg name=\"tolerance\" id=\"65gy9o7w9oiptgb9r9yl\" type=\"number\"></arg></mutation><field name=\"function_name\">isNearly</field><value name=\"ny7ow5a4osvk7lxcjplo\"><block type=\"argument_reporter_number\" id=\"Ucsp5ece6r~c1%IN#{#z\"><mutation duplicateondrag=\"true\"></mutation><field name=\"VALUE\">reference</field></block></value><value name=\"tj27h704jt5cuayc9nsr\"><block type=\"argument_reporter_number\" id=\",M)m|~xdp=5ipz{z5~ML\"><mutation duplicateondrag=\"true\"></mutation><field name=\"VALUE\">reading</field></block></value><value name=\"65gy9o7w9oiptgb9r9yl\"><block type=\"argument_reporter_number\" id=\"KxSUPQ9N?B,{cl/ZPz4c\"><mutation duplicateondrag=\"true\"></mutation><field name=\"VALUE\">tolerance</field></block></value><statement name=\"STACK\"><block type=\"controls_if\" id=\"IjI2V3l+YD@Hf3NO!6#1\"><mutation else=\"1\"></mutation><value name=\"IF0\"><shadow type=\"logic_boolean\" id=\"6T%Bz=b)@JFDOh~ihg-:\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_operation\" id=\",+IJ.SP0xS(T-=tIM9U+\"><field name=\"OP\">AND</field><value name=\"A\"><shadow type=\"logic_boolean\" id=\"%,/mCigyYVUO+J$}N:ce\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_compare\" id=\"=-=MomdEFcJL%c5k#SW5\"><field name=\"OP\">GTE</field><value name=\"A\"><shadow type=\"math_number\" id=\"yFBl{%H68u22l=(n+q_Q\"><field name=\"NUM\">0</field></shadow><block type=\"argument_reporter_number\" id=\"Dl[NkQ[X3+,E8*G=T4oO\"><field name=\"VALUE\">reading</field></block></value><value name=\"B\"><shadow type=\"math_number\" id=\"$Qg{DHXeKuce}(f?Z}na\"><field name=\"NUM\">0</field></shadow><block type=\"math_arithmetic\" id=\"4UhuSbdsF@T?naH=];tR\"><field name=\"OP\">MINUS</field><value name=\"A\"><shadow type=\"math_number\" id=\"*yt6D0PDZbB@G,t{O/`@\"><field name=\"NUM\">0</field></shadow><block type=\"argument_reporter_number\" id=\"_G[8+{NCI|/,(sRFW@ak\"><field name=\"VALUE\">reference</field></block></value><value name=\"B\"><shadow type=\"math_number\" id=\"]rtrf};/Oc,?1G;tLP}M\"><field name=\"NUM\">0</field></shadow><block type=\"argument_reporter_number\" id=\"~Y5B`$^c#$Qzo3sv@odi\"><field name=\"VALUE\">tolerance</field></block></value></block></value></block></value><value name=\"B\"><shadow type=\"logic_boolean\" id=\"UZw1SoA~erie.P:?V,0O\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_compare\" id=\"/n`U9o]/x*+Z[#*FT}W0\"><field name=\"OP\">LTE</field><value name=\"A\"><shadow type=\"math_number\" id=\"uhUO6g]2LssAvfBB)~#!\"><field name=\"NUM\">0</field></shadow><block type=\"argument_reporter_number\" id=\";Pvz`opBVHi%Ltg{Q:V7\"><field name=\"VALUE\">reading</field></block></value><value name=\"B\"><shadow type=\"math_number\" id=\"r7os9wzl39{rrkArgHZK\"><field name=\"NUM\">0</field></shadow><block type=\"math_arithmetic\" id=\"t#}uiQ,75TpAVQxqpdY;\"><field name=\"OP\">ADD</field><value name=\"A\"><shadow type=\"math_number\" id=\"J40#VpJaPkmnxSXPB8y2\"><field name=\"NUM\">0</field></shadow><block type=\"argument_reporter_number\" id=\"@$#JK_,5C/bM{NR|t0,s\"><field name=\"VALUE\">reference</field></block></value><value name=\"B\"><shadow type=\"math_number\" id=\"sl/!F!B:!8q/Y%EWjaIK\"><field name=\"NUM\">0</field></shadow><block type=\"argument_reporter_number\" id=\"8_1DS8*{07fSA$@#7zU8\"><field name=\"VALUE\">tolerance</field></block></value></block></value></block></value></block></value><statement name=\"DO0\"><block type=\"function_return\" id=\";IR|!xcn?i^yDWRyQ;(M\"><mutation xmlns=\"http://www.w3.org/1999/xhtml\" no_return_value=\"false\"></mutation><value name=\"RETURN_VALUE\"><shadow type=\"math_number\" id=\"~g1JyeX8qcm_bQ^GV^[q\"><field name=\"NUM\">0</field></shadow><block type=\"logic_boolean\" id=\"naA.:cN0mJ|p,vS4hhvC\"><field name=\"BOOL\">TRUE</field></block></value></block></statement><statement name=\"ELSE\"><block type=\"function_return\" id=\".gMe|^YTqmMo!)X%mMF:\"><mutation xmlns=\"http://www.w3.org/1999/xhtml\" no_return_value=\"false\"></mutation><value name=\"RETURN_VALUE\"><shadow type=\"math_number\" id=\"0K]vCRhSaAvmAzR/Ap`^\"><field name=\"NUM\">0</field></shadow><block type=\"logic_boolean\" id=\"^5q}K(Am`;]$-n2dxtNy\"><field name=\"BOOL\">FALSE</field></block></value></block></statement></block></statement></block><block type=\"pxt-on-start\" id=\"x+1%#jOazC4GU`L*2.u7\" x=\"0\" y=\"0\"><statement name=\"HANDLER\"><block type=\"Connected_oledClear\" id=\"W/xsRA)aAUc[S;dorFl7\"><next><block type=\"notlegos_pot_set\" id=\"HhX;d2%5OYCw=MPqt?b6\"><field name=\"aPin\">AnalogPin.P1</field><next><block type=\"notlegos_mp3_ports_set\" id=\"~%X{mEZR(S]7Mvrk.I`9\"><field name=\"dPin\">SerialPin.P16</field><next><block type=\"basic_show_icon\" id=\"8B,eZajyAo$Km+z$iRiy\"><field name=\"i\">IconNames.Heart</field></block></next></block></next></block></next></block></statement></block><block type=\"device_button_event\" id=\"~B-K#ftGg*OH@dZwUnay\" x=\"608\" y=\"294\"><field name=\"NAME\">Button.A</field><statement name=\"HANDLER\"><block type=\"device_pause\" id=\"N^=?=fPB3k}Im!D7+^eh\"><value name=\"pause\"><shadow type=\"timePicker\" id=\"TkN/CG,Kk3Zld9Y8.+h~\"><field name=\"ms\">NaN</field></shadow><block type=\"playFileNl2\" id=\"I{Okjk(3;5okdaXRJgpG\"><value name=\"soundString\"><shadow type=\"text\" id=\"F3#SaQH!)A158/mT(n0p\"><field name=\"TEXT\">1_1_25_100</field></shadow></value></block></value></block></statement></block><block type=\"device_button_event\" id=\".=xGN3Vg%2r]Y5T6,CdM\" x=\"1092\" y=\"303\"><field name=\"NAME\">Button.B</field><statement name=\"HANDLER\"><block type=\"device_pause\" id=\"_-pN0T3vMUEDhcju/DTG\"><value name=\"pause\"><shadow type=\"timePicker\" id=\"TkN/CG,Kk3Zld9Y8.+h~\"><field name=\"ms\">NaN</field></shadow><block type=\"playFileNl\" id=\"3Tc_KDQK.PmPS/_^Xc[{\"><value name=\"soundString\"><shadow type=\"text\" id=\"s?gR`}7k8?n|GZa.:Ba]\"><field name=\"TEXT\">2_1_1</field></shadow></value></block></value></block></statement></block><block type=\"device_pause\" id=\"UWpE44fq0}pI;+PVpZ}Y\" disabled-reasons=\"ORPHANED_BLOCK,MANUALLY_DISABLED\" x=\"42\" y=\"418\"><value name=\"pause\"><shadow type=\"timePicker\" id=\"TkN/CG,Kk3Zld9Y8.+h~\"><field name=\"ms\">NaN</field></shadow><block type=\"playFileNl\" id=\"^w)+87A=iXA~zt4#I%6@\" disabled-reasons=\"MANUALLY_DISABLED\"><value name=\"soundString\"><shadow type=\"text\" id=\"{ItsIYXVEIr4PHzq/}jo\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"TEXT\">1_1_1</field></shadow></value></block></value></block><block type=\"device_pause\" id=\"MCs{Jq@~s1]Yf,^~j1S.\" disabled-reasons=\"ORPHANED_BLOCK,MANUALLY_DISABLED\" x=\"530\" y=\"557\"><value name=\"pause\"><shadow type=\"timePicker\" id=\"7p8wc@SJO`gvYZ6Yq0vh\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"ms\">NaN</field></shadow><block type=\"playsFor\" id=\"FeRrC7Ata;FmV;6d{1Rw\" disabled-reasons=\"ORPHANED_BLOCK,MANUALLY_DISABLED\"><value name=\"soundString\"><block type=\"nl_get_soundstring\" id=\"j;/mX-HM67V*+N^URSUQ\" disabled-reasons=\"MANUALLY_DISABLED\"><value name=\"Category\"><shadow type=\"text\" id=\"%c}P{U!YfeLPGv/|?N}[\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"TEXT\">SFX</field></shadow></value><value name=\"Type\"><shadow type=\"text\" id=\"1Xf=)I7hRLE=F{v2wE~f\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"TEXT\">Splash</field></shadow></value></block></value></block></value></block><block type=\"playFolderFile\" id=\"/[Ze{yq~m#!w+iYyg9i9\" disabled-reasons=\"ORPHANED_BLOCK,MANUALLY_DISABLED\" x=\"-33\" y=\"587\"><value name=\"folderNum\"><shadow type=\"text\" id=\"l{vD]}Ls{/^lNDm2NKXQ\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"TEXT\">01</field></shadow></value><value name=\"fileNum\"><shadow type=\"text\" id=\"8HPem)3PUR}JV@15@}n6\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"TEXT\">01</field></shadow></value></block><block type=\"nl_player_set\" id=\":OW+=1cP.y0Bu#0N;6`#\" disabled-reasons=\"ORPHANED_BLOCK,MANUALLY_DISABLED\" x=\"275\" y=\"738\"><value name=\"player\"><shadow type=\"text\" id=\"V|Lh@`f1yf#/VL5O8Ykx\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"TEXT\">Mario</field></shadow></value></block><block type=\"playFileNl\" id=\"Czn}%(r,R6rQD@(Hqw(o\" disabled-reasons=\"ORPHANED_BLOCK,MANUALLY_DISABLED\" x=\"1267\" y=\"913\"><value name=\"soundString\"><shadow type=\"text\" id=\"xMRDF+00ZTfH(ID|^]L.\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"TEXT\">1_1_1</field></shadow></value></block></xml>","main.ts":"function isNearly (reference: number, reading: number, tolerance: number) {\n    if (reading >= reference - tolerance && reading <= reference + tolerance) {\n        return true\n    } else {\n        return false\n    }\n}\ninput.onButtonPressed(Button.A, function () {\n    basic.pause(notLegos.playFile2(\"1_1_25_100\"))\n})\ninput.onButtonPressed(Button.B, function () {\n    basic.pause(notLegos.playFile(\"2_1_1\"))\n})\nConnected.oledClear()\nnotLegos.potSet(AnalogPin.P1)\nnotLegos.mp3setPorts(SerialPin.P16)\nbasic.showIcon(IconNames.Heart)\n","README.md":"\n> Open this page at [https://notlegos.github.io/castleresay/](https://notlegos.github.io/castleresay/)\n\n## Use as Extension\n\nThis repository can be added as an **extension** in MakeCode.\n\n* open [https://makecode.microbit.org/](https://makecode.microbit.org/)\n* click on **New Project**\n* click on **Extensions** under the gearwheel menu\n* search for **https://github.com/notlegos/castleresay** and import\n\n## Edit this project\n\nTo edit this repository in MakeCode.\n\n* open [https://makecode.microbit.org/](https://makecode.microbit.org/)\n* click on **Import** then click on **Import URL**\n* paste **https://github.com/notlegos/castleresay** and click import\n\n#### Metadata (used for search, rendering)\n\n* for PXT/microbit\n<script src=\"https://makecode.com/gh-pages-embed.js\"></script><script>makeCodeRender(\"{{ site.makecode.home_url }}\", \"{{ site.github.owner_name }}/{{ site.github.repository_name }}\");</script>\n\n\n\n> Open this page at [https://notlegos.github.io/soundbank/](https://notlegos.github.io/soundbank/)\n\n## Use as Extension\n\nThis repository can be added as an **extension** in MakeCode.\n\n* open [https://makecode.microbit.org/](https://makecode.microbit.org/)\n* click on **New Project**\n* click on **Extensions** under the gearwheel menu\n* search for **https://github.com/notlegos/soundbank** and import\n\n## Edit this project\n\nTo edit this repository in MakeCode.\n\n* open [https://makecode.microbit.org/](https://makecode.microbit.org/)\n* click on **Import** then click on **Import URL**\n* paste **https://github.com/notlegos/soundbank** and click import\n\n#### Metadata (used for search, rendering)\n\n* for PXT/microbit\n<script src=\"https://makecode.com/gh-pages-embed.js\"></script><script>makeCodeRender(\"{{ site.makecode.home_url }}\", \"{{ site.github.owner_name }}/{{ site.github.repository_name }}\");</script>\n\n\n\n> Open this page at [https://notlegos.github.io/resoundbank/](https://notlegos.github.io/resoundbank/)\n\n## Use as Extension\n\nThis repository can be added as an **extension** in MakeCode.\n\n* open [https://makecode.microbit.org/](https://makecode.microbit.org/)\n* click on **New Project**\n* click on **Extensions** under the gearwheel menu\n* search for **https://github.com/notlegos/resoundbank** and import\n\n## Edit this project\n\nTo edit this repository in MakeCode.\n\n* open [https://makecode.microbit.org/](https://makecode.microbit.org/)\n* click on **Import** then click on **Import URL**\n* paste **https://github.com/notlegos/resoundbank** and click import\n\n#### Metadata (used for search, rendering)\n\n* for PXT/microbit\n<script src=\"https://makecode.com/gh-pages-embed.js\"></script><script>makeCodeRender(\"{{ site.makecode.home_url }}\", \"{{ site.github.owner_name }}/{{ site.github.repository_name }}\");</script>\n","displaySendBuffer.asm":"sendBufferAsm:\n\n    push {r4,r5,r6,r7,lr}\n    \n    mov r4, r0 ; save buff\n    mov r6, r1 ; save pin\n    \n    mov r0, r4\n    bl BufferMethods::length\n    mov r5, r0\n    \n    mov r0, r4\n    bl BufferMethods::getBytes\n    mov r4, r0\n    \n    ; setup pin as digital\n    mov r0, r6\n    movs r1, #0\n    bl pins::digitalWritePin\n    \n    ; load pin address\n    mov r0, r6\n    bl pins::getPinAddress\n\n    ldr r0, [r0, #8] ; get mbed DigitalOut from MicroBitPin\n    ldr r1, [r0, #4] ; r1-mask for this pin\n    ldr r2, [r0, #16] ; r2-clraddr\n    ldr r3, [r0, #12] ; r3-setaddr\n    \n    cpsid i ; disable irq\n    \n    b .start\n    \n.nextbit:               ;            C0\n    str r1, [r3, #0]    ; pin := hi  C2\n    tst r6, r0          ;            C3\n    bne .islate         ;            C4\n    str r1, [r2, #0]    ; pin := lo  C6\n.islate:\n    lsrs r6, r6, #1     ; r6 >>= 1   C7\n    bne .justbit        ;            C8\n    \n    ; not just a bit - need new byte\n    adds r4, #1         ; r4++       C9\n    subs r5, #1         ; r5--       C10\n    bcc .stop           ; if (r5<0) goto .stop  C11\n.start:\n    movs r6, #0x80      ; reset mask C12\n    nop                 ;            C13\n\n.common:               ;             C13\n    str r1, [r2, #0]   ; pin := lo   C15\n    ; always re-load byte - it just fits with the cycles better this way\n    ldrb r0, [r4, #0]  ; r0 := *r4   C17\n    b .nextbit         ;             C20\n\n.justbit: ; C10\n    ; no nops, branch taken is already 3 cycles\n    b .common ; C13\n\n.stop:    \n    str r1, [r2, #0]   ; pin := lo\n    cpsie i            ; enable irq\n\n    pop {r4,r5,r6,r7,pc}\n","display.ts":"\n/**\n* Functions to PlanetX sensor by ELECFREAKS Co.,Ltd.\n*/\n//% color=#EA5532 icon=\"\\uf110\" block=\"Connected\" blockId=\"PlanetX_Connected\" \n//% groups='[\"LED\", \"Digital\", \"Analog\", \"IIC Port\", \"OLED\", \"8*16 Matrix\", \"7-Seg 4-Dig LED Nixietube\"]'\nnamespace Connected {\n    ////////////////////////////////TM 1637/////////////////\n    let TM1637_CMD1 = 0x40;\n    let TM1637_CMD2 = 0xC0;\n    let TM1637_CMD3 = 0x80;\n    let _SEGMENTS = [0x3F, 0x06, 0x5B, 0x4F, 0x66, 0x6D, 0x7D, 0x07, 0x7F, 0x6F, 0x77, 0x7C, 0x39, 0x5E, 0x79, 0x71];\n    /////////////////////OLED///////////////////////////////\n    let firstoledinit = true\n    const basicFont: string[] = [\n        \"\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\", // \" \"\n        \"\\x00\\x00\\x5F\\x00\\x00\\x00\\x00\\x00\", // \"!\"\n        \"\\x00\\x00\\x07\\x00\\x07\\x00\\x00\\x00\", // \"\"\"\n        \"\\x00\\x14\\x7F\\x14\\x7F\\x14\\x00\\x00\", // \"#\"\n        \"\\x00\\x24\\x2A\\x7F\\x2A\\x12\\x00\\x00\", // \"$\"\n        \"\\x00\\x23\\x13\\x08\\x64\\x62\\x00\\x00\", // \"%\"\n        \"\\x00\\x36\\x49\\x55\\x22\\x50\\x00\\x00\", // \"&\"\n        \"\\x00\\x00\\x05\\x03\\x00\\x00\\x00\\x00\", // \"'\"\n        \"\\x00\\x1C\\x22\\x41\\x00\\x00\\x00\\x00\", // \"(\"\n        \"\\x00\\x41\\x22\\x1C\\x00\\x00\\x00\\x00\", // \")\"\n        \"\\x00\\x08\\x2A\\x1C\\x2A\\x08\\x00\\x00\", // \"*\"\n        \"\\x00\\x08\\x08\\x3E\\x08\\x08\\x00\\x00\", // \"+\"\n        \"\\x00\\xA0\\x60\\x00\\x00\\x00\\x00\\x00\", // \",\"\n        \"\\x00\\x08\\x08\\x08\\x08\\x08\\x00\\x00\", // \"-\"\n        \"\\x00\\x60\\x60\\x00\\x00\\x00\\x00\\x00\", // \".\"\n        \"\\x00\\x20\\x10\\x08\\x04\\x02\\x00\\x00\", // \"/\"\n        \"\\x00\\x3E\\x51\\x49\\x45\\x3E\\x00\\x00\", // \"0\"\n        \"\\x00\\x00\\x42\\x7F\\x40\\x00\\x00\\x00\", // \"1\"\n        \"\\x00\\x62\\x51\\x49\\x49\\x46\\x00\\x00\", // \"2\"\n        \"\\x00\\x22\\x41\\x49\\x49\\x36\\x00\\x00\", // \"3\"\n        \"\\x00\\x18\\x14\\x12\\x7F\\x10\\x00\\x00\", // \"4\"\n        \"\\x00\\x27\\x45\\x45\\x45\\x39\\x00\\x00\", // \"5\"\n        \"\\x00\\x3C\\x4A\\x49\\x49\\x30\\x00\\x00\", // \"6\"\n        \"\\x00\\x01\\x71\\x09\\x05\\x03\\x00\\x00\", // \"7\"\n        \"\\x00\\x36\\x49\\x49\\x49\\x36\\x00\\x00\", // \"8\"\n        \"\\x00\\x06\\x49\\x49\\x29\\x1E\\x00\\x00\", // \"9\"\n        \"\\x00\\x00\\x36\\x36\\x00\\x00\\x00\\x00\", // \":\"\n        \"\\x00\\x00\\xAC\\x6C\\x00\\x00\\x00\\x00\", // \";\"\n        \"\\x00\\x08\\x14\\x22\\x41\\x00\\x00\\x00\", // \"<\"\n        \"\\x00\\x14\\x14\\x14\\x14\\x14\\x00\\x00\", // \"=\"\n        \"\\x00\\x41\\x22\\x14\\x08\\x00\\x00\\x00\", // \">\"\n        \"\\x00\\x02\\x01\\x51\\x09\\x06\\x00\\x00\", // \"?\"\n        \"\\x00\\x32\\x49\\x79\\x41\\x3E\\x00\\x00\", // \"@\"\n        \"\\x00\\x7E\\x09\\x09\\x09\\x7E\\x00\\x00\", // \"A\"\n        \"\\x00\\x7F\\x49\\x49\\x49\\x36\\x00\\x00\", // \"B\"\n        \"\\x00\\x3E\\x41\\x41\\x41\\x22\\x00\\x00\", // \"C\"\n        \"\\x00\\x7F\\x41\\x41\\x22\\x1C\\x00\\x00\", // \"D\"\n        \"\\x00\\x7F\\x49\\x49\\x49\\x41\\x00\\x00\", // \"E\"\n        \"\\x00\\x7F\\x09\\x09\\x09\\x01\\x00\\x00\", // \"F\"\n        \"\\x00\\x3E\\x41\\x41\\x51\\x72\\x00\\x00\", // \"G\"\n        \"\\x00\\x7F\\x08\\x08\\x08\\x7F\\x00\\x00\", // \"H\"\n        \"\\x00\\x41\\x7F\\x41\\x00\\x00\\x00\\x00\", // \"I\"\n        \"\\x00\\x20\\x40\\x41\\x3F\\x01\\x00\\x00\", // \"J\"\n        \"\\x00\\x7F\\x08\\x14\\x22\\x41\\x00\\x00\", // \"K\"\n        \"\\x00\\x7F\\x40\\x40\\x40\\x40\\x00\\x00\", // \"L\"\n        \"\\x00\\x7F\\x02\\x0C\\x02\\x7F\\x00\\x00\", // \"M\"\n        \"\\x00\\x7F\\x04\\x08\\x10\\x7F\\x00\\x00\", // \"N\"\n        \"\\x00\\x3E\\x41\\x41\\x41\\x3E\\x00\\x00\", // \"O\"\n        \"\\x00\\x7F\\x09\\x09\\x09\\x06\\x00\\x00\", // \"P\"\n        \"\\x00\\x3E\\x41\\x51\\x21\\x5E\\x00\\x00\", // \"Q\"\n        \"\\x00\\x7F\\x09\\x19\\x29\\x46\\x00\\x00\", // \"R\"\n        \"\\x00\\x26\\x49\\x49\\x49\\x32\\x00\\x00\", // \"S\"\n        \"\\x00\\x01\\x01\\x7F\\x01\\x01\\x00\\x00\", // \"T\"\n        \"\\x00\\x3F\\x40\\x40\\x40\\x3F\\x00\\x00\", // \"U\"\n        \"\\x00\\x1F\\x20\\x40\\x20\\x1F\\x00\\x00\", // \"V\"\n        \"\\x00\\x3F\\x40\\x38\\x40\\x3F\\x00\\x00\", // \"W\"\n        \"\\x00\\x63\\x14\\x08\\x14\\x63\\x00\\x00\", // \"X\"\n        \"\\x00\\x03\\x04\\x78\\x04\\x03\\x00\\x00\", // \"Y\"\n        \"\\x00\\x61\\x51\\x49\\x45\\x43\\x00\\x00\", // \"Z\"\n        \"\\x00\\x7F\\x41\\x41\\x00\\x00\\x00\\x00\", // \"\"\"\n        \"\\x00\\x02\\x04\\x08\\x10\\x20\\x00\\x00\", // \"\\\"\n        \"\\x00\\x41\\x41\\x7F\\x00\\x00\\x00\\x00\", // \"\"\"\n        \"\\x00\\x04\\x02\\x01\\x02\\x04\\x00\\x00\", // \"^\"\n        \"\\x00\\x80\\x80\\x80\\x80\\x80\\x00\\x00\", // \"_\"\n        \"\\x00\\x01\\x02\\x04\\x00\\x00\\x00\\x00\", // \"`\"\n        \"\\x00\\x20\\x54\\x54\\x54\\x78\\x00\\x00\", // \"a\"\n        \"\\x00\\x7F\\x48\\x44\\x44\\x38\\x00\\x00\", // \"b\"\n        \"\\x00\\x38\\x44\\x44\\x28\\x00\\x00\\x00\", // \"c\"\n        \"\\x00\\x38\\x44\\x44\\x48\\x7F\\x00\\x00\", // \"d\"\n        \"\\x00\\x38\\x54\\x54\\x54\\x18\\x00\\x00\", // \"e\"\n        \"\\x00\\x08\\x7E\\x09\\x02\\x00\\x00\\x00\", // \"f\"\n        \"\\x00\\x18\\xA4\\xA4\\xA4\\x7C\\x00\\x00\", // \"g\"\n        \"\\x00\\x7F\\x08\\x04\\x04\\x78\\x00\\x00\", // \"h\"\n        \"\\x00\\x00\\x7D\\x00\\x00\\x00\\x00\\x00\", // \"i\"\n        \"\\x00\\x80\\x84\\x7D\\x00\\x00\\x00\\x00\", // \"j\"\n        \"\\x00\\x7F\\x10\\x28\\x44\\x00\\x00\\x00\", // \"k\"\n        \"\\x00\\x41\\x7F\\x40\\x00\\x00\\x00\\x00\", // \"l\"\n        \"\\x00\\x7C\\x04\\x18\\x04\\x78\\x00\\x00\", // \"m\"\n        \"\\x00\\x7C\\x08\\x04\\x7C\\x00\\x00\\x00\", // \"n\"\n        \"\\x00\\x38\\x44\\x44\\x38\\x00\\x00\\x00\", // \"o\"\n        \"\\x00\\xFC\\x24\\x24\\x18\\x00\\x00\\x00\", // \"p\"\n        \"\\x00\\x18\\x24\\x24\\xFC\\x00\\x00\\x00\", // \"q\"\n        \"\\x00\\x00\\x7C\\x08\\x04\\x00\\x00\\x00\", // \"r\"\n        \"\\x00\\x48\\x54\\x54\\x24\\x00\\x00\\x00\", // \"s\"\n        \"\\x00\\x04\\x7F\\x44\\x00\\x00\\x00\\x00\", // \"t\"\n        \"\\x00\\x3C\\x40\\x40\\x7C\\x00\\x00\\x00\", // \"u\"\n        \"\\x00\\x1C\\x20\\x40\\x20\\x1C\\x00\\x00\", // \"v\"\n        \"\\x00\\x3C\\x40\\x30\\x40\\x3C\\x00\\x00\", // \"w\"\n        \"\\x00\\x44\\x28\\x10\\x28\\x44\\x00\\x00\", // \"x\"\n        \"\\x00\\x1C\\xA0\\xA0\\x7C\\x00\\x00\\x00\", // \"y\"\n        \"\\x00\\x44\\x64\\x54\\x4C\\x44\\x00\\x00\", // \"z\"\n        \"\\x00\\x08\\x36\\x41\\x00\\x00\\x00\\x00\", // \"{\"\n        \"\\x00\\x00\\x7F\\x00\\x00\\x00\\x00\\x00\", // \"|\"\n        \"\\x00\\x41\\x36\\x08\\x00\\x00\\x00\\x00\", // \"}\"\n        \"\\x00\\x02\\x01\\x01\\x02\\x01\\x00\\x00\"  // \"~\"\n    ];\n    function oledcmd(c: number) {\n        pins.i2cWriteNumber(0x3c, c, NumberFormat.UInt16BE);\n    }\n    function writeData(n: number) {\n        let b = n;\n        if (n < 0) { n = 0 }\n        if (n > 255) { n = 255 }\n        pins.i2cWriteNumber(0x3c, 0x4000 + b, NumberFormat.UInt16BE);\n    }\n    function writeCustomChar(c: string) {\n        for (let i = 0; i < 8; i++) {\n            writeData(c.charCodeAt(i));\n        }\n    }\n    function setText(row: number, column: number) {\n        let r = row;\n        let c = column;\n        if (row < 0) { r = 0 }\n        if (column < 0) { c = 0 }\n        if (row > 7) { r = 7 }\n        if (column > 15) { c = 15 }\n        oledcmd(0xB0 + r);            //set page address\n        oledcmd(0x00 + (8 * c & 0x0F));  //set column lower address\n        oledcmd(0x10 + ((8 * c >> 4) & 0x0F));   //set column higher address\n    }\n    function putChar(c: string) {\n        let c1 = c.charCodeAt(0);\n        writeCustomChar(basicFont[c1 - 32]);\n    }\n    function oledinit(): void {\n        oledcmd(0xAE);  // Set display OFF\n        oledcmd(0xD5);  // Set Display Clock Divide Ratio / OSC Frequency 0xD4\n        oledcmd(0x80);  // Display Clock Divide Ratio / OSC Frequency \n        oledcmd(0xA8);  // Set Multiplex Ratio\n        oledcmd(0x3F);  // Multiplex Ratio for 128x64 (64-1)\n        oledcmd(0xD3);  // Set Display Offset\n        oledcmd(0x00);  // Display Offset\n        oledcmd(0x40);  // Set Display Start Line\n        oledcmd(0x8D);  // Set Charge Pump\n        oledcmd(0x14);  // Charge Pump (0x10 External, 0x14 Internal DC/DC)\n        oledcmd(0xA1);  // Set Segment Re-Map\n        oledcmd(0xC8);  // Set Com Output Scan Direction\n        oledcmd(0xDA);  // Set COM Hardware Configuration\n        oledcmd(0x12);  // COM Hardware Configuration\n        oledcmd(0x81);  // Set Contrast\n        oledcmd(0xCF);  // Contrast\n        oledcmd(0xD9);  // Set Pre-Charge Period\n        oledcmd(0xF1);  // Set Pre-Charge Period (0x22 External, 0xF1 Internal)\n        oledcmd(0xDB);  // Set VCOMH Deselect Level\n        oledcmd(0x40);  // VCOMH Deselect Level\n        oledcmd(0xA4);  // Set all pixels OFF\n        oledcmd(0xA6);  // Set display not inverted\n        oledcmd(0xAF);  // Set display On\n        oledClear();\n    }\n    //////////////////////////////////////////////////////////////Matrix\n    let initializedMatrix = false\n    const HT16K33_ADDRESS = 0x70\n    const HT16K33_BLINK_CMD = 0x80\n    const HT16K33_BLINK_DISPLAYON = 0x01\n    const HT16K33_CMD_BRIGHTNESS = 0xE0\n    let matBuf = pins.createBuffer(17)\n    function matrixInit() {\n        i2ccmd(HT16K33_ADDRESS, 0x21);// turn on oscillator\n        i2ccmd(HT16K33_ADDRESS, HT16K33_BLINK_CMD | HT16K33_BLINK_DISPLAYON | (0 << 1));\n        i2ccmd(HT16K33_ADDRESS, HT16K33_CMD_BRIGHTNESS | 0xF);\n    }\n    function i2ccmd(addr: number, value: number) {\n        let buf = pins.createBuffer(1)\n        buf[0] = value\n        pins.i2cWriteBuffer(addr, buf)\n    }\n    function matrixShow() {\n        matBuf[0] = 0x00;\n        pins.i2cWriteBuffer(HT16K33_ADDRESS, matBuf);\n    }\n    ///////////////////////////////enum\n\n    export enum EmojiList {\n        //% block=\"😆\"\n        Grinning_Squinting_Face,\n        //% block=\"😐\"\n        Neutral_Face,\n        //% block=\"😞\"\n        Sad_Face,\n        //% block=\"🙂\"\n        Slightly_Smiling_Face,\n        //% block=\"😠\"\n        Angry_Face\n    }\n    export enum NeoPixelColors {\n        //% block=red\n        Red = 0xFF0000,\n        //% block=orange\n        Orange = 0xFFA500,\n        //% block=yellow\n        Yellow = 0xFFFF00,\n        //% block=green\n        Green = 0x00FF00,\n        //% block=blue\n        Blue = 0x0000FF,\n        //% block=indigo\n        Indigo = 0x4b0082,\n        //% block=violet\n        Violet = 0x8a2be2,\n        //% block=purple\n        Purple = 0xFF00FF,\n        //% block=white\n        White = 0xFFFFFF,\n        //% block=black\n        Black = 0x000000\n    }\n\n    /**\n     * Different modes for RGB or RGB+W NeoPixel strips\n     */\n    export enum NeoPixelMode {\n        //% block=\"RGB (GRB format)\"\n        RGB = 0,\n        //% block=\"RGB+W\"\n        RGBW = 1,\n        //% block=\"RGB (RGB format)\"\n        RGB_RGB = 2\n    }\n    ///////////////////////////////////////////////////////RJpin_to_pin\n    function RJpin_to_analog(Rjpin: AnalogRJPin): any {\n        let pin = AnalogPin.P1\n        switch (Rjpin) {\n            case AnalogRJPin.J1:\n                pin = AnalogPin.P1\n                break;\n            case AnalogRJPin.J2:\n                pin = AnalogPin.P2\n                break;\n        }\n        return pin\n    }\n    function RJpin_to_digital(Rjpin: DigitalRJPin): any {\n        let pin = DigitalPin.P1\n        switch (Rjpin) {\n            case DigitalRJPin.J1:\n                pin = DigitalPin.P8\n                break;\n            case DigitalRJPin.J2:\n                pin = DigitalPin.P12\n                break;\n            case DigitalRJPin.J3:\n                pin = DigitalPin.P14\n                break;\n            case DigitalRJPin.J4:\n                pin = DigitalPin.P16\n                break;\n            case DigitalRJPin.J5:\n                pin = DigitalPin.P11\n                break;\n            case DigitalRJPin.P0:\n                pin = DigitalPin.P0\n                break;\n            case DigitalRJPin.P1:\n                pin = DigitalPin.P1\n                break;\n            case DigitalRJPin.P2:\n                pin = DigitalPin.P2\n                break;\n            case DigitalRJPin.P3:\n                pin = DigitalPin.P3\n                break;\n            case DigitalRJPin.P4:\n                pin = DigitalPin.P4\n                break;\n            case DigitalRJPin.P4:\n                pin = DigitalPin.P4\n                break;\n            case DigitalRJPin.P5:\n                pin = DigitalPin.P5\n                break;\n            case DigitalRJPin.P6:\n                pin = DigitalPin.P6\n                break;\n            case DigitalRJPin.P7:\n                pin = DigitalPin.P7\n                break;\n            case DigitalRJPin.P8:\n                pin = DigitalPin.P8\n                break;\n            case DigitalRJPin.P9:\n                pin = DigitalPin.P9\n                break;\n            case DigitalRJPin.P10:\n                pin = DigitalPin.P10\n                break;\n            case DigitalRJPin.P11:\n                pin = DigitalPin.P11\n                break;\n            case DigitalRJPin.P12:\n                pin = DigitalPin.P12\n                break;\n            case DigitalRJPin.P13:\n                pin = DigitalPin.P13\n                break;\n            case DigitalRJPin.P14:\n                pin = DigitalPin.P14\n                break;\n            case DigitalRJPin.P15:\n                pin = DigitalPin.P15\n                break;\n            case DigitalRJPin.P16:\n                pin = DigitalPin.P16\n                break;\n        }\n        return pin\n    }\n    /////////////////////////////User_function//////////////////\n\n    /**\n    * toggle led\n    */\n    //% blockId=LED block=\"LED %Rjpin toggle to $ledstate || brightness %brightness \\\\%\"\n    //% Rjpin.fieldEditor=\"gridpicker\" Rjpin.fieldOptions.columns=2\n    //% brightness.min=0 brightness.max=100\n    //% ledstate.shadow=\"toggleOnOff\"\n    //% subcategory=Display group=\"LED\" color=#EA5532\n    //% expandableArgumentMode=\"toggle\"\n    export function ledBrightness(Rjpin: DigitalRJPin, ledstate: boolean, brightness: number = 100): void {\n        let pin = AnalogPin.P1\n        switch (Rjpin) {\n            case DigitalRJPin.J1:\n                pin = AnalogPin.P1\n                break;\n            case DigitalRJPin.J2:\n                pin = AnalogPin.P2\n                break;\n            case DigitalRJPin.J3:\n                pin = AnalogPin.P13\n                break;\n            case DigitalRJPin.J4:\n                pin = AnalogPin.P15\n                break;\n            case DigitalRJPin.P0:\n                pin = AnalogPin.P0\n                break;\n            case DigitalRJPin.P1:\n                pin = AnalogPin.P1\n                break;\n            case DigitalRJPin.P2:\n                pin = AnalogPin.P2\n                break;\n            case DigitalRJPin.P3:\n                pin = AnalogPin.P3\n                break;\n            case DigitalRJPin.P4:\n                pin = AnalogPin.P4\n                break;\n            case DigitalRJPin.P4:\n                pin = AnalogPin.P4\n                break;\n            case DigitalRJPin.P5:\n                pin = AnalogPin.P5\n                break;\n            case DigitalRJPin.P6:\n                pin = AnalogPin.P6\n                break;\n            case DigitalRJPin.P7:\n                pin = AnalogPin.P7\n                break;\n            case DigitalRJPin.P8:\n                pin = AnalogPin.P8\n                break;\n            case DigitalRJPin.P9:\n                pin = AnalogPin.P9\n                break;\n            case DigitalRJPin.P10:\n                pin = AnalogPin.P10\n                break;\n            case DigitalRJPin.P11:\n                pin = AnalogPin.P11\n                break;\n            case DigitalRJPin.P12:\n                pin = AnalogPin.P12\n                break;\n            case DigitalRJPin.P13:\n                pin = AnalogPin.P13\n                break;\n            case DigitalRJPin.P14:\n                pin = AnalogPin.P14\n                break;\n            case DigitalRJPin.P15:\n                pin = AnalogPin.P15\n                break;\n            case DigitalRJPin.P16:\n                pin = AnalogPin.P16\n                break;\n        }\n        if (ledstate) {\n            pins.analogSetPeriod(pin, 100)\n            pins.analogWritePin(pin, Math.map(brightness, 0, 100, 0, 1023))\n        }\n        else {\n            pins.analogWritePin(pin, 0)\n            brightness = 0\n        }\n    }\n    //% subcategory=Display group=\"8*16 Matrix\" color=#00B1ED\n    //% blockId= matrix_refresh block=\"Matrix Refresh\" \n    export function matrixRefresh(): void {\n        if (!initializedMatrix) {\n            matrixInit();\n            initializedMatrix = true;\n        }\n        matrixShow();\n    }\n    //% subcategory=Display group=\"8*16 Matrix\" color=#00B1ED\n    //% blockId= matrix_clear block=\"Matrix Clear\"\n    export function matrixClear(): void {\n        if (!initializedMatrix) {\n            matrixInit();\n            initializedMatrix = true;\n        }\n        for (let i = 0; i < 16; i++) {\n            matBuf[i + 1] = 0;\n        }\n        matrixShow();\n    }\n\n    //% x.min=0 x.max=15\n    //% y.min=0 y.max=7\n    //% blockId= matrix_draw block=\"Matrix Draw|X %x|Y %y\"\n    //% subcategory=Display group=\"8*16 Matrix\" color=#00B1ED\n    export function matrixDraw(x: number, y: number): void {\n        if (!initializedMatrix) {\n            matrixInit();\n            initializedMatrix = true;\n        }\n\n        if (x > 15) {\n            x = 15\n        }\n        if (y > 7) {\n            y = 7\n        }\n        if (x < 0) {\n            x = 0\n        }\n        if (y < 0) {\n            y = 0\n        }\n        x = Math.round(x)\n        y = Math.round(y)\n\n        let idx = y * 2 + Math.idiv(x, 8);\n\n        let tmp = matBuf[idx + 1];\n        tmp |= (1 << (x % 8));\n        matBuf[idx + 1] = tmp;\n\n        matrixShow();\n    }\n    //% block=\"Matrix show emoji %ID\" color=#00B1ED\n    //% subcategory=Display group=\"8*16 Matrix\" \n    export function matrixEmoji(ID: EmojiList) {\n        matrixClear();\n        let point;\n        switch (ID) {\n            case 0:\n                point = [[2, 0], [13, 0],\n                [3, 1], [12, 1],\n                [4, 2], [11, 2],\n                [3, 3], [12, 3],\n                [2, 4], [5, 4], [6, 4], [7, 4], [8, 4], [9, 4], [10, 4], [13, 4],\n                [5, 5], [7, 5], [8, 5], [10, 5],\n                [5, 6], [10, 6],\n                [6, 7], [7, 7], [8, 7], [9, 7]\n                ];\n                break;\n            case 1:\n                point = [[2, 1], [3, 1], [13, 1], [12, 1],\n                [2, 2], [3, 2], [13, 2], [12, 2],\n                [2, 3], [3, 3], [13, 3], [12, 3],\n                [5, 5], [6, 5], [7, 5], [8, 5], [9, 5], [10, 5],\n                [5, 6], [6, 6], [7, 6], [8, 6], [9, 6], [10, 6]\n                ];\n                break;\n            case 2:\n                point = [[1, 2], [5, 2], [10, 2], [14, 2],\n                [1, 3], [2, 3], [3, 3], [4, 3], [5, 3], [10, 3], [11, 3], [12, 3], [13, 3], [14, 3],\n                [2, 4], [3, 4], [4, 4], [11, 4], [12, 4], [13, 4],\n                [6, 6], [7, 6], [8, 6], [9, 6],\n                [5, 7], [10, 7]\n                ];\n                break;\n            case 3:\n                point = [[2, 1], [3, 1], [13, 1], [12, 1],\n                [2, 2], [3, 2], [13, 2], [12, 2],\n                [2, 3], [3, 3], [13, 3], [12, 3],\n                [5, 5], [10, 5],\n                [6, 6], [7, 6], [8, 6], [9, 6]\n                ];\n                break;\n            case 4:\n                point = [[2, 0], [13, 0],\n                [3, 1], [12, 1],\n                [3, 2], [4, 2], [11, 2], [12, 2],\n                [3, 3], [4, 3], [11, 3], [12, 3],\n                [6, 6], [7, 6], [8, 6], [9, 6],\n                [5, 7], [10, 7]\n                ];\n                break;\n        }\n        let index_max = point.length\n        for (let index = 0; index < index_max; index++) {\n            matrixDraw(point[index][0], point[index][1])\n        }\n        matrixRefresh();\n    }\n    //% line.min=1 line.max=8 line.defl=1\n    //% text.defl=\"Hello,ELECFREAKS\"\n    //% block=\"OLED show line %line|text %text\"\n    //% subcategory=Display group=\"OLED\" color=#00B1ED\n    export function showUserText(line: number, text: string) {\n        if (firstoledinit) {\n            oledinit()\n            firstoledinit = false\n        }\n        if (text.length > 16) {\n            text = text.substr(0, 16)\n        }\n        line = line - 1\n        setText(line, 0);\n        for (let c of text) {\n            putChar(c);\n        }\n\n        for (let i = text.length; i < 16; i++) {\n            setText(line, i);\n            putChar(\" \");\n        }\n    }\n    //% line.min=1 line.max=8 line.defl=2 \n    //% n.defl=20200508\n    //% block=\"OLED show line %line|number %n\"\n    //% subcategory=Display group=\"OLED\" color=#00B1ED\n    export function showUserNumber(line: number, n: number) {\n        if (firstoledinit) {\n            oledinit()\n            firstoledinit = false\n        }\n        showUserText(line, \"\" + n)\n    }\n    //% block=\"clear display\" color=#00B1ED\n    //% subcategory=Display group=\"OLED\"\n    export function oledClear() {\n        //oledcmd(DISPLAY_OFF);   //display off\n        for (let j = 0; j < 8; j++) {\n            setText(j, 0);\n            {\n                for (let i = 0; i < 16; i++)  //clear all columns\n                {\n                    putChar(' ');\n                }\n            }\n        }\n        //oledcmd(DISPLAY_ON);    //display on\n        setText(0, 0);\n    }\n    /**\n   * Create a new driver Grove - 4-Digit Display\n   * @param clkPin value of clk pin number\n   * @param dataPin value of data pin number\n   */\n    //% blockId=grove_tm1637_create block=\"connect 4-Digit Display |pin %pin|\"\n    //% subcategory=Display group=\"7-Seg 4-Dig LED Nixietube\" blockSetVariable=display color=#EA5532\n    export function tm1637Create(Rjpin: DigitalRJPin, intensity: number = 7, count: number = 4): TM1637LEDs {\n        let display = new TM1637LEDs();\n        switch (Rjpin) {\n            case DigitalRJPin.J1:\n                display.clk = DigitalPin.P1\n                display.dio = DigitalPin.P8\n                break;\n            case DigitalRJPin.J2:\n                display.clk = DigitalPin.P2\n                display.dio = DigitalPin.P12\n                break;\n            case DigitalRJPin.J3:\n                display.clk = DigitalPin.P13\n                display.dio = DigitalPin.P14\n                break;\n            case DigitalRJPin.J4:\n                display.clk = DigitalPin.P15\n                display.dio = DigitalPin.P16\n                break;\n            case DigitalRJPin.J5:\n                display.clk = DigitalPin.P12\n                display.dio = DigitalPin.P11\n                break;\n        }\n        if ((count < 1) || (count > 5)) count = 4;\n        display.count = count;\n        display.brightness = intensity;\n        display.init();\n        return display;\n    }\n    export class TM1637LEDs {\n        buf: Buffer;\n        clk: DigitalPin;\n        dio: DigitalPin;\n        _ON: number;\n        brightness: number;\n        count: number;  // number of LEDs\n        /**\n         * initial TM1637\n         */\n        init(): void {\n            pins.digitalWritePin(this.clk, 0);\n            pins.digitalWritePin(this.dio, 0);\n            this._ON = 8;\n            this.buf = pins.createBuffer(this.count);\n            this.clear();\n        }\n        /**\n         * Start \n         */\n        _start() {\n            pins.digitalWritePin(this.dio, 0);\n            pins.digitalWritePin(this.clk, 0);\n        }\n        /**\n         * Stop\n         */\n        _stop() {\n            pins.digitalWritePin(this.dio, 0);\n            pins.digitalWritePin(this.clk, 1);\n            pins.digitalWritePin(this.dio, 1);\n        }\n        /**\n         * send command1\n         */\n        _write_data_cmd() {\n            this._start();\n            this._write_byte(TM1637_CMD1);\n            this._stop();\n        }\n        /**\n         * send command3\n         */\n        _write_dsp_ctrl() {\n            this._start();\n            this._write_byte(TM1637_CMD3 | this._ON | this.brightness);\n            this._stop();\n        }\n        /**\n         * send a byte to 2-wire interface\n         */\n        _write_byte(b: number) {\n            for (let i = 0; i < 8; i++) {\n                pins.digitalWritePin(this.dio, (b >> i) & 1);\n                pins.digitalWritePin(this.clk, 1);\n                pins.digitalWritePin(this.clk, 0);\n            }\n            pins.digitalWritePin(this.clk, 1);\n            pins.digitalWritePin(this.clk, 0);\n        }\n        _intensity(val: number = 7) {\n            this._ON = 8;\n            this.brightness = val - 1;\n            this._write_data_cmd();\n            this._write_dsp_ctrl();\n        }\n        /**\n         * set data to TM1637, with given bit\n         */\n        _dat(bit: number, dat: number) {\n            this._write_data_cmd();\n            this._start();\n            this._write_byte(TM1637_CMD2 | (bit % this.count))\n            this._write_byte(dat);\n            this._stop();\n            this._write_dsp_ctrl();\n        }\n        /**\n         * Show a single number from 0 to 9 at a specified digit of Grove - 4-Digit Display\n         * @param dispData value of number\n         * @param bitAddr value of bit number\n         */\n        //% blockId=grove_tm1637_display_bit block=\"%display|show single number|%num|at digit|%bit\"\n        //% subcategory=Display group=\"7-Seg 4-Dig LED Nixietube\" color=#EA5532\n        //% bit.defl=1 bit.min=0 bit.max=9\n        showbit(num: number = 5, bit: number = 0) {\n            bit = Math.map(bit, 4, 1, 0, 3)\n            this.buf[bit % this.count] = _SEGMENTS[num % 16]\n            this._dat(bit, _SEGMENTS[num % 16])\n        }\n        /**\n         * Show a 4 digits number on display\n         * @param dispData value of number\n         */\n        //% blockId=grove_tm1637_display_number block=\"%display|show number|%num\"\n        //% subcategory=Display group=\"7-Seg 4-Dig LED Nixietube\" color=#EA5532\n        showNumber(num: number) {\n            if (num < 0) {\n                num = -num\n                this.showbit(Math.idiv(num, 1000) % 10)\n                this.showbit(num % 10, 1)\n                this.showbit(Math.idiv(num, 10) % 10, 2)\n                this.showbit(Math.idiv(num, 100) % 10, 3)\n                this._dat(0, 0x40) // '-'\n            }\n            else {\n                this.showbit(Math.idiv(num, 1000) % 10)\n                this.showbit(num % 10, 1)\n                this.showbit(Math.idiv(num, 10) % 10, 2)\n                this.showbit(Math.idiv(num, 100) % 10, 3)\n            }\n        }\n        /**\n         * show or hide dot point. \n         * @param bit is the position, eg: 1\n         * @param show is show/hide dp, eg: true\n         */\n        //% blockId=\"TM1637_showDP\" block=\"%display|DotPoint at %bit|show $show\"\n        //% show.shadow=\"toggleOnOff\"\n        //% subcategory=Display group=\"7-Seg 4-Dig LED Nixietube\" color=#EA5532\n        showDP(bit: number = 1, show: boolean = true) {\n            bit = Math.map(bit, 4, 1, 0, 3)\n            bit = bit % this.count\n            if (show) this._dat(bit, this.buf[bit] | 0x80)\n            else this._dat(bit, this.buf[bit] & 0x7F)\n        }\n        /**\n         * clear LED. \n         */\n        //% blockId=\"TM1637_clear\" block=\"clear display %display\"\n        //% subcategory=Display group=\"7-Seg 4-Dig LED Nixietube\" color=#EA5532\n        clear() {\n            for (let i = 0; i < this.count; i++) {\n                this._dat(i, 0)\n                this.buf[i] = 0\n            }\n        }\n    }\n    //% shim=sendBufferAsm\n    function sendBuffer(buf: Buffer, pin: DigitalPin) {\n    }\n    export class Strip {\n        buf: Buffer;\n        pin: DigitalPin;\n        // TODO: encode as bytes instead of 32bit\n        brightness: number;\n        start: number; // start offset in LED strip\n        _length: number; // number of LEDs\n        _mode: NeoPixelMode;\n        _matrixWidth: number; // number of leds in a matrix - if any\n\n        /**\n         * Shows all LEDs to a given color (range 0-255 for r, g, b).\n         * @param rgb RGB color of the LED\n         */\n        //% blockId=\"neopixel_set_strip_color\" block=\"%strip|show color %rgb=neopixel_colors\"\n        //% weight=85 color=#EA5532\n        //% parts=\"neopixel\" subcategory=Neopixel\n        showColor(rgb: number) {\n            rgb = rgb >> 0;\n            this.setAllRGB(rgb);\n            this.show();\n        }\n\n        /**\n         * Shows a rainbow pattern on all LEDs.\n         * @param startHue the start hue value for the rainbow, eg: 1\n         * @param endHue the end hue value for the rainbow, eg: 360\n         */\n        //% blockId=\"neopixel_set_strip_rainbow\" block=\"%strip|show rainbow from %startHue|to %endHue\"\n        //% weight=85 color=#EA5532\n        //% parts=\"neopixel\" subcategory=Neopixel\n        showRainbow(startHue: number = 1, endHue: number = 360) {\n            if (this._length <= 0) return;\n\n            startHue = startHue >> 0;\n            endHue = endHue >> 0;\n            const saturation = 100;\n            const luminance = 50;\n            const steps = this._length;\n            const direction = HueInterpolationDirection.Clockwise;\n\n            //hue\n            const h1 = startHue;\n            const h2 = endHue;\n            const hDistCW = ((h2 + 360) - h1) % 360;\n            const hStepCW = Math.idiv((hDistCW * 100), steps);\n            const hDistCCW = ((h1 + 360) - h2) % 360;\n            const hStepCCW = Math.idiv(-(hDistCCW * 100), steps);\n            let hStep: number;\n            if (direction === HueInterpolationDirection.Clockwise) {\n                hStep = hStepCW;\n            } else if (direction === HueInterpolationDirection.CounterClockwise) {\n                hStep = hStepCCW;\n            } else {\n                hStep = hDistCW < hDistCCW ? hStepCW : hStepCCW;\n            }\n            const h1_100 = h1 * 100; //we multiply by 100 so we keep more accurate results while doing interpolation\n\n            //sat\n            const s1 = saturation;\n            const s2 = saturation;\n            const sDist = s2 - s1;\n            const sStep = Math.idiv(sDist, steps);\n            const s1_100 = s1 * 100;\n\n            //lum\n            const l1 = luminance;\n            const l2 = luminance;\n            const lDist = l2 - l1;\n            const lStep = Math.idiv(lDist, steps);\n            const l1_100 = l1 * 100\n\n            //interpolate\n            if (steps === 1) {\n                this.setPixelColor(0, hsl(h1 + hStep, s1 + sStep, l1 + lStep))\n            } else {\n                this.setPixelColor(0, hsl(startHue, saturation, luminance));\n                for (let i = 1; i < steps - 1; i++) {\n                    const h = Math.idiv((h1_100 + i * hStep), 100) + 360;\n                    const s = Math.idiv((s1_100 + i * sStep), 100);\n                    const l = Math.idiv((l1_100 + i * lStep), 100);\n                    this.setPixelColor(i, hsl(h, s, l));\n                }\n                this.setPixelColor(steps - 1, hsl(endHue, saturation, luminance));\n            }\n            this.show();\n        }\n\n        /**\n         * Set LED to a given color (range 0-255 for r, g, b).\n         * You need to call ``show`` to make the changes visible.\n         * @param pixeloffset position of the NeoPixel in the strip\n         * @param rgb RGB color of the LED\n         */\n        //% blockId=\"neopixel_set_pixel_color\" block=\"%strip|set pixel color at %pixeloffset|to %rgb=neopixel_colors\"\n        //% weight=80 color=#EA5532\n        //% parts=\"neopixel\" subcategory=Neopixel\n        setPixelColor(pixeloffset: number, rgb: number): void {\n            this.setPixelRGB(pixeloffset >> 0, rgb >> 0);\n        }\n\n        /**\n         * Send all the changes to the strip.\n         */\n        //% blockId=\"neopixel_show\" block=\"%strip|show\" \n        //% weight=79\n        //% parts=\"neopixel\" subcategory=Neopixel\n        show() {\n            sendBuffer(this.buf, this.pin);\n        }\n\n        /**\n         * Turn off all LEDs.\n         * You need to call ``show`` to make the changes visible.\n         */\n        //% blockId=\"neopixel_clear\" block=\"%strip|clear\"\n        //% weight=76 color=#EA5532\n        //% parts=\"neopixel\" subcategory=Neopixel\n        clear(): void {\n            const stride = this._mode === NeoPixelMode.RGBW ? 4 : 3;\n            this.buf.fill(0, this.start * stride, this._length * stride);\n        }\n\n        /**\n         * Set the brightness of the strip. This flag only applies to future operation.\n         * @param brightness a measure of LED brightness in 0-255. eg: 255\n         */\n        //% blockId=\"neopixel_set_brightness\" block=\"%strip|set brightness %brightness\" \n        //% weight=59 color=#EA5532\n        //% parts=\"neopixel\" subcategory=Neopixel\n        setBrightness(brightness: number): void {\n            this.brightness = brightness & 0xff;\n        }\n\n        /**\n         * Create a range of LEDs.\n         * @param start offset in the LED strip to start the range\n         * @param length number of LEDs in the range. eg: 4\n         */\n        //% weight=89 color=#EA5532\n        //% blockId=\"neopixel_range\" block=\"%strip|range from %start|with %length|leds\"\n        //% parts=\"neopixel\"\n        //% blockSetVariable=range subcategory=Neopixel\n        range(start: number, length: number): Strip {\n            start = start >> 0;\n            length = length >> 0;\n            let strip = new Strip();\n            strip.buf = this.buf;\n            strip.pin = this.pin;\n            strip.brightness = this.brightness;\n            strip.start = this.start + Math.clamp(0, this._length - 1, start);\n            strip._length = Math.clamp(0, this._length - (strip.start - this.start), length);\n            strip._matrixWidth = 0;\n            strip._mode = this._mode;\n            return strip;\n        }\n\n        /**\n         * Shift LEDs forward and clear with zeros.\n         * You need to call ``show`` to make the changes visible.\n         * @param offset number of pixels to shift forward, eg: 1\n         */\n        //% blockId=\"neopixel_shift\" block=\"%strip|shift pixels by %offset\" \n        //% weight=40 color=#EA5532\n        //% parts=\"neopixel\" subcategory=Neopixel\n        shift(offset: number = 1): void {\n            offset = offset >> 0;\n            const stride = this._mode === NeoPixelMode.RGBW ? 4 : 3;\n            this.buf.shift(-offset * stride, this.start * stride, this._length * stride)\n        }\n\n        /**\n         * Rotate LEDs forward.\n         * You need to call ``show`` to make the changes visible.\n         * @param offset number of pixels to rotate forward, eg: 1\n         */\n        //% blockId=\"neopixel_rotate\" block=\"%strip|rotate pixels by %offset\" \n        //% weight=39 color=#EA5532\n        //% parts=\"neopixel\" subcategory=Neopixel\n        rotate(offset: number = 1): void {\n            offset = offset >> 0;\n            const stride = this._mode === NeoPixelMode.RGBW ? 4 : 3;\n            this.buf.rotate(-offset * stride, this.start * stride, this._length * stride)\n        }\n\n        /**\n         * Set the pin where the neopixel is connected, defaults to P0.\n         */\n        //% weight=10 color=#EA5532\n        //% parts=\"neopixel\" subcategory=Neopixel\n        setPin(pin: DigitalPin): void {\n            this.pin = pin;\n            pins.digitalWritePin(this.pin, 0);\n            // don't yield to avoid races on initialization\n        }\n\n        private setBufferRGB(offset: number, red: number, green: number, blue: number): void {\n            if (this._mode === NeoPixelMode.RGB_RGB) {\n                this.buf[offset + 0] = red;\n                this.buf[offset + 1] = green;\n            } else {\n                this.buf[offset + 0] = green;\n                this.buf[offset + 1] = red;\n            }\n            this.buf[offset + 2] = blue;\n        }\n\n        private setAllRGB(rgb: number) {\n            let red = unpackR(rgb);\n            let green = unpackG(rgb);\n            let blue = unpackB(rgb);\n\n            const br = this.brightness;\n            if (br < 255) {\n                red = (red * br) >> 8;\n                green = (green * br) >> 8;\n                blue = (blue * br) >> 8;\n            }\n            const end = this.start + this._length;\n            const stride = this._mode === NeoPixelMode.RGBW ? 4 : 3;\n            for (let i = this.start; i < end; ++i) {\n                this.setBufferRGB(i * stride, red, green, blue)\n            }\n        }\n        private setPixelRGB(pixeloffset: number, rgb: number): void {\n            if (pixeloffset < 0\n                || pixeloffset >= this._length)\n                return;\n\n            let stride = this._mode === NeoPixelMode.RGBW ? 4 : 3;\n            pixeloffset = (pixeloffset + this.start) * stride;\n\n            let red = unpackR(rgb);\n            let green = unpackG(rgb);\n            let blue = unpackB(rgb);\n\n            let br = this.brightness;\n            if (br < 255) {\n                red = (red * br) >> 8;\n                green = (green * br) >> 8;\n                blue = (blue * br) >> 8;\n            }\n            this.setBufferRGB(pixeloffset, red, green, blue)\n        }\n\n    }\n\n    /**\n     * Create a new NeoPixel driver for `numleds` LEDs.\n     * @param pin the pin where the neopixel is connected.\n     * @param numleds number of leds in the strip, eg: 24,30,60,64\n     */\n    //% blockId=\"neopixel_create\" block=\"NeoPixel at pin %Rjpin|with %numleds|leds as %mode\"\n    //% weight=90 color=#EA5532\n    //% parts=\"neopixel\"\n    //% trackArgs=0,2\n    //% blockSetVariable=strip subcategory=Neopixel\n    export function create(Rjpin: DigitalRJPin, numleds: number, mode: NeoPixelMode): Strip {\n        let pin = DigitalPin.P1\n        switch (Rjpin) {\n            case DigitalRJPin.J1:\n                pin = DigitalPin.P8\n                break;\n            case DigitalRJPin.J2:\n                pin = DigitalPin.P12\n                break;\n            case DigitalRJPin.J3:\n                pin = DigitalPin.P14\n                break;\n            case DigitalRJPin.J4:\n                pin = DigitalPin.P16\n                break;\n            case DigitalRJPin.P0:\n                pin = DigitalPin.P0\n                break;\n            case DigitalRJPin.P1:\n                pin = DigitalPin.P1\n                break;\n            case DigitalRJPin.P2:\n                pin = DigitalPin.P2\n                break;\n            case DigitalRJPin.P3:\n                pin = DigitalPin.P3\n                break;\n            case DigitalRJPin.P4:\n                pin = DigitalPin.P4\n                break;\n            case DigitalRJPin.P4:\n                pin = DigitalPin.P4\n                break;\n            case DigitalRJPin.P5:\n                pin = DigitalPin.P5\n                break;\n            case DigitalRJPin.P6:\n                pin = DigitalPin.P6\n                break;\n            case DigitalRJPin.P7:\n                pin = DigitalPin.P7\n                break;\n            case DigitalRJPin.P8:\n                pin = DigitalPin.P8\n                break;\n            case DigitalRJPin.P9:\n                pin = DigitalPin.P9\n                break;\n            case DigitalRJPin.P10:\n                pin = DigitalPin.P10\n                break;\n            case DigitalRJPin.P11:\n                pin = DigitalPin.P11\n                break;\n            case DigitalRJPin.P12:\n                pin = DigitalPin.P12\n                break;\n            case DigitalRJPin.P13:\n                pin = DigitalPin.P13\n                break;\n            case DigitalRJPin.P14:\n                pin = DigitalPin.P14\n                break;\n            case DigitalRJPin.P15:\n                pin = DigitalPin.P15\n                break;\n            case DigitalRJPin.P16:\n                pin = DigitalPin.P16\n                break;\n        }\n        let strip = new Strip();\n        let stride = mode === NeoPixelMode.RGBW ? 4 : 3;\n        strip.buf = pins.createBuffer(numleds * stride);\n        strip.start = 0;\n        strip._length = numleds;\n        strip._mode = mode;\n        strip._matrixWidth = 0;\n        strip.setBrightness(50)\n        strip.setPin(pin)\n        return strip;\n    }\n\n    /**\n     * Converts red, green, blue channels into a RGB color\n     * @param red value of the red channel between 0 and 255. eg: 255\n     * @param green value of the green channel between 0 and 255. eg: 255\n     * @param blue value of the blue channel between 0 and 255. eg: 255\n     */\n    //% weight=1 subcategory=Neopixel color=#EA5532\n    //% blockId=\"neopixel_rgb\" block=\"red %red|green %green|blue %blue\"\n    export function rgb(red: number, green: number, blue: number): number {\n        return packRGB(red, green, blue);\n    }\n\n    /**\n     * Gets the RGB value of a known color\n    */\n    //% weight=2 subcategory=Neopixel color=#EA5532\n    //% blockId=\"neopixel_colors\" block=\"%color\"\n    export function colors(color: NeoPixelColors): number {\n        return color;\n    }\n\n    function packRGB(a: number, b: number, c: number): number {\n        return ((a & 0xFF) << 16) | ((b & 0xFF) << 8) | (c & 0xFF);\n    }\n    function unpackR(rgb: number): number {\n        let r = (rgb >> 16) & 0xFF;\n        return r;\n    }\n    function unpackG(rgb: number): number {\n        let g = (rgb >> 8) & 0xFF;\n        return g;\n    }\n    function unpackB(rgb: number): number {\n        let b = (rgb) & 0xFF;\n        return b;\n    }\n\n    /**\n     * Converts a hue saturation luminosity value into a RGB color\n     * @param h hue from 0 to 360\n     * @param s saturation from 0 to 99\n     * @param l luminosity from 0 to 99\n     */\n    //% blockId=neopixelHSL block=\"hue %h|saturation %s|luminosity %l\" subcategory=Neopixel color=#EA5532\n    export function hsl(h: number, s: number, l: number): number {\n        h = Math.round(h);\n        s = Math.round(s);\n        l = Math.round(l);\n\n        h = h % 360;\n        s = Math.clamp(0, 99, s);\n        l = Math.clamp(0, 99, l);\n        let c = Math.idiv((((100 - Math.abs(2 * l - 100)) * s) << 8), 10000); //chroma, [0,255]\n        let h1 = Math.idiv(h, 60);//[0,6]\n        let h2 = Math.idiv((h - h1 * 60) * 256, 60);//[0,255]\n        let temp = Math.abs((((h1 % 2) << 8) + h2) - 256);\n        let x = (c * (256 - (temp))) >> 8;//[0,255], second largest component of this color\n        let r$:\n            number;\n        let g$:\n            number;\n        let b$:\n            number;\n        if (h1 == 0) {\n            r$ = c;\n            g$ = x;\n            b$ = 0;\n        }\n        else if (h1 == 1) {\n            r$ = x;\n            g$ = c;\n            b$ = 0;\n        }\n        else if (h1 == 2) {\n            r$ = 0;\n            g$ = c;\n            b$ = x;\n        }\n        else if (h1 == 3) {\n            r$ = 0;\n            g$ = x;\n            b$ = c;\n        }\n        else if (h1 == 4) {\n            r$ = x;\n            g$ = 0;\n            b$ = c;\n        }\n        else if (h1 == 5) {\n            r$ = c;\n            g$ = 0;\n            b$ = x;\n        }\n        let m = Math.idiv((Math.idiv((l * 2 << 8), 100) - c), 2);\n        let r = r$ + m;\n        let g = g$ + m;\n        let b = b$ + m;\n        return packRGB(r, g, b);\n    }\n\n    export enum HueInterpolationDirection {\n        Clockwise,\n        CounterClockwise,\n        Shortest\n    }\n}\n","planetxbasic.ts":"/**\n* Functions to PlanetX sensor by ELECFREAKS Co.,Ltd.\n*/\n//% color=#00B1ED  icon=\"\\uf005\" block=\"Connected\" blockId=\"PlanetX_Connected\"\n//% groups='[\"Digital\", \"Analog\", \"IIC Port\"]'\nnamespace Connected {\n    /////////////////////////// BME280 \n    let BME280_I2C_ADDR = 0x76\n    let dig_T1 = getUInt16LE(0x88)\n    let dig_T2 = getInt16LE(0x8A)\n    let dig_T3 = getInt16LE(0x8C)\n    let dig_P1 = getUInt16LE(0x8E)\n    let dig_P2 = getInt16LE(0x90)\n    let dig_P3 = getInt16LE(0x92)\n    let dig_P4 = getInt16LE(0x94)\n    let dig_P5 = getInt16LE(0x96)\n    let dig_P6 = getInt16LE(0x98)\n    let dig_P7 = getInt16LE(0x9A)\n    let dig_P8 = getInt16LE(0x9C)\n    let dig_P9 = getInt16LE(0x9E)\n    let dig_H1 = getreg(0xA1)\n    let dig_H2 = getInt16LE(0xE1)\n    let dig_H3 = getreg(0xE3)\n    let a = getreg(0xE5)\n    let dig_H4 = (getreg(0xE4) << 4) + (a % 16)\n    let dig_H5 = (getreg(0xE6) << 4) + (a >> 4)\n    let dig_H6 = getInt8LE(0xE7)\n    let T = 0\n    let P = 0\n    let H = 0\n    setreg(0xF2, 0x04)\n    setreg(0xF4, 0x2F)\n    setreg(0xF5, 0x0C)\n    setreg(0xF4, 0x2F)\n    function setreg(reg: number, dat: number): void {\n        let buf = pins.createBuffer(2);\n        buf[0] = reg;\n        buf[1] = dat;\n        pins.i2cWriteBuffer(BME280_I2C_ADDR, buf);\n    }\n    function getreg(reg: number): number {\n        pins.i2cWriteNumber(BME280_I2C_ADDR, reg, NumberFormat.UInt8BE);\n        return pins.i2cReadNumber(BME280_I2C_ADDR, NumberFormat.UInt8BE);\n    }\n    function getInt8LE(reg: number): number {\n        pins.i2cWriteNumber(BME280_I2C_ADDR, reg, NumberFormat.UInt8BE);\n        return pins.i2cReadNumber(BME280_I2C_ADDR, NumberFormat.Int8LE);\n    }\n    function getUInt16LE(reg: number): number {\n        pins.i2cWriteNumber(BME280_I2C_ADDR, reg, NumberFormat.UInt8BE);\n        return pins.i2cReadNumber(BME280_I2C_ADDR, NumberFormat.UInt16LE);\n    }\n    function getInt16LE(reg: number): number {\n        pins.i2cWriteNumber(BME280_I2C_ADDR, reg, NumberFormat.UInt8BE);\n        return pins.i2cReadNumber(BME280_I2C_ADDR, NumberFormat.Int16LE);\n    }\n    function getBme280Value(): void {\n        let adc_T = (getreg(0xFA) << 12) + (getreg(0xFB) << 4) + (getreg(0xFC) >> 4)\n        let var1 = (((adc_T >> 3) - (dig_T1 << 1)) * dig_T2) >> 11\n        let var2 = (((((adc_T >> 4) - dig_T1) * ((adc_T >> 4) - dig_T1)) >> 12) * dig_T3) >> 14\n        let t = var1 + var2\n        T = ((t * 5 + 128) >> 8) / 100\n        var1 = (t >> 1) - 64000\n        var2 = (((var1 >> 2) * (var1 >> 2)) >> 11) * dig_P6\n        var2 = var2 + ((var1 * dig_P5) << 1)\n        var2 = (var2 >> 2) + (dig_P4 << 16)\n        var1 = (((dig_P3 * ((var1 >> 2) * (var1 >> 2)) >> 13) >> 3) + (((dig_P2) * var1) >> 1)) >> 18\n        var1 = ((32768 + var1) * dig_P1) >> 15\n        if (var1 == 0)\n            return; // avoid exception caused by division by zero\n        let adc_P = (getreg(0xF7) << 12) + (getreg(0xF8) << 4) + (getreg(0xF9) >> 4)\n        let _p = ((1048576 - adc_P) - (var2 >> 12)) * 3125\n        _p = (_p / var1) * 2;\n        var1 = (dig_P9 * (((_p >> 3) * (_p >> 3)) >> 13)) >> 12\n        var2 = (((_p >> 2)) * dig_P8) >> 13\n        P = _p + ((var1 + var2 + dig_P7) >> 4)\n        let adc_H = (getreg(0xFD) << 8) + getreg(0xFE)\n        var1 = t - 76800\n        var2 = (((adc_H << 14) - (dig_H4 << 20) - (dig_H5 * var1)) + 16384) >> 15\n        var1 = var2 * (((((((var1 * dig_H6) >> 10) * (((var1 * dig_H3) >> 11) + 32768)) >> 10) + 2097152) * dig_H2 + 8192) >> 14)\n        var2 = var1 - (((((var1 >> 15) * (var1 >> 15)) >> 7) * dig_H1) >> 4)\n        if (var2 < 0) var2 = 0\n        if (var2 > 419430400) var2 = 419430400\n        H = (var2 >> 12) / 1024\n    }\n    ////////////////////////paj7620//////////////////////\n    let gesture_first_init = true\n    const initRegisterArray: number[] = [\n        0xEF, 0x00, 0x32, 0x29, 0x33, 0x01, 0x34, 0x00, 0x35, 0x01, 0x36, 0x00, 0x37, 0x07, 0x38, 0x17,\n        0x39, 0x06, 0x3A, 0x12, 0x3F, 0x00, 0x40, 0x02, 0x41, 0xFF, 0x42, 0x01, 0x46, 0x2D, 0x47, 0x0F,\n        0x48, 0x3C, 0x49, 0x00, 0x4A, 0x1E, 0x4B, 0x00, 0x4C, 0x20, 0x4D, 0x00, 0x4E, 0x1A, 0x4F, 0x14,\n        0x50, 0x00, 0x51, 0x10, 0x52, 0x00, 0x5C, 0x02, 0x5D, 0x00, 0x5E, 0x10, 0x5F, 0x3F, 0x60, 0x27,\n        0x61, 0x28, 0x62, 0x00, 0x63, 0x03, 0x64, 0xF7, 0x65, 0x03, 0x66, 0xD9, 0x67, 0x03, 0x68, 0x01,\n        0x69, 0xC8, 0x6A, 0x40, 0x6D, 0x04, 0x6E, 0x00, 0x6F, 0x00, 0x70, 0x80, 0x71, 0x00, 0x72, 0x00,\n        0x73, 0x00, 0x74, 0xF0, 0x75, 0x00, 0x80, 0x42, 0x81, 0x44, 0x82, 0x04, 0x83, 0x20, 0x84, 0x20,\n        0x85, 0x00, 0x86, 0x10, 0x87, 0x00, 0x88, 0x05, 0x89, 0x18, 0x8A, 0x10, 0x8B, 0x01, 0x8C, 0x37,\n        0x8D, 0x00, 0x8E, 0xF0, 0x8F, 0x81, 0x90, 0x06, 0x91, 0x06, 0x92, 0x1E, 0x93, 0x0D, 0x94, 0x0A,\n        0x95, 0x0A, 0x96, 0x0C, 0x97, 0x05, 0x98, 0x0A, 0x99, 0x41, 0x9A, 0x14, 0x9B, 0x0A, 0x9C, 0x3F,\n        0x9D, 0x33, 0x9E, 0xAE, 0x9F, 0xF9, 0xA0, 0x48, 0xA1, 0x13, 0xA2, 0x10, 0xA3, 0x08, 0xA4, 0x30,\n        0xA5, 0x19, 0xA6, 0x10, 0xA7, 0x08, 0xA8, 0x24, 0xA9, 0x04, 0xAA, 0x1E, 0xAB, 0x1E, 0xCC, 0x19,\n        0xCD, 0x0B, 0xCE, 0x13, 0xCF, 0x64, 0xD0, 0x21, 0xD1, 0x0F, 0xD2, 0x88, 0xE0, 0x01, 0xE1, 0x04,\n        0xE2, 0x41, 0xE3, 0xD6, 0xE4, 0x00, 0xE5, 0x0C, 0xE6, 0x0A, 0xE7, 0x00, 0xE8, 0x00, 0xE9, 0x00,\n        0xEE, 0x07, 0xEF, 0x01, 0x00, 0x1E, 0x01, 0x1E, 0x02, 0x0F, 0x03, 0x10, 0x04, 0x02, 0x05, 0x00,\n        0x06, 0xB0, 0x07, 0x04, 0x08, 0x0D, 0x09, 0x0E, 0x0A, 0x9C, 0x0B, 0x04, 0x0C, 0x05, 0x0D, 0x0F,\n        0x0E, 0x02, 0x0F, 0x12, 0x10, 0x02, 0x11, 0x02, 0x12, 0x00, 0x13, 0x01, 0x14, 0x05, 0x15, 0x07,\n        0x16, 0x05, 0x17, 0x07, 0x18, 0x01, 0x19, 0x04, 0x1A, 0x05, 0x1B, 0x0C, 0x1C, 0x2A, 0x1D, 0x01,\n        0x1E, 0x00, 0x21, 0x00, 0x22, 0x00, 0x23, 0x00, 0x25, 0x01, 0x26, 0x00, 0x27, 0x39, 0x28, 0x7F,\n        0x29, 0x08, 0x30, 0x03, 0x31, 0x00, 0x32, 0x1A, 0x33, 0x1A, 0x34, 0x07, 0x35, 0x07, 0x36, 0x01,\n        0x37, 0xFF, 0x38, 0x36, 0x39, 0x07, 0x3A, 0x00, 0x3E, 0xFF, 0x3F, 0x00, 0x40, 0x77, 0x41, 0x40,\n        0x42, 0x00, 0x43, 0x30, 0x44, 0xA0, 0x45, 0x5C, 0x46, 0x00, 0x47, 0x00, 0x48, 0x58, 0x4A, 0x1E,\n        0x4B, 0x1E, 0x4C, 0x00, 0x4D, 0x00, 0x4E, 0xA0, 0x4F, 0x80, 0x50, 0x00, 0x51, 0x00, 0x52, 0x00,\n        0x53, 0x00, 0x54, 0x00, 0x57, 0x80, 0x59, 0x10, 0x5A, 0x08, 0x5B, 0x94, 0x5C, 0xE8, 0x5D, 0x08,\n        0x5E, 0x3D, 0x5F, 0x99, 0x60, 0x45, 0x61, 0x40, 0x63, 0x2D, 0x64, 0x02, 0x65, 0x96, 0x66, 0x00,\n        0x67, 0x97, 0x68, 0x01, 0x69, 0xCD, 0x6A, 0x01, 0x6B, 0xB0, 0x6C, 0x04, 0x6D, 0x2C, 0x6E, 0x01,\n        0x6F, 0x32, 0x71, 0x00, 0x72, 0x01, 0x73, 0x35, 0x74, 0x00, 0x75, 0x33, 0x76, 0x31, 0x77, 0x01,\n        0x7C, 0x84, 0x7D, 0x03, 0x7E, 0x01\n    ];\n    ////////////////DHT20////////////////////////////////\n    let DHT20_Addr = 0x38\n    let DHT20WriteBuff = pins.createBuffer(3);\n    let DHT20ReadBuff = pins.createBuffer(6);\n    /////////////////////////color/////////////////////////\n    const APDS9960_ADDR = 0x39\n    const APDS9960_ENABLE = 0x80\n    const APDS9960_ATIME = 0x81\n    const APDS9960_CONTROL = 0x8F\n    const APDS9960_STATUS = 0x93\n    const APDS9960_CDATAL = 0x94\n    const APDS9960_CDATAH = 0x95\n    const APDS9960_RDATAL = 0x96\n    const APDS9960_RDATAH = 0x97\n    const APDS9960_GDATAL = 0x98\n    const APDS9960_GDATAH = 0x99\n    const APDS9960_BDATAL = 0x9A\n    const APDS9960_BDATAH = 0x9B\n    const APDS9960_GCONF4 = 0xAB\n    const APDS9960_AICLEAR = 0xE7\n    let color_first_init = false\n\n\n    function i2cwrite_color(addr: number, reg: number, value: number) {\n        let buf = pins.createBuffer(2)\n        buf[0] = reg\n        buf[1] = value\n        pins.i2cWriteBuffer(addr, buf)\n    }\n    function i2cread_color(addr: number, reg: number) {\n        pins.i2cWriteNumber(addr, reg, NumberFormat.UInt8BE);\n        let val = pins.i2cReadNumber(addr, NumberFormat.UInt8BE);\n        return val;\n    }\n    function rgb2hsl(color_r: number, color_g: number, color_b: number): number {\n        let Hue = 0\n        let R = color_r * 100 / 255;\n        let G = color_g * 100 / 255;\n        let B = color_b * 100 / 255;\n        let maxVal = Math.max(R, Math.max(G, B))\n        let minVal = Math.min(R, Math.min(G, B))\n        let Delta = maxVal - minVal;\n\n        if (Delta < 0) {\n            Hue = 0;\n        }\n        else if (maxVal == R && G >= B) {\n            Hue = (60 * ((G - B) * 100 / Delta)) / 100;\n        }\n        else if (maxVal == R && G < B) {\n            Hue = (60 * ((G - B) * 100 / Delta) + 360 * 100) / 100;\n        }\n        else if (maxVal == G) {\n            Hue = (60 * ((B - R) * 100 / Delta) + 120 * 100) / 100;\n        }\n        else if (maxVal == B) {\n            Hue = (60 * ((R - G) * 100 / Delta) + 240 * 100) / 100;\n        }\n        return Hue\n    }\n    function initModule(): void {\n        i2cwrite_color(APDS9960_ADDR, APDS9960_ATIME, 252)\n        i2cwrite_color(APDS9960_ADDR, APDS9960_CONTROL, 0x03)\n        i2cwrite_color(APDS9960_ADDR, APDS9960_ENABLE, 0x00)\n        i2cwrite_color(APDS9960_ADDR, APDS9960_GCONF4, 0x00)\n        i2cwrite_color(APDS9960_ADDR, APDS9960_AICLEAR, 0x00)\n        i2cwrite_color(APDS9960_ADDR, APDS9960_ENABLE, 0x01)\n        color_first_init = true\n    }\n    function colorMode(): void {\n        let tmp = i2cread_color(APDS9960_ADDR, APDS9960_ENABLE) | 0x2;\n        i2cwrite_color(APDS9960_ADDR, APDS9960_ENABLE, tmp);\n    }\n\n    ////////////////////////////////////////////real time clock\n    let DS1307_I2C_ADDR = 104;\n    let DS1307_REG_SECOND = 0\n    let DS1307_REG_MINUTE = 1\n    let DS1307_REG_HOUR = 2\n    let DS1307_REG_WEEKDAY = 3\n    let DS1307_REG_DAY = 4\n    let DS1307_REG_MONTH = 5\n    let DS1307_REG_YEAR = 6\n    let DS1307_REG_CTRL = 7\n    let DS1307_REG_RAM = 8\n    function rtc_setReg(reg: number, dat: number): void {\n        let buf = pins.createBuffer(2);\n        buf[0] = reg;\n        buf[1] = dat;\n        pins.i2cWriteBuffer(DS1307_I2C_ADDR, buf);\n    }\n    function rtc_getReg(reg: number): number {\n        pins.i2cWriteNumber(DS1307_I2C_ADDR, reg, NumberFormat.UInt8BE);\n        return pins.i2cReadNumber(DS1307_I2C_ADDR, NumberFormat.UInt8BE);\n    }\n    function HexToDec(dat: number): number {\n        return (dat >> 4) * 10 + (dat % 16);\n    }\n    function DecToHex(dat: number): number {\n        return Math.idiv(dat, 10) * 16 + (dat % 10)\n    }\n    export function start() {\n        let t = getSecond()\n        setSecond(t & 0x7f)\n    }\n    export function setSecond(dat: number): void {\n        rtc_setReg(DS1307_REG_SECOND, DecToHex(dat % 60))\n    }\n    export function getSecond(): number {\n        return Math.min(HexToDec(rtc_getReg(DS1307_REG_SECOND)), 59)\n    }\n    //////////////////////////////////////////////////////MLX90615\n    const MLX90615Addr = 0x5B\n    const humanbody_Addr = 0x27\n    const environment_Addr = 0x26\n\n    export enum targetList {\n        //% block=\"Human body\"\n        human_body,\n        //% block=\"Environment\"\n        environment\n    }\n\n    export enum UnitList {\n        //% block=\"℃\"\n        Centigrade,\n        //% block=\"℉\"\n        Fahrenheit\n    }\n    function readdata(reg: NumberFormat.UInt8BE): number {\n        pins.i2cWriteNumber(MLX90615Addr, reg, NumberFormat.UInt8BE, true);\n        let temp = pins.i2cReadNumber(MLX90615Addr, NumberFormat.UInt16LE);\n        temp *= .02\n        temp -= 273.15\n        return temp\n    }\n\n\n    ///////////////////////////////////////////////////////MP3\n    let Start_Byte = 0x7E\n    let Version_Byte = 0xFF\n    let Command_Length = 0x06\n    let End_Byte = 0xEF\n    let Acknowledge = 0x00\n    let CMD = 0x00\n    let para1 = 0x00\n    let para2 = 0x00\n    let highByte = 0x00\n    let lowByte = 0x00\n    let dataArr: number[] = [Start_Byte, Version_Byte, Command_Length, CMD, Acknowledge, para1, para2, highByte, lowByte, End_Byte]\n    /*\n    * Play status selection button list\n    */\n    export enum playType {\n        //% block=\"Play\"\n        Play = 0x0D,\n        //% block=\"Stop\"\n        Stop = 0x16,\n        //% block=\"PlayNext\"\n        PlayNext = 0x01,\n        //% block=\"PlayPrevious\"\n        PlayPrevious = 0x02,\n        //% block=\"Pause\"\n        Pause = 0x0E\n    }\n    function mp3_sendData(): void {\n        let myBuff = pins.createBuffer(10);\n        for (let i = 0; i < 10; i++) {\n            myBuff.setNumber(NumberFormat.UInt8BE, i, dataArr[i])\n        }\n        serial.writeBuffer(myBuff)\n        basic.pause(100)\n    }\n    function mp3_checkSum(): void {\n        let total = 0;\n        for (let i = 1; i < 7; i++) {\n            total += dataArr[i]\n        }\n        total = 65536 - total\n        lowByte = total & 0xFF;\n        highByte = total >> 8;\n        dataArr[7] = highByte\n        dataArr[8] = lowByte\n    }\n    ////////////////////////////////////////////////////////NFC\n    let NFC_I2C_ADDR = (0x48 >> 1);\n    let recvBuf = pins.createBuffer(32);\n    let recvAck = pins.createBuffer(8);\n    let ackBuf = pins.createBuffer(6);\n    let uId = pins.createBuffer(4);\n    let passwdBuf = pins.createBuffer(6);\n    let blockData = pins.createBuffer(16);\n    let NFC_ENABLE = 0;\n    const block_def = 1;\n    ackBuf[0] = 0x00;\n    ackBuf[1] = 0x00;\n    ackBuf[2] = 0xFF;\n    ackBuf[3] = 0x00;\n    ackBuf[4] = 0xFF;\n    ackBuf[5] = 0x00;\n    passwdBuf[0] = 0xFF;\n    passwdBuf[1] = 0xFF;\n    passwdBuf[2] = 0xFF;\n    passwdBuf[3] = 0xFF;\n    passwdBuf[4] = 0xFF;\n    passwdBuf[5] = 0xFF;\n    function writeAndReadBuf(buf: Buffer, len: number) {\n        pins.i2cWriteBuffer(NFC_I2C_ADDR, buf);\n        basic.pause(100);\n        recvAck = pins.i2cReadBuffer(NFC_I2C_ADDR, 8);\n        basic.pause(100);\n        recvBuf = pins.i2cReadBuffer(NFC_I2C_ADDR, len - 4);\n    }\n    function checkDcs(len: number): boolean {\n        let sum = 0, dcs = 0;\n        for (let i = 1; i < len - 2; i++) {\n            if ((i === 4) || (i === 5)) {\n                continue;\n            }\n            sum += recvBuf[i];\n        }\n        dcs = 0xFF - (sum & 0xFF);\n        if (dcs != recvBuf[len - 2]) {\n            return false;\n        }\n        return true;\n    }\n    function passwdCheck(id: Buffer, st: Buffer): boolean {\n        let buf: number[] = [];\n        buf = [0x00, 0x00, 0xFF, 0x0F, 0xF1, 0xD4, 0x40, 0x01, 0x60, 0x07, 0xFF,\n            0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xD1, 0xAA, 0x40, 0xEA, 0xC2, 0x00];\n        let cmdPassWord = pins.createBufferFromArray(buf);\n        let sum = 0, count = 0;\n        cmdPassWord[9] = block_def;\n        for (let i = 10; i < 16; i++)\n            cmdPassWord[i] = st[i - 10];\n        for (let i = 16; i < 20; i++)\n            cmdPassWord[i] = id[i - 16];\n        for (let i = 0; i < 20; i++) {\n            if (i === 3 || i === 4) {\n                continue;\n            }\n            sum += cmdPassWord[i];\n        }\n        cmdPassWord[20] = 0xff - (sum & 0xff)\n        writeAndReadBuf(cmdPassWord, 15);\n        for (let i = 0; i < 4; i++) {\n            if (recvAck[1 + i] != ackBuf[i]) {\n                serial.writeLine(\"psd ack ERROR!\");\n                return false;\n            }\n        }\n        if ((recvBuf[6] === 0xD5) && (recvBuf[7] === 0x41) && (recvBuf[8] === 0x00) && (checkDcs(15 - 4))) {\n            return true;\n        }\n        return false;\n    }\n    function wakeup() {\n        basic.pause(100);\n        let i = 0;\n        let buf: number[] = [];\n        buf = [0x00, 0x00, 0xFF, 0x05, 0xFB, 0xD4, 0x14, 0x01, 0x14, 0x01, 0x02, 0x00];\n        let cmdWake = pins.createBufferFromArray(buf);\n        writeAndReadBuf(cmdWake, 14);\n        for (i = 0; i < ackBuf.length; i++) {\n            if (recvAck[1 + i] != ackBuf[i]) {\n                break;\n            }\n        }\n        if ((i != ackBuf.length) || (recvBuf[6] != 0xD5) || (recvBuf[7] != 0x15) || (!checkDcs(14 - 4))) {\n            NFC_ENABLE = 0;\n        } else {\n            NFC_ENABLE = 1;\n        }\n        basic.pause(100);\n    }\n\n    function writeblock(data: Buffer): void {\n        if (!passwdCheck(uId, passwdBuf))\n            return;\n        let cmdWrite: number[] = [0x00, 0x00, 0xff, 0x15, 0xEB, 0xD4, 0x40, 0x01, 0xA0,\n            0x06, 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,\n            0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F, 0xCD,\n            0x00];\n        let sum = 0, count = 0;\n        cmdWrite[9] = block_def;\n        for (let i = 10; i < 26; i++)\n            cmdWrite[i] = data[i - 10];\n        for (let i = 0; i < 26; i++) {\n            if ((i === 3) || (i === 4)) {\n                continue;\n            }\n            sum += cmdWrite[i];\n        }\n        cmdWrite[26] = 0xff - (sum & 0xff);\n        let tempbuf = pins.createBufferFromArray(cmdWrite)\n        writeAndReadBuf(tempbuf, 16);\n    }\n\n    ///////////////////////////////////////////////////////RJpin_to_pin\n    function RJpin_to_analog(Rjpin: AnalogRJPin): any {\n        let pin = AnalogPin.P1\n        switch (Rjpin) {\n            case AnalogRJPin.J1:\n                pin = AnalogPin.P1\n                break;\n            case AnalogRJPin.J2:\n                pin = AnalogPin.P2\n                break;\n        }\n        return pin\n    }\n    function RJpin_to_digital(Rjpin: DigitalRJPin): any {\n        let pin = DigitalPin.P1\n        switch (Rjpin) {\n            case DigitalRJPin.J1:\n                pin = DigitalPin.P8\n                break;\n            case DigitalRJPin.J2:\n                pin = DigitalPin.P12\n                break;\n            case DigitalRJPin.J3:\n                pin = DigitalPin.P14\n                break;\n            case DigitalRJPin.J4:\n                pin = DigitalPin.P16\n                break;\n            case DigitalRJPin.J5:\n                pin = DigitalPin.P11\n                break;\n            case DigitalRJPin.P0:\n                pin = DigitalPin.P0\n                break;\n            case DigitalRJPin.P1:\n                pin = DigitalPin.P1\n                break;\n            case DigitalRJPin.P2:\n                pin = DigitalPin.P2\n                break;\n            case DigitalRJPin.P3:\n                pin = DigitalPin.P3\n                break;\n            case DigitalRJPin.P4:\n                pin = DigitalPin.P4\n                break;\n            case DigitalRJPin.P4:\n                pin = DigitalPin.P4\n                break;\n            case DigitalRJPin.P5:\n                pin = DigitalPin.P5\n                break;\n            case DigitalRJPin.P6:\n                pin = DigitalPin.P6\n                break;\n            case DigitalRJPin.P7:\n                pin = DigitalPin.P7\n                break;\n            case DigitalRJPin.P8:\n                pin = DigitalPin.P8\n                break;\n            case DigitalRJPin.P9:\n                pin = DigitalPin.P9\n                break;\n            case DigitalRJPin.P10:\n                pin = DigitalPin.P10\n                break;\n            case DigitalRJPin.P11:\n                pin = DigitalPin.P11\n                break;\n            case DigitalRJPin.P12:\n                pin = DigitalPin.P12\n                break;\n            case DigitalRJPin.P13:\n                pin = DigitalPin.P13\n                break;\n            case DigitalRJPin.P14:\n                pin = DigitalPin.P14\n                break;\n            case DigitalRJPin.P15:\n                pin = DigitalPin.P15\n                break;\n            case DigitalRJPin.P16:\n                pin = DigitalPin.P16\n                break;\n        }\n        return pin\n    }\n\n    //////////////////////////////////////////////////////////////TrackBit\n    let TrackBit_state_value: number = 0\n\n    ///////////////////////////////enum\n    export enum DigitalRJPin {\n        //% block=\"J1\"\n        J1,\n        //% block=\"J2\"\n        J2,\n        //% block=\"J3\"\n        J3,\n        //% block=\"J4\"\n        J4,\n        //% block=\"J5\"\n        J5,\n        //% block=\"P0\"\n        P0,        \n        //% block=\"P1\"\n        P1,\n        //% block=\"P2\"\n        P2,\n        //% block=\"P3\"\n        P3,\n        //% block=\"P4\"\n        P4,\n        //% block=\"P5\"\n        P5,\n        //% block=\"P6\"\n        P6,\n        //% block=\"P7\"\n        P7,\n        //% block=\"P8\"\n        P8,\n        //% block=\"P9\"\n        P9,\n        //% block=\"P10\"\n        P10,\n        //% block=\"P11\"\n        P11,\n        //% block=\"P12\"\n        P12,\n        //% block=\"P13\"\n        P13,\n        //% block=\"P14\"\n        P14,\n        //% block=\"P15\"\n        P15,\n        //% block=\"P16\"\n        P16,\n    }\n    export enum AnalogRJPin {\n        //% block=\"J1\"\n        J1,\n        //% block=\"J2\"\n        J2\n    }\n    export enum TrackingStateType {\n        //% block=\"● ●\" enumval=0\n        Tracking_State_0,\n\n        //% block=\"● ◌\" enumval=1\n        Tracking_State_1,\n\n        //% block=\"◌ ●\" enumval=2\n        Tracking_State_2,\n\n        //% block=\"◌ ◌\" enumval=3\n        Tracking_State_3\n    }\n    export enum TrackbitStateType {\n        //% block=\"◌ ◌ ◌ ◌\" \n        Tracking_State_0 = 0,\n        //% block=\"◌ ● ● ◌\" \n        Tracking_State_1 = 6,\n        //% block=\"◌ ◌ ● ◌\" \n        Tracking_State_2 = 4,\n        //% block=\"◌ ● ◌ ◌\" \n        Tracking_State_3 = 2,\n\n\n        //% block=\"● ◌ ◌ ●\" \n        Tracking_State_4 = 9,\n        //% block=\"● ● ● ●\" \n        Tracking_State_5 = 15,\n        //% block=\"● ◌ ● ●\" \n        Tracking_State_6 = 13,\n        //% block=\"● ● ◌ ●\" \n        Tracking_State_7 = 11,\n\n        //% block=\"● ◌ ◌ ◌\" \n        Tracking_State_8 = 1,\n        //% block=\"● ● ● ◌\" \n        Tracking_State_9 = 7,\n        //% block=\"● ◌ ● ◌\" \n        Tracking_State_10 = 5,\n        //% block=\"● ● ◌ ◌\" \n        Tracking_State_11 = 3,\n\n        //% block=\"◌ ◌ ◌ ●\" \n        Tracking_State_12 = 8,\n        //% block=\"◌ ● ● ●\" \n        Tracking_State_13 = 14,\n        //% block=\"◌ ◌ ● ●\" \n        Tracking_State_14 = 12,\n        //% block=\"◌ ● ◌ ●\" \n        Tracking_State_15 = 10\n    }\n    export enum TrackbitType {\n        //% block=\"◌\" \n        State_0 = 0,\n        //% block=\"●\" \n        State_1 = 1\n    }\n    export enum TrackbitChannel {\n        //% block=\"1\"\n        One = 0,\n        //% block=\"2\"\n        Two = 1,\n        //% block=\"3\"\n        Three = 2,\n        //% block=\"4\"\n        Four = 3\n    }\n    export enum TrackBit_gray {\n        //% block=\"line\"\n        One = 0,\n        //% block=\"background\"\n        Two = 4\n    }\n\n\n    export enum Distance_Unit_List {\n        //% block=\"cm\" \n        Distance_Unit_cm,\n\n        //% block=\"foot\"\n        Distance_Unit_foot,\n    }\n    export enum ButtonStateList {\n        //% block=\"C\"\n        C,\n        //% block=\"D\"\n        D,\n        //% block=\"C+D\"\n        CD\n    }\n    export enum RelayStateList {\n        //% block=\"NC|Close NO|Open\"\n        On,\n\n        //% block=\"NC|Open NO|Close\"\n        Off\n    }\n    export enum BME280_state {\n        //% block=\"temperature(℃)\"\n        BME280_temperature_C,\n\n        //% block=\"humidity(0~100)\"\n        BME280_humidity,\n\n        //% block=\"pressure(hPa)\"\n        BME280_pressure,\n\n        //% block=\"altitude(M)\"\n        BME280_altitude,\n    }\n    export enum DHT11_state {\n        //% block=\"temperature(℃)\" enumval=0\n        DHT11_temperature_C,\n\n        //% block=\"humidity(0~100)\" enumval=1\n        DHT11_humidity,\n    }\n    export enum DHT20_state {\n        //% block=\"temperature(℃)\" enumval=0\n        DHT20_temperature_C,\n\n        //% block=\"humidity(0~100)\" enumval=1\n        DHT20_humidity,\n    }\n\n    export enum GestureType {\n        //% block=\"None\"\n        None = 0,\n        //% block=\"Right\"\n        Right = 1,\n        //% block=\"Left\"\n        Left = 2,\n        //% block=\"Up\"\n        Up = 3,\n        //% block=\"Down\"\n        Down = 4,\n        //% block=\"Forward\"\n        Forward = 5,\n        //% block=\"Backward\"\n        Backward = 6,\n        //% block=\"Clockwise\"\n        Clockwise = 7,\n        //% block=\"Anticlockwise\"\n        Anticlockwise = 8,\n        //% block=\"Wave\"\n        Wave = 9\n    }\n    export enum ColorList {\n        //% block=\"Red\"\n        red,\n        //% block=\"Green\"\n        green,\n        //% block=\"Blue\"\n        blue,\n        //% block=\"Cyan\"\n        cyan,\n        //% block=\"Magenta\"\n        magenta,\n        //% block=\"Yellow\"\n        yellow,\n        //% block=\"White\"\n        white\n    }\n\n    export enum GasList {\n        //% block=\"Co\"\n        Co,\n        //% block=\"Co2\"\n        Co2,\n        //% block=\"Smoke\"\n        Smoke,\n        //% block=\"Alcohol\"\n        Alcohol\n    }\n    export enum DataUnit {\n        //% block=\"Year\"\n        Year,\n        //% block=\"Month\"\n        Month,\n        //% block=\"Day\"\n        Day,\n        //% block=\"Weekday\"\n        Weekday,\n        //% block=\"Hour\"\n        Hour,\n        //% block=\"Minute\"\n        Minute,\n        //% block=\"Second\"\n        Second\n    }\n\n    export enum joyvalEnum {\n        //% block=\"x\"\n        x,\n        //% block=\"y\"\n        y\n    }\n\n    export enum joykeyEnum {\n        //% block=\"pressed\"\n        pressed = 1,\n        //% block=\"unpressed\"\n        unpressed = 0\n    }\n\n    ///////////////////////////////////blocks/////////////////////////////\n    //% blockId=\"readnoise\" block=\"Noise sensor %Rjpin loudness(dB)\"\n    //% Rjpin.fieldEditor=\"gridpicker\"\n    //% Rjpin.fieldOptions.columns=2\n    //% subcategory=Sensor color=#E2C438 group=\"Analog\"\n    export function noiseSensor(Rjpin: AnalogRJPin): number {\n        let pin = AnalogPin.P1\n        pin = RJpin_to_analog(Rjpin)\n        let level = 0, voltage = 0, noise = 0, h = 0, l = 0, sumh = 0, suml = 0\n        for (let i = 0; i < 1000; i++) {\n            level = level + pins.analogReadPin(pin)\n        }\n        level = level / 1000\n        for (let i = 0; i < 1000; i++) {\n            voltage = pins.analogReadPin(pin)\n            if (voltage >= level) {\n                h += 1\n                sumh = sumh + voltage\n            } else {\n                l += 1\n                suml = suml + voltage\n            }\n        }\n        if (h == 0) {\n            sumh = level\n        } else {\n            sumh = sumh / h\n        }\n        if (l == 0) {\n            suml = level\n        } else {\n            suml = suml / l\n        }\n        noise = sumh - suml\n        if (noise <= 4) {\n            noise = pins.map(\n                noise,\n                0,\n                4,\n                30,\n                50\n            )\n        } else if (noise <= 8) {\n            noise = pins.map(\n                noise,\n                4,\n                8,\n                50,\n                55\n            )\n        } else if (noise <= 14) {\n            noise = pins.map(\n                noise,\n                9,\n                14,\n                55,\n                60\n            )\n        } else if (noise <= 32) {\n            noise = pins.map(\n                noise,\n                15,\n                32,\n                60,\n                70\n            )\n        } else if (noise <= 60) {\n            noise = pins.map(\n                noise,\n                33,\n                60,\n                70,\n                75\n            )\n        } else if (noise <= 100) {\n            noise = pins.map(\n                noise,\n                61,\n                100,\n                75,\n                80\n            )\n        } else if (noise <= 150) {\n            noise = pins.map(\n                noise,\n                101,\n                150,\n                80,\n                85\n            )\n        } else if (noise <= 231) {\n            noise = pins.map(\n                noise,\n                151,\n                231,\n                85,\n                90\n            )\n        } else {\n            noise = pins.map(\n                noise,\n                231,\n                1023,\n                90,\n                120\n            )\n        }\n        noise = Math.round(noise)\n        return Math.round(noise)\n    }\n    //% blockId=\"lightSensor\" block=\"Light sensor %Rjpin light intensity(lux)\"\n    //% Rjpin.fieldEditor=\"gridpicker\"\n    //% Rjpin.fieldOptions.columns=2\n    //% subcategory=Sensor color=#E2C438 group=\"Analog\"\n    export function lightSensor(Rjpin: AnalogRJPin): number {\n        let pin = AnalogPin.P1\n        pin = RJpin_to_analog(Rjpin)\n        let voltage = 0, lightintensity = 0;\n        for (let index = 0; index < 100; index++) {\n            voltage = voltage + pins.analogReadPin(pin)\n        }\n        voltage = voltage / 100\n        if (voltage < 200) {\n            voltage = Math.map(voltage, 0, 200, 0, 1600)\n        }\n        else {\n            voltage = Math.map(voltage, 200, 1023, 1600, 14000)\n        }\n        if (voltage < 0) {\n            voltage = 0\n        }\n        return Math.round(voltage)\n    }\n    //% blockId=\"readsoilmoisture\" block=\"Soil moisture sensor %Rjpin value(0~100)\"\n    //% Rjpin.fieldEditor=\"gridpicker\"\n    //% Rjpin.fieldOptions.columns=2\n    //% subcategory=Sensor color=#E2C438 group=\"Analog\"\n    export function soilHumidity(Rjpin: AnalogRJPin): number {\n        let voltage = 0, soilmoisture = 0;\n        let pin = AnalogPin.P1\n        pin = RJpin_to_analog(Rjpin)\n        voltage = pins.map(\n            pins.analogReadPin(pin),\n            0,\n            1023,\n            0,\n            100\n        );\n        soilmoisture = 100 - voltage;\n        return Math.round(soilmoisture);\n    }\n\n    //% blockId=\"readwaterLevel\" block=\"Water level sensor %Rjpin value(0~100)\"\n    //% Rjpin.fieldEditor=\"gridpicker\"\n    //% Rjpin.fieldOptions.columns=2\n    //% subcategory=Sensor color=#E2C438 group=\"Analog\"\n    export function waterLevel(Rjpin: AnalogRJPin): number {\n        let pin = AnalogPin.P1\n        pin = RJpin_to_analog(Rjpin)\n        let voltage = 0, waterlevel = 0;\n        voltage = pins.map(\n            pins.analogReadPin(pin),\n            50,\n            600,\n            0,\n            100\n        );\n        if (voltage < 0) {\n            voltage = 0\n        }\n        waterlevel = voltage;\n        return Math.round(waterlevel)\n    }\n\n    //% blockId=\"readUVLevel\" block=\"UV sensor %Rjpin level(0~15)\"\n    //% Rjpin.fieldEditor=\"gridpicker\"\n    //% Rjpin.fieldOptions.columns=2\n    //% subcategory=Sensor color=#E2C438 group=\"Analog\"\n    export function UVLevel(Rjpin: AnalogRJPin): number {\n        let pin = AnalogPin.P1\n        pin = RJpin_to_analog(Rjpin)\n        let UVlevel = pins.analogReadPin(pin);\n        if (UVlevel > 625) {\n            UVlevel = 625\n        }\n        UVlevel = pins.map(\n            UVlevel,\n            0,\n            625,\n            0,\n            15\n        );\n        return Math.round(UVlevel)\n    }\n    //% blockId=\"gasValue\" block=\"%sensor Gas sensor %Rjpin concentration value\"\n    //% Rjpin.fieldEditor=\"gridpicker\" Rjpin.fieldOptions.columns=2\n    //% sensor.fieldEditor=\"gridpicker\" sensor.fieldOptions.columns=2\n    //% subcategory=Sensor color=#E2C438 group=\"Analog\"\n    export function gasValue(sensor: GasList, Rjpin: AnalogRJPin): number {\n        let pin = AnalogPin.P1\n        pin = RJpin_to_analog(Rjpin)\n        if (sensor == GasList.Co2) {\n            return 1024 - pins.analogReadPin(pin)\n        }\n        return pins.analogReadPin(pin)\n    }\n\n    //% blockId=Crash block=\"Crash Sensor %Rjpin is pressed\"\n    //% Rjpin.fieldEditor=\"gridpicker\"\n    //% Rjpin.fieldOptions.columns=2\n    //% subcategory=Sensor group=\"Digital\" color=#EA5532 \n    export function Crash(Rjpin: DigitalRJPin): boolean {\n        let pin = DigitalPin.P1\n        pin = RJpin_to_digital(Rjpin)\n        pins.setPull(pin, PinPullMode.PullUp)\n        if (pins.digitalReadPin(pin) == 0) {\n            return true\n        }\n        else {\n            return false\n        }\n    }\n\n    let distance_last = 0\n\n    //% blockId=sonarbit block=\"Ultrasonic sensor %Rjpin distance %distance_unit\"\n    //% Rjpin.fieldEditor=\"gridpicker\"\n    //% Rjpin.fieldOptions.columns=2\n    //% distance_unit.fieldEditor=\"gridpicker\"\n    //% distance_unit.fieldOptions.columns=2\n    //% subcategory=Sensor group=\"Digital\" color=#EA5532\n    export function ultrasoundSensor(Rjpin: DigitalRJPin, distance_unit: Distance_Unit_List): number {\n        let pinT = DigitalPin.P3\n        let pinE = DigitalPin.P4\n        switch (Rjpin) {\n            case DigitalRJPin.J1:\n                pinT = DigitalPin.P8\n                pinE = DigitalPin.P9\n                break;\n            case DigitalRJPin.J2:\n                pinT = DigitalPin.P2\n                pinE = DigitalPin.P12\n                break;\n            case DigitalRJPin.J3:\n                pinT = DigitalPin.P13\n                pinE = DigitalPin.P14\n                break;\n            case DigitalRJPin.J4:\n                pinT = DigitalPin.P15\n                pinE = DigitalPin.P16\n                break;\n        }\n        pins.setPull(pinT, PinPullMode.PullNone)\n        pins.digitalWritePin(pinT, 0)\n        control.waitMicros(2)\n        pins.digitalWritePin(pinT, 1)\n        control.waitMicros(10)\n        pins.digitalWritePin(pinT, 0)\n\n        // read pulse\n        let d = pins.pulseIn(pinE, PulseValue.High, 25000)\n        let version = control.hardwareVersion()\n        let distance = d * 34 / 2 / 1000\n        if (version == \"1\") {\n            distance = distance * 3 / 2\n        }\n\n        if (distance > 430) {\n            distance = 0\n        }\n\n        if (distance == 0) {\n            distance = distance_last\n            distance_last = 0\n        }\n        else {\n            distance_last = distance\n        }\n\n        switch (distance_unit) {\n            case Distance_Unit_List.Distance_Unit_cm:\n                return Math.floor(distance)  //cm\n                break\n            case Distance_Unit_List.Distance_Unit_foot:\n                return Math.floor(distance / 30.48)   //foot\n                break\n            default:\n                return 0\n        }\n    }\n\n    //% blockId=\"PIR\" block=\"PIR sensor %Rjpin detects motion\"\n    //% Rjpin.fieldEditor=\"gridpicker\"\n    //% Rjpin.fieldOptions.columns=2\n    //% subcategory=Sensor group=\"Digital\"  color=#EA5532\n    export function PIR(Rjpin: DigitalRJPin): boolean {\n        let pin = DigitalPin.P1\n        pin = RJpin_to_digital(Rjpin)\n        if (pins.digitalReadPin(pin) == 1) {\n            return true\n        }\n        else {\n            return false\n        }\n    }\n\n    //% blockId=\"PM25\" block=\"PM2.5 sensor %Rjpin value (μg/m³)\"\n    //% Rjpin.fieldEditor=\"gridpicker\"\n    //% Rjpin.fieldOptions.columns=2\n    //% subcategory=Sensor group=\"Digital\" color=#EA5532\n    export function PM25(Rjpin: DigitalRJPin): number {\n        let pin = DigitalPin.P1\n        let pm25 = 0\n        pin = RJpin_to_digital(Rjpin)\n        while (pins.digitalReadPin(pin) != 0) {\n        }\n        while (pins.digitalReadPin(pin) != 1) {\n        }\n        pm25 = input.runningTime()\n        while (pins.digitalReadPin(pin) != 0) {\n        }\n        pm25 = input.runningTime() - pm25\n        return pm25\n    }\n\n    //% blockId=\"readdust\" block=\"Dust sensor %Rjpin value (μg/m³)\"\n    //% Rjpin.fieldEditor=\"gridpicker\"\n    //% Rjpin.fieldOptions.columns=2\n    //% subcategory=Sensor color=#E2C438 group=\"Analog\"\n    export function Dust(Rjpin: AnalogRJPin): number {\n        let voltage = 0\n        let dust = 0\n        let vo_pin = AnalogPin.P1\n        let vLED_pin = DigitalPin.P2\n        switch (Rjpin) {\n            case AnalogRJPin.J1:\n                vo_pin = AnalogPin.P1\n                vLED_pin = DigitalPin.P8\n                break;\n            case AnalogRJPin.J2:\n                vo_pin = AnalogPin.P2\n                vLED_pin = DigitalPin.P12\n                break;\n\n        }\n        pins.digitalWritePin(vLED_pin, 0);\n        control.waitMicros(160);\n        voltage = pins.analogReadPin(vo_pin);\n        control.waitMicros(100);\n        pins.digitalWritePin(vLED_pin, 1);\n        voltage = pins.map(\n            voltage,\n            0,\n            1023,\n            0,\n            3100 / 2 * 3\n        );\n        dust = (voltage - 380) * 5 / 29;\n        if (dust < 0) {\n            dust = 0\n        }\n        return Math.round(dust)\n\n    }\n\n    //% Rjpin.fieldEditor=\"gridpicker\"\n    //% Rjpin.fieldOptions.columns=2\n    //% subcategory=Sensor group=\"Digital\" color=#EA5532\n    //% blockId=tracking_sensor block=\"Line-tracking sensor %Rjpin is %state\"\n    export function trackingSensor(Rjpin: DigitalRJPin, state: TrackingStateType): boolean {\n        let lpin = DigitalPin.P1\n        let rpin = DigitalPin.P2\n        switch (Rjpin) {\n            case DigitalRJPin.J1:\n                lpin = DigitalPin.P1\n                rpin = DigitalPin.P8\n                break;\n            case DigitalRJPin.J2:\n                lpin = DigitalPin.P2\n                rpin = DigitalPin.P12\n                break;\n            case DigitalRJPin.J3:\n                lpin = DigitalPin.P13\n                rpin = DigitalPin.P14\n                break;\n            case DigitalRJPin.J4:\n                lpin = DigitalPin.P15\n                rpin = DigitalPin.P16\n                break;\n        }\n        pins.setPull(lpin, PinPullMode.PullUp)\n        pins.setPull(rpin, PinPullMode.PullUp)\n        let lsensor = pins.digitalReadPin(lpin)\n        let rsensor = pins.digitalReadPin(rpin)\n        if (lsensor == 0 && rsensor == 0 && state == TrackingStateType.Tracking_State_0) {\n            return true;\n        } else if (lsensor == 0 && rsensor == 1 && state == TrackingStateType.Tracking_State_1) {\n            return true;\n        } else if (lsensor == 1 && rsensor == 0 && state == TrackingStateType.Tracking_State_2) {\n            return true;\n        } else if (lsensor == 1 && rsensor == 1 && state == TrackingStateType.Tracking_State_3) {\n            return true;\n        } else return false;\n    }\n\n    /**\n    * Get gray value.The range is from 0 to 255.\n    */\n    //% channel.fieldEditor=\"gridpicker\" channel.fieldOptions.columns=4\n    //% subcategory=Sensor group=\"IIC Port\"\n    //% block=\"Trackbit channel %channel gray value\"\n    export function TrackbitgetGray(channel: TrackbitChannel): number {\n        pins.i2cWriteNumber(0x1a, channel, NumberFormat.Int8LE)\n        return pins.i2cReadNumber(0x1a, NumberFormat.UInt8LE, false)\n    }\n    //% State.fieldEditor=\"gridpicker\"\n    //% State.fieldOptions.columns=4\n    //% subcategory=Sensor group=\"IIC Port\"\n    //% block=\"Trackbit is %State\"\n    export function TrackbitState(State: TrackbitStateType): boolean {\n        return TrackBit_state_value == State\n    }\n    //% state.fieldEditor=\"gridpicker\" state.fieldOptions.columns=2\n    //% channel.fieldEditor=\"gridpicker\" channel.fieldOptions.columns=4\n    //% subcategory=Sensor group=\"IIC Port\"\n    //% block=\"Trackbit channel %channel is %state\"\n    export function TrackbitChannelState(channel: TrackbitChannel, state: TrackbitType): boolean {\n        let TempVal: number = 0\n        pins.i2cWriteNumber(0x1a, 4, NumberFormat.Int8LE)\n        TempVal = pins.i2cReadNumber(0x1a, NumberFormat.UInt8LE, false)\n        if (state == TrackbitType.State_1)\n            if (TempVal & 1 << channel) {\n                return true\n            }\n            else {\n                return false\n            }\n        else {\n            if (TempVal & 1 << channel) {\n                return false\n            }\n            else {\n                return true\n            }\n        }\n    }\n\n    //% deprecated=true\n    //% channel.fieldEditor=\"gridpicker\" channel.fieldOptions.columns=4\n    //% detect_target.fieldEditor=\"gridpicker\" detect_target.fieldOptions.columns=2\n    //% subcategory=Sensor group=\"IIC Port\"\n    //% block=\"Trackbit Init_Sensor_Val channel %channel detection target %detect_target value\"\n    export function Trackbit_Init_Sensor_Val(channel: TrackbitChannel, detect_target: TrackBit_gray): number {\n        let Init_Sensor_Val = pins.createBuffer(8)\n        pins.i2cWriteNumber(0x1a, 5, NumberFormat.Int8LE)\n        Init_Sensor_Val = pins.i2cReadBuffer(0x1a, 8)\n        return Init_Sensor_Val[channel + detect_target]\n    }\n\n\n    //% deprecated=true\n    //% val.min=0 val.max=255\n    //% subcategory=Sensor group=\"IIC Port\"\n    //% block=\"Set Trackbit learn fail value %val\"\n    export function Trackbit_learn_fail_value(val: number) {\n        pins.i2cWriteNumber(0x1a, 6, NumberFormat.Int8LE)\n        pins.i2cWriteNumber(0x1a, val, NumberFormat.Int8LE)\n    }\n\n    /**\n    * Gets the position offset.The range is from -3000 to 3000.\n    */\n    //% sensor_number.fieldEditor=\"gridpicker\" sensor_number.fieldOptions.columns=2\n    //% subcategory=Sensor group=\"IIC Port\"\n    //% block=\"Trackbit sensor offset value\"\n    export function TrackBit_get_offset(): number {\n        let offset: number\n        pins.i2cWriteNumber(0x1a, 5, NumberFormat.Int8LE)\n        const offsetH = pins.i2cReadNumber(0x1a, NumberFormat.UInt8LE, false)\n        pins.i2cWriteNumber(0x1a, 6, NumberFormat.Int8LE)\n        const offsetL = pins.i2cReadNumber(0x1a, NumberFormat.UInt8LE, false)\n        offset = (offsetH << 8) | offsetL\n        offset = Math.map(offset, 0, 6000, -3000, 3000)\n        return offset;\n    }\n\n    //% subcategory=Sensor group=\"IIC Port\"\n    //% block=\"Get a Trackbit state value\"\n    export function Trackbit_get_state_value() {\n        pins.i2cWriteNumber(0x1a, 4, NumberFormat.Int8LE)\n        TrackBit_state_value = pins.i2cReadNumber(0x1a, NumberFormat.UInt8LE, false)\n        basic.pause(5);\n    }\n\n    //% blockId=\"readdht11\" block=\"DHT11 sensor %Rjpin %dht11state value\"\n    //% Rjpin.fieldEditor=\"gridpicker\" dht11state.fieldEditor=\"gridpicker\"\n    //% Rjpin.fieldOptions.columns=2 dht11state.fieldOptions.columns=1\n    //% subcategory=Sensor group=\"Digital\" color=#EA5532\n    export function dht11Sensor(Rjpin: DigitalRJPin, dht11state: DHT11_state): number {\n        //initialize\n        basic.pause(1100)\n        let _temperature: number = -999.0\n        let _humidity: number = -999.0\n        let checksum: number = 0\n        let checksumTmp: number = 0\n        let dataArray: boolean[] = []\n        let resultArray: number[] = []\n        let pin = DigitalPin.P1\n        pin = RJpin_to_digital(Rjpin)\n        for (let index = 0; index < 40; index++) dataArray.push(false)\n        for (let index = 0; index < 5; index++) resultArray.push(0)\n\n        pins.setPull(pin, PinPullMode.PullUp)\n        pins.digitalWritePin(pin, 0) //begin protocol, pull down pin\n        basic.pause(18)\n        pins.digitalReadPin(pin) //pull up pin\n        control.waitMicros(40)\n        while (pins.digitalReadPin(pin) == 0); //sensor response\n        while (pins.digitalReadPin(pin) == 1); //sensor response\n\n        //read data (5 bytes)\n        for (let index = 0; index < 40; index++) {\n            while (pins.digitalReadPin(pin) == 1);\n            while (pins.digitalReadPin(pin) == 0);\n            control.waitMicros(28)\n            //if sensor still pull up data pin after 28 us it means 1, otherwise 0\n            if (pins.digitalReadPin(pin) == 1) dataArray[index] = true\n        }\n        //convert byte number array to integer\n        for (let index = 0; index < 5; index++)\n            for (let index2 = 0; index2 < 8; index2++)\n                if (dataArray[8 * index + index2]) resultArray[index] += 2 ** (7 - index2)\n        //verify checksum\n        checksumTmp = resultArray[0] + resultArray[1] + resultArray[2] + resultArray[3]\n        checksum = resultArray[4]\n        if (checksumTmp >= 512) checksumTmp -= 512\n        if (checksumTmp >= 256) checksumTmp -= 256\n        switch (dht11state) {\n            case DHT11_state.DHT11_temperature_C:\n                _temperature = resultArray[2] + resultArray[3] / 100\n                return _temperature\n            case DHT11_state.DHT11_humidity:\n                _humidity = resultArray[0] + resultArray[1] / 100\n                return _humidity\n        }\n        return 0\n    }\n    //% blockID=\"set_all_data\" block=\"RTC IIC port set %data | %num\"\n    //% subcategory=Sensor group=\"IIC Port\"\n    export function setData(data: DataUnit, num: number): void {\n        switch (data) {\n            case DataUnit.Year:\n                rtc_setReg(DS1307_REG_YEAR, DecToHex(num % 100));\n                break;\n            case DataUnit.Month:\n                rtc_setReg(DS1307_REG_MONTH, DecToHex(num % 13));\n                break;\n            case DataUnit.Day:\n                rtc_setReg(DS1307_REG_DAY, DecToHex(num % 32));\n                break;\n            case DataUnit.Weekday:\n                rtc_setReg(DS1307_REG_WEEKDAY, DecToHex(num % 8))\n                break;\n            case DataUnit.Hour:\n                rtc_setReg(DS1307_REG_HOUR, DecToHex(num % 24));\n                break;\n            case DataUnit.Minute:\n                rtc_setReg(DS1307_REG_MINUTE, DecToHex(num % 60));\n                break;\n            case DataUnit.Second:\n                rtc_setReg(DS1307_REG_SECOND, DecToHex(num % 60))\n                break;\n            default:\n                break;\n        }\n        start();\n    }\n    //% blockID=\"get_one_data\" block=\"RTC IIC port get %data\"\n    //% subcategory=Sensor group=\"IIC Port\"\n    export function readData(data: DataUnit): number {\n        switch (data) {\n            case DataUnit.Year:\n                return Math.min(HexToDec(rtc_getReg(DS1307_REG_YEAR)), 99) + 2000\n                break;\n            case DataUnit.Month:\n                return Math.max(Math.min(HexToDec(rtc_getReg(DS1307_REG_MONTH)), 12), 1)\n                break;\n            case DataUnit.Day:\n                return Math.max(Math.min(HexToDec(rtc_getReg(DS1307_REG_DAY)), 31), 1)\n                break;\n            case DataUnit.Weekday:\n                return Math.max(Math.min(HexToDec(rtc_getReg(DS1307_REG_WEEKDAY)), 7), 1)\n                break;\n            case DataUnit.Hour:\n                return Math.min(HexToDec(rtc_getReg(DS1307_REG_HOUR)), 23)\n                break;\n            case DataUnit.Minute:\n                return Math.min(HexToDec(rtc_getReg(DS1307_REG_MINUTE)), 59)\n                break;\n            case DataUnit.Second:\n                return Math.min(HexToDec(rtc_getReg(DS1307_REG_SECOND)), 59)\n                break;\n            default:\n                return 0\n\n        }\n    }\n    //% block=\"BME280 sensor IIC port value %state\"\n    //% state.fieldEditor=\"gridpicker\" state.fieldOptions.columns=1\n    //% subcategory=Sensor  group=\"IIC Port\"\n    export function bme280Sensor(state: BME280_state): number {\n        getBme280Value();\n        switch (state) {\n            case BME280_state.BME280_temperature_C:\n                return Math.round(T);\n                break;\n            case BME280_state.BME280_humidity:\n                return Math.round(H);\n                break;\n            case BME280_state.BME280_pressure:\n                return Math.round(P / 100);\n                break;\n            case BME280_state.BME280_altitude:\n                return Math.round(1022 - (P / 100)) * 9\n                break;\n            default:\n                return 0\n        }\n        return 0;\n    }\n    export class PAJ7620 {\n        private paj7620WriteReg(addr: number, cmd: number) {\n            let buf: Buffer = pins.createBuffer(2);\n            buf[0] = addr;\n            buf[1] = cmd;\n            pins.i2cWriteBuffer(0x73, buf, false);\n        }\n        private paj7620ReadReg(addr: number): number {\n            let buf: Buffer = pins.createBuffer(1);\n            buf[0] = addr;\n            pins.i2cWriteBuffer(0x73, buf, false);\n            buf = pins.i2cReadBuffer(0x73, 1, false);\n            return buf[0];\n        }\n        private paj7620SelectBank(bank: number) {\n            if (bank == 0) this.paj7620WriteReg(0xEF, 0);\n            else if (bank == 1) this.paj7620WriteReg(0xEF, 1);\n        }\n        private paj7620Init() {\n            let temp = 0;\n            this.paj7620SelectBank(0);\n            temp = this.paj7620ReadReg(0);\n            if (temp == 0x20) {\n                for (let i = 0; i < 438; i += 2) {\n                    this.paj7620WriteReg(initRegisterArray[i], initRegisterArray[i + 1]);\n                }\n            }\n            this.paj7620SelectBank(0);\n        }\n        init() {\n            this.paj7620Init();\n            basic.pause(200);\n        }\n        read(): number {\n            let data = 0, result = 0;\n            data = this.paj7620ReadReg(0x43);\n            switch (data) {\n                case 0x01:\n                    result = GestureType.Right;\n                    break;\n                case 0x02:\n                    result = GestureType.Left;\n                    break;\n                case 0x04:\n                    result = GestureType.Up;\n                    break;\n                case 0x08:\n                    result = GestureType.Down;\n                    break;\n                case 0x10:\n                    result = GestureType.Forward;\n                    break;\n                case 0x20:\n                    result = GestureType.Backward;\n                    break;\n                case 0x40:\n                    result = GestureType.Clockwise;\n                    break;\n                case 0x80:\n                    result = GestureType.Anticlockwise;\n                    break;\n                default:\n                    data = this.paj7620ReadReg(0x44);\n                    if (data == 0x01)\n                        result = GestureType.Wave;\n                    break;\n            }\n            return result;\n        }\n    }\n    const gestureEventId = 3100;\n    let lastGesture = GestureType.None;\n    let paj7620 = new PAJ7620();\n    //% blockId= gesture_create_event block=\"Gesture sensor IIC port is %gesture\"\n    //% gesture.fieldEditor=\"gridpicker\" gesture.fieldOptions.columns=3\n    //% subcategory=Sensor group=\"IIC Port\"\n    export function onGesture(gesture: GestureType, handler: () => void) {\n        control.onEvent(gestureEventId, gesture, handler);\n        if (gesture_first_init) {\n            paj7620.init();\n            gesture_first_init = false\n        }\n        control.inBackground(() => {\n            while (true) {\n                const gesture = paj7620.read();\n                if (gesture != lastGesture) {\n                    lastGesture = gesture;\n                    control.raiseEvent(gestureEventId, lastGesture);\n                }\n                basic.pause(200);\n            }\n        })\n    }\n\n    //% deprecated=true\n    //% subcategory=Sensor group=\"IIC Port\"\n    //% block=\"MLX90615 Infra Temp sensor IIC port %target Unit %Unit\"\n    export function MLX90615tempe(target: targetList, Unit: UnitList): number {\n        let retemp = 0\n        switch (target) {\n            case targetList.human_body:\n                retemp = readdata(humanbody_Addr) + 3;\n                if (Unit == 1) {\n                    retemp = retemp * 9 / 5 + 32\n                }\n                break;\n            case targetList.environment:\n                retemp = readdata(environment_Addr) - 5;\n                if (Unit == 1) {\n                    retemp = retemp * 9 / 5 + 32\n                }\n                break;\n            default:\n                retemp = 0;\n        }\n        return Math.round(retemp * 100) / 100\n    }\n    //% blockId=apds9960_readcolor block=\"Color sensor IIC port color HUE(0~360)\"\n    //% subcategory=Sensor group=\"IIC Port\"\n    export function readColor(): number {\n        if (color_first_init == false) {\n            initModule()\n            colorMode()\n        }\n        let tmp = i2cread_color(APDS9960_ADDR, APDS9960_STATUS) & 0x1;\n        while (!tmp) {\n            basic.pause(5);\n            tmp = i2cread_color(APDS9960_ADDR, APDS9960_STATUS) & 0x1;\n        }\n        let c = i2cread_color(APDS9960_ADDR, APDS9960_CDATAL) + i2cread_color(APDS9960_ADDR, APDS9960_CDATAH) * 256;\n        let r = i2cread_color(APDS9960_ADDR, APDS9960_RDATAL) + i2cread_color(APDS9960_ADDR, APDS9960_RDATAH) * 256;\n        let g = i2cread_color(APDS9960_ADDR, APDS9960_GDATAL) + i2cread_color(APDS9960_ADDR, APDS9960_GDATAH) * 256;\n        let b = i2cread_color(APDS9960_ADDR, APDS9960_BDATAL) + i2cread_color(APDS9960_ADDR, APDS9960_BDATAH) * 256;\n        // map to rgb based on clear channel\n        let avg = c / 3;\n        r = r * 255 / avg;\n        g = g * 255 / avg;\n        b = b * 255 / avg;\n        //let hue = rgb2hue(r, g, b);\n        let hue = rgb2hsl(r, g, b)\n        return hue\n    }\n    //% block=\"Color sensor IIC port detects %color\"\n    //% subcategory=Sensor group=\"IIC Port\"\n    //% color.fieldEditor=\"gridpicker\" color.fieldOptions.columns=3\n    export function checkColor(color: ColorList): boolean {\n        let hue = readColor()\n        switch (color) {\n            case ColorList.red:\n                if (hue > 330 || hue < 20) {\n                    return true\n                }\n                else {\n                    return false\n                }\n                break\n            case ColorList.green:\n                if (hue > 120 && 180 > hue) {\n                    return true\n                }\n                else {\n                    return false\n                }\n                break\n            case ColorList.blue:\n                if (hue > 210 && 270 > hue) {\n                    return true\n                }\n                else {\n                    return false\n                }\n                break\n            case ColorList.cyan:\n                if (hue > 190 && 210 > hue) {\n                    return true\n                }\n                else {\n                    return false\n                }\n                break\n            case ColorList.magenta:\n                if (hue > 260 && 330 > hue) {\n                    return true\n                }\n                else {\n                    return false\n                }\n                break\n            case ColorList.yellow:\n                if (hue > 30 && 120 > hue) {\n                    return true\n                }\n                else {\n                    return false\n                }\n                break\n            case ColorList.white:\n                if (hue >= 180 && 190 > hue) {\n                    return true\n                }\n                else {\n                    return false\n                }\n                break\n        }\n    }\n\n    //% block=\"RFID sensor IIC port read data from card\"\n    //% subcategory=Sensor group=\"IIC Port\"\n    export function readDataBlock(): string {\n        if (NFC_ENABLE === 0) {\n            wakeup();\n        }\n        if (checkCard() === false) {\n            serial.writeLine(\"No NFC Card!\")\n            return \"\"\n        }\n        if (!passwdCheck(uId, passwdBuf)) {\n            serial.writeLine(\"passwd error!\")\n            return \"\";\n        }\n        let cmdRead: number[] = []\n        cmdRead = [0x00, 0x00, 0xff, 0x05, 0xfb, 0xD4, 0x40, 0x01, 0x30, 0x07, 0xB4, 0x00];\n        let sum = 0, count = 0;\n        cmdRead[9] = block_def;\n        for (let i = 0; i < cmdRead.length - 2; i++) {\n            if ((i === 3) || (i === 4)) {\n                continue;\n            }\n            sum += cmdRead[i];\n        }\n        cmdRead[cmdRead.length - 2] = 0xff - sum & 0xff;\n        let buf = pins.createBufferFromArray(cmdRead)\n        writeAndReadBuf(buf, 31);\n        let ret = \"\";\n        if ((recvBuf[6] === 0xD5) && (recvBuf[7] === 0x41) && (recvBuf[8] === 0x00) && (checkDcs(31 - 4))) {\n            for (let i = 0; i < 16; i++) {\n                if (recvBuf[i + 9] >= 0x20 && recvBuf[i + 9] < 0x7f) {\n                    ret += String.fromCharCode(recvBuf[i + 9]) // valid ascii\n                }\n            }\n            return ret;\n        }\n        return \"\"\n    }\n    //% block=\"RFID sensor IIC port write %data to card\"\n    //% subcategory=Sensor group=\"IIC Port\"\n    export function writeData(data: string): void {\n        let len = data.length\n        if (len > 16) {\n            len = 16\n        }\n        for (let i = 0; i < len; i++) {\n            blockData[i] = data.charCodeAt(i)\n        }\n        writeblock(blockData);\n    }\n    //% block=\"RFID sensor IIC port Detect Card\"\n    //% subcategory=Sensor group=\"IIC Port\"\n    export function checkCard(): boolean {\n        if (NFC_ENABLE === 0) {\n            wakeup();\n        }\n        let buf: number[] = [];\n        buf = [0x00, 0x00, 0xFF, 0x04, 0xFC, 0xD4, 0x4A, 0x01, 0x00, 0xE1, 0x00];\n        let cmdUid = pins.createBufferFromArray(buf);\n        writeAndReadBuf(cmdUid, 24);\n        for (let i = 0; i < 4; i++) {\n            if (recvAck[1 + i] != ackBuf[i]) {\n                return false;\n            }\n        }\n        if ((recvBuf[6] != 0xD5) || (!checkDcs(24 - 4))) {\n            return false;\n        }\n        for (let i = 0; i < uId.length; i++) {\n            uId[i] = recvBuf[14 + i];\n        }\n        if (uId[0] === uId[1] && uId[1] === uId[2] && uId[2] === uId[3] && uId[3] === 0xFF) {\n            return false;\n        }\n        return true;\n    }\n\n    //% deprecated=true\n    //% blockId=\"readdht20\" block=\"DHT20 sensor %dht20state value\"\n    //% dht20state.fieldEditor=\"gridpicker\"\n    //% dht20state.fieldOptions.columns=1\n    //% subcategory=Sensor group=\"IIC Port\"\n    export function dht20Sensor(dht20state: DHT20_state): number {\n        let temp, temp1, rawData = 0;\n        let temperature, humidity = 0;\n        DHT20WriteBuff[0] = 0xAC;\n        DHT20WriteBuff[1] = 0x33;\n        DHT20WriteBuff[2] = 0x00;\n        pins.i2cWriteBuffer(DHT20_Addr, DHT20WriteBuff);\n        basic.pause(80)\n        DHT20ReadBuff = pins.i2cReadBuffer(DHT20_Addr, 6)\n\n        rawData = 0;\n        if (dht20state == DHT20_state.DHT20_temperature_C) {\n            temp = DHT20ReadBuff[3] & 0xff;\n            temp1 = DHT20ReadBuff[4] & 0xff;\n            rawData = ((temp & 0xf) << 16) + (temp1 << 8) + (DHT20ReadBuff[5]);\n            temperature = rawData / 5242 - 50;\n            temperature = temperature * 100\n            return Math.round(temperature) / 100;\n        }\n        else {\n            temp = DHT20ReadBuff[1] & 0xff;\n            temp1 = DHT20ReadBuff[2] & 0xff;\n            rawData = (temp << 12) + (temp1 << 4) + ((DHT20ReadBuff[3] & 0xf0) >> 4);\n            humidity = rawData / 0x100000;\n            humidity = humidity * 10000\n            return Math.round(humidity) / 100;\n        }\n    }\n\n    //% deprecated=true\n    //% block=\"joystick sensor %state value\"\n    //% state.fieldEditor=\"gridpicker\"\n    //% state.fieldOptions.columns=2\n    //% subcategory=Sensor group=\"IIC Port\"\n    export function joystickval(state: joyvalEnum): number {\n        let buff = pins.createBuffer(3)\n        let x_val, y_val\n        buff = pins.i2cReadBuffer(0xaa, 3)\n        if (state == joyvalEnum.x) {\n            x_val = buff[0] * 4 - 512\n            if (x_val > -10 && x_val < 10) {\n                x_val = 0\n            }\n            return x_val\n        }\n        else {\n            y_val = buff[1] * 4 - 512\n            if (y_val > -10 && y_val < 10) {\n                y_val = 0\n            }\n            return y_val\n        }\n        return 0\n    }\n\n    //% deprecated=true\n    //% block=\"joystick sensor %key key\"\n    //% key.fieldEditor=\"gridpicker\"\n    //% key.fieldOptions.columns=2\n    //% subcategory=Sensor group=\"IIC Port\"\n    export function joystickkey(key: joykeyEnum): boolean {\n        let buff = pins.createBuffer(3)\n        buff = pins.i2cReadBuffer(0xaa, 3)\n        return key == buff[2]\n    }\n\n    //% blockId=\"potentiometer\" block=\"Trimpot %Rjpin analog value\"\n    //% Rjpin.fieldEditor=\"gridpicker\"\n    //% Rjpin.fieldOptions.columns=2\n    //% subcategory=Input color=#E2C438 group=\"Analog\"\n    export function trimpot(Rjpin: AnalogRJPin): number {\n        let pin = AnalogPin.P1\n        pin = RJpin_to_analog(Rjpin)\n        return pins.analogReadPin(pin)\n    }\n    //% blockId=buttonab block=\"Button %Rjpin %button is pressed\"\n    //% Rjpin.fieldEditor=\"gridpicker\"\n    //% Rjpin.fieldOptions.columns=2\n    //% button.fieldEditor=\"gridpicker\"\n    //% button.fieldOptions.columns=1\n    //% subcategory=Input group=\"Digital\" color=#EA5532\n    export function buttonCD(Rjpin: DigitalRJPin, button: ButtonStateList): boolean {\n        let pinC = DigitalPin.P1\n        let pinD = DigitalPin.P2\n        switch (Rjpin) {\n            case DigitalRJPin.J1:\n                pinC = DigitalPin.P1\n                pinD = DigitalPin.P8\n                break;\n            case DigitalRJPin.J2:\n                pinC = DigitalPin.P2\n                pinD = DigitalPin.P12\n                break;\n            case DigitalRJPin.J3:\n                pinC = DigitalPin.P13\n                pinD = DigitalPin.P14\n                break;\n            case DigitalRJPin.J4:\n                pinC = DigitalPin.P15\n                pinD = DigitalPin.P16\n                break;\n            case DigitalRJPin.P3:\n                pinC = DigitalPin.P3\n                pinD = DigitalPin.P4\n                break;\n        }\n        pins.setPull(pinC, PinPullMode.PullUp)\n        pins.setPull(pinD, PinPullMode.PullUp)\n        if (pins.digitalReadPin(pinD) == 0 && pins.digitalReadPin(pinC) == 0 && button == ButtonStateList.CD) {\n            return true\n        }\n        else if (pins.digitalReadPin(pinC) == 0 && pins.digitalReadPin(pinD) == 1 && button == ButtonStateList.C) {\n            return true\n        }\n        else if (pins.digitalReadPin(pinD) == 0 && pins.digitalReadPin(pinC) == 1 && button == ButtonStateList.D) {\n            return true\n        }\n        else {\n            return false\n        }\n    }\n\n    export enum ButtonState {\n        //% block=\"on\"\n        on = 1,\n        //% block=\"off\"\n        off = 2\n    }\n\n    const buttonEventSource = 5000\n    const buttonEventValue = {\n        CD_pressed: ButtonState.on,\n        CD_unpressed: ButtonState.off\n    }\n\n    //% block=\"on button %Rjpin %button pressed\"\n    //% Rjpin.fieldEditor=\"gridpicker\"\n    //% Rjpin.fieldOptions.columns=4\n    //% button.fieldEditor=\"gridpicker\"\n    //% button.fieldOptions.columns=1\n    //% subcategory=Input group=\"Digital\" color=#EA5532\n    export function buttonEvent(Rjpin: DigitalRJPin, button: ButtonStateList, handler: () => void) {\n        let ButtonPin_C = DigitalPin.P1\n        let ButtonPin_D = DigitalPin.P2\n        let pinEventSource_C = EventBusSource.MICROBIT_ID_IO_P0\n        let pinEventSource_D = EventBusSource.MICROBIT_ID_IO_P1\n        switch (Rjpin) {\n            case DigitalRJPin.J1:\n                ButtonPin_C = DigitalPin.P1\n                ButtonPin_D = DigitalPin.P8\n                pinEventSource_C = EventBusSource.MICROBIT_ID_IO_P1\n                pinEventSource_D = EventBusSource.MICROBIT_ID_IO_P8\n                break;\n            case DigitalRJPin.J2:\n                ButtonPin_C = DigitalPin.P2\n                ButtonPin_D = DigitalPin.P12\n                pinEventSource_C = EventBusSource.MICROBIT_ID_IO_P2\n                pinEventSource_D = EventBusSource.MICROBIT_ID_IO_P12\n                break;\n            case DigitalRJPin.J3:\n                ButtonPin_C = DigitalPin.P13\n                ButtonPin_D = DigitalPin.P14\n                pinEventSource_C = EventBusSource.MICROBIT_ID_IO_P13\n                pinEventSource_D = EventBusSource.MICROBIT_ID_IO_P14\n                break;\n            case DigitalRJPin.J4:\n                ButtonPin_C = DigitalPin.P15\n                ButtonPin_D = DigitalPin.P16\n                pinEventSource_C = EventBusSource.MICROBIT_ID_IO_P15\n                pinEventSource_D = EventBusSource.MICROBIT_ID_IO_P16\n                break;\n            case DigitalRJPin.P3:\n                ButtonPin_C = DigitalPin.P3\n                ButtonPin_D = DigitalPin.P4\n                pinEventSource_C = EventBusSource.MICROBIT_ID_IO_P3\n                pinEventSource_D = EventBusSource.MICROBIT_ID_IO_P4\n                break;\n        }\n        if (button == ButtonStateList.C) {\n            pins.setPull(ButtonPin_C, PinPullMode.PullUp)\n            pins.setEvents(ButtonPin_C, PinEventType.Edge)\n            control.onEvent(pinEventSource_C, EventBusValue.MICROBIT_PIN_EVT_RISE, handler)\n        }\n        else if (button == ButtonStateList.D) {\n            pins.setPull(ButtonPin_D, PinPullMode.PullUp)\n            pins.setEvents(ButtonPin_D, PinEventType.Edge)\n            control.onEvent(pinEventSource_D, EventBusValue.MICROBIT_PIN_EVT_RISE, handler)\n        }\n        else if (button == ButtonStateList.CD) {\n            loops.everyInterval(50, function () {\n                if (pins.digitalReadPin(ButtonPin_C) == 0 && pins.digitalReadPin(ButtonPin_D) == 0) {\n                    control.raiseEvent(buttonEventSource, buttonEventValue.CD_pressed)\n                }\n            })\n            control.onEvent(buttonEventSource, buttonEventValue.CD_pressed, handler)\n        }\n    }\n\n    //% blockId=fans block=\"Motor fan %Rjpin toggle to $fanstate || speed %speed \\\\%\"\n    //% Rjpin.fieldEditor=\"gridpicker\"\n    //% Rjpin.fieldOptions.columns=2\n    //% fanstate.shadow=\"toggleOnOff\"\n    //% subcategory=Excute group=\"Digital\" color=#EA5532\n    //% speed.min=0 speed.max=100\n    //% expandableArgumentMode=\"toggle\"\n    export function motorFan(Rjpin: DigitalRJPin, fanstate: boolean, speed: number = 100): void {\n        let pin = AnalogPin.P1\n        switch (Rjpin) {\n            case DigitalRJPin.J1:\n                pin = AnalogPin.P1\n                break;\n            case DigitalRJPin.J2:\n                pin = AnalogPin.P2\n                break;\n            case DigitalRJPin.J3:\n                pin = AnalogPin.P13\n                break;\n            case DigitalRJPin.J4:\n                pin = AnalogPin.P15\n                break;\n        }\n        if (fanstate) {\n            pins.analogSetPeriod(pin, 100)\n            pins.analogWritePin(pin, Math.map(speed, 0, 100, 0, 1023))\n        }\n        else {\n            pins.analogWritePin(pin, 0)\n            speed = 0\n        }\n    }\n\n    //% blockId=laserSensor block=\"Laser %Rjpin toggle to $laserstate\"\n    //% Rjpin.fieldEditor=\"gridpicker\"\n    //% Rjpin.fieldOptions.columns=2\n    //% laserstate.shadow=\"toggleOnOff\"\n    //% subcategory=Excute group=\"Digital\" color=#EA5532\n    export function laserSensor(Rjpin: DigitalRJPin, laserstate: boolean): void {\n        let pin = DigitalPin.P1\n        pin = RJpin_to_digital(Rjpin)\n        if (laserstate) {\n            pins.digitalWritePin(pin, 1)\n        }\n        else {\n            pins.digitalWritePin(pin, 0)\n        }\n    }\n\n    //% deprecated=true\n    //% blockId=Relay block=\"Relay %Rjpin toggle to %Relaystate\"\n    //% Rjpin.fieldEditor=\"gridpicker\"\n    //% Rjpin.fieldOptions.columns=2\n    //% Relaystate.fieldEditor=\"gridpicker\"\n    //% Relaystate.fieldOptions.columns=1\n    //% subcategory=Excute group=\"Digital\" color=#EA5532\n    export function Relay(Rjpin: DigitalRJPin, Relaystate: RelayStateList): void {\n        let pin = DigitalPin.P1\n        pin = RJpin_to_digital(Rjpin)\n        switch (Relaystate) {\n            case RelayStateList.On:\n                pins.digitalWritePin(pin, 0)\n                break;\n            case RelayStateList.Off:\n                pins.digitalWritePin(pin, 1)\n                break;\n        }\n    }\n\n    //% blockId=\"setLoopFolder\" block=\"loop play all the MP3s in the folder:$folderNum\"\n    //% folderNum.defl=\"01\"\n    //% subcategory=Excute group=\"MP3\" color=#EA5532\n    export function setLoopFolder(folderNum: string): void {\n        CMD = 0x17\n        para1 = 0\n        para2 = parseInt(folderNum)\n        dataArr[3] = CMD\n        dataArr[5] = para1\n        dataArr[6] = para2\n        mp3_checkSum()\n        mp3_sendData()\n    }\n\n    //% blockId=\"folderPlay\" \n    //% block=\"play the mp3 in the folder:$folderNum filename:$fileNum || repeatList: $myAns\"\n    //% folderNum.defl=\"01\" fileNum.defl=\"001\"\n    //% myAns.shadow=\"toggleYesNo\"\n    //% expandableArgumentMode=\"toggle\"\n    //% subcategory=Excute group=\"MP3\" color=#EA5532\n    export function folderPlay(folderNum: string, fileNum: string, myAns: boolean = false): void {\n        CMD = 0x0F\n        para1 = parseInt(folderNum)\n        para2 = parseInt(fileNum)\n        dataArr[3] = CMD\n        dataArr[5] = para1\n        dataArr[6] = para2\n        mp3_checkSum()\n        mp3_sendData()\n        if (myAns)\n            execute(0x19)\n    }\n\n    //% blockId=\"playFolderFilePort\" \n    //% block=\"play the mp3 in the folder:$folderNum filename:$fileNum usingPin:$Rjpin\"\n    //% fileNum.defl=\"01\" folderNum.defl=\"01\"\n    //% Rjpin.fieldEditor=\"gridpicker\"\n    //% subcategory=Excute group=\"MP3\" color=#EA5532\n    export function playFolderFilePort(folderNum: string, fileNum: string, Rjpin: DigitalRJPin): void {\n        let pin = SerialPin.USB_TX\n        switch (Rjpin) {\n            case DigitalRJPin.J1:\n                pin = SerialPin.P8\n                break;\n            case DigitalRJPin.J2:\n                pin = SerialPin.P12\n                break;\n            case DigitalRJPin.J3:\n                pin = SerialPin.P14\n                break;\n            case DigitalRJPin.J4:\n                pin = SerialPin.P16\n                break;\n            case DigitalRJPin.P0:\n                pin = SerialPin.P0\n                break;\n            case DigitalRJPin.P16:\n                pin = SerialPin.P16\n                break;\n        }\n        serial.redirect(\n            pin,\n            SerialPin.USB_RX,\n            BaudRate.BaudRate9600\n        )\n        CMD = 15\n        para1 = parseInt(folderNum)\n        para2 = parseInt(fileNum)\n        dataArr[3] = CMD\n        dataArr[5] = para1\n        dataArr[6] = para2\n        mp3_checkSum()\n        mp3_sendDataFast()\n    }\n\n    //% blockId=\"playFolderFileVolumePort\" \n    //% block=\"play the mp3 in the folder:$folderNum filename:$fileNum with volume:$theVolume usingPin:$Rjpin\"\n    //% fileNum.defl=\"01\" theVolume.defl=\"10\" folderNum.defl=\"01\"\n    //% Rjpin.fieldEditor=\"gridpicker\"\n    //% subcategory=Excute group=\"MP3\" color=#EA5532\n    export function playFolderFileVolumePort(folderNum: string, fileNum: string, theVolume: string, Rjpin: DigitalRJPin): void {\n        \n        let pin = SerialPin.USB_TX\n        switch (Rjpin) {\n            case DigitalRJPin.J1:\n                pin = SerialPin.P8\n                break;\n            case DigitalRJPin.J2:\n                pin = SerialPin.P12\n                break;\n            case DigitalRJPin.J3:\n                pin = SerialPin.P14\n                break;\n            case DigitalRJPin.J4:\n                pin = SerialPin.P16\n                break;\n            case DigitalRJPin.P0:\n                pin = SerialPin.P0\n                break;\n            case DigitalRJPin.P16:\n                pin = SerialPin.P16\n                break;\n        }\n        serial.redirect(\n            pin,\n            SerialPin.USB_RX,\n            BaudRate.BaudRate9600\n        )\n        \n        let volume = parseInt(theVolume)\n        if (volume > 25) {\n            volume = 25\n        }\n        CMD = 6\n        para1 = 0\n        para2 = volume\n        dataArr[3] = CMD\n        dataArr[5] = para1\n        dataArr[6] = para2\n        mp3_checkSum()\n        mp3_sendDataFast()\n        basic.pause(200)\n\n        CMD = 15\n        para1 = parseInt(folderNum)\n        para2 = parseInt(fileNum)\n        dataArr[3] = CMD\n        dataArr[5] = para1\n        dataArr[6] = para2\n        mp3_checkSum()\n        mp3_sendDataFast()\n\n\n    }\n\n    //% blockId=\"volumePort\" \n    //% block=\"set MP3 volume:$theVolume usingPin:$Rjpin\"\n    //% theVolume.defl=\"10\"\n    //% Rjpin.fieldEditor=\"gridpicker\"\n    //% subcategory=Excute group=\"MP3\" color=#EA5532\n    export function volumePort(theVolume: string, Rjpin: DigitalRJPin): void {\n        let pin = SerialPin.USB_TX\n        switch (Rjpin) {\n            case DigitalRJPin.J1:\n                pin = SerialPin.P8\n                break;\n            case DigitalRJPin.J2:\n                pin = SerialPin.P12\n                break;\n            case DigitalRJPin.J3:\n                pin = SerialPin.P14\n                break;\n            case DigitalRJPin.J4:\n                pin = SerialPin.P16\n                break;\n            case DigitalRJPin.P0:\n                pin = SerialPin.P0\n                break;\n            case DigitalRJPin.P16:\n                pin = SerialPin.P16\n                break;\n        }\n        serial.redirect(\n            pin,\n            SerialPin.USB_RX,\n            BaudRate.BaudRate9600\n        )\n        let volume = parseInt(theVolume)\n        if (volume > 30) {\n            volume = 30\n        }\n        CMD = 6\n        para1 = 0\n        para2 = volume\n        dataArr[3] = CMD\n        dataArr[5] = para1\n        dataArr[6] = para2\n        mp3_checkSum()\n        mp3_sendDataFast()\n        basic.pause(300)\n    }\n\n    function mp3_sendDataFast(): void {\n        let myBuff = pins.createBuffer(10);\n        for (let i = 0; i < 10; i++) {\n            myBuff.setNumber(NumberFormat.UInt8BE, i, dataArr[i])\n        }\n        serial.writeBuffer(myBuff)\n    }\n\n\n    //% blockId=\"setTracking\" \n    //% block=\"play the mp3 in order of:%tracking || repeatList: $myAns\"\n    //% myAns.shadow=\"toggleYesNo\"\n    //% tracking.defl=1\n    //% expandableArgumentMode=\"toggle\"\n    //% subcategory=Excute group=\"MP3\" color=#EA5532\n    export function setTracking(tracking: number, myAns: boolean = false): void {\n        CMD = 0x03\n        para1 = 0x00\n        para2 = tracking\n        dataArr[3] = CMD\n        dataArr[5] = para1\n        dataArr[6] = para2\n        mp3_checkSum()\n        mp3_sendData()\n        execute(0x0D)\n        if (myAns)\n            execute(0x19)\n    }\n    //% blockId=MP3execute block=\"Set MP3 execute procedure:%myType\"\n    //% myType.fieldEditor=\"gridpicker\"\n    //% myType.fieldOptions.columns=2\n    //% subcategory=Excute group=\"MP3\" color=#EA5532\n    export function execute(myType: playType): void {\n        CMD = myType\n        para1 = 0x00\n        para2 = 0x00\n        dataArr[3] = CMD\n        dataArr[5] = para1\n        dataArr[6] = para2\n        mp3_checkSum()\n        mp3_sendData()\n    }\n    //% blockId=\"setVolume\" block=\"Set volume(0~25):%volume\"\n    //% volume.min=0 volume.max=25\n    //% subcategory=Excute group=\"MP3\" color=#EA5532\n    export function setVolume(volume: number): void {\n        if (volume > 25) {\n            volume = 25\n        }\n        CMD = 0x06\n        para1 = 0\n        para2 = volume\n        dataArr[3] = CMD\n        dataArr[5] = para1\n        dataArr[6] = para2\n        mp3_checkSum()\n        mp3_sendData()\n    }\n    //% blockId=MP3setPort block=\"Set the MP3 port to %Rjpin\"\n    //% Rjpin.fieldEditor=\"gridpicker\"\n    //% Rjpin.fieldOptions.columns=2\n    //% subcategory=Excute group=\"MP3\" color=#EA5532\n    export function MP3SetPort(Rjpin: DigitalRJPin): void {\n        let pin = SerialPin.USB_TX\n        switch (Rjpin) {\n            case DigitalRJPin.J1:\n                pin = SerialPin.P8\n                break;\n            case DigitalRJPin.J2:\n                pin = SerialPin.P12\n                break;\n            case DigitalRJPin.J3:\n                pin = SerialPin.P14\n                break;\n            case DigitalRJPin.J4:\n                pin = SerialPin.P16\n                break;\n            case DigitalRJPin.P0:\n                pin = SerialPin.P0\n                break;\n            case DigitalRJPin.P16:\n                pin = SerialPin.P16\n                break;\n            case DigitalRJPin.P14:\n                pin = SerialPin.P14\n                break;\n            case DigitalRJPin.P8:\n                pin = SerialPin.P8\n                break;\n        }\n        serial.redirect(\n            pin,\n            SerialPin.USB_RX,\n            BaudRate.BaudRate9600\n        )\n        setVolume(25)\n    }\n\n    export enum value_level {\n        /**\n         * Attention greater than 35\n         */\n        //% block=\"⬆\"\n        UP = 5,\n        /**\n         * Attention greater than 50\n         */\n        //% block=\"⬇\"\n        DOWN = 7,\n        /**\n         * Attention greater than 65\n         */\n        //% block=\"⬅\"\n        LEFT = 8,\n        /**\n        * Attention greater than 35\n        */\n        //% block=\"➡\"\n        RIGHT = 6,\n        /**\n         * Attention greater than 50\n         */\n        //% block=\"▷\"\n        Tri = 13,\n        /**\n         * Attention greater than 65\n         */\n        //% block=\"☐\"\n        Squ = 16,\n        /**\n        * Attention greater than 35\n        */\n        //% block=\"𐤏\"\n        Cir = 14,\n        /**\n         * Attention greater than 50\n         */\n        //% block=\"⨉\"\n        X = 15,\n        /**\n         * Attention greater than 65\n         */\n        //% block=\"L1\"\n        Left1 = 11,\n        /**\n        * Attention greater than 35\n        */\n        //% block=\"R1\"\n        Right1 = 12,\n        /**\n         * Attention greater than 50\n         */\n        //% block=\"L2\"\n        Left2 = 9,\n        /**\n         * Attention greater than 65\n         */\n        //% block=\"R2\"\n        Right2 = 10,\n        /**\n        * Attention greater than 35\n        */\n        //% block=\"SELECT\"\n        Sele = 1,\n        /**\n         * Attention greater than 50\n         */\n        //% block=\"START\"\n        Star = 4,\n        /**\n         * Attention greater than 50\n         */\n        //% block=\"L3\"\n        L3 = 2,\n        /**\n         * Attention greater than 50\n         */\n        //% block=\"R3\"\n        R3 = 3,\n    }\n\n    export enum LR_value {\n\n        /**\n         * Attention greater than L\n         */\n        //% block=\"L\"\n        LEFT = 0,\n        /**\n         * Attention greater than R\n         */\n        //% block=\"R\"\n        RIGHT = 2,\n\n\n    }\n\n    export enum value_Analog {\n        /**\n        * Attention greater than 35\n        */\n        //% block=\"↖\"\n        LUP = 9,\n        /**\n        * Attention greater than 35\n        */\n        //% block=\"⬆\"\n        UP = 5,\n        /**\n        * Attention greater than 35\n        */\n        //% block=\"↗\"\n        RUP = 10,\n        /**\n         * Attention greater than 65\n         */\n        //% block=\"⬅\"\n        LEFT = 7,\n        /**\n        * 32\n        */\n        //% block=\"P\"\n        P = 13,\n        /**\n        * Attention greater than 35\n        */\n        //% block=\"➡\"\n        RIGHT = 8,\n        /*\n        * Attention greater than 35\n        */\n        //% block=\"↙\"\n        LDOWN = 11,\n        /**\n        * Attention greater than 50\n        */\n        //% block=\"⬇\"\n        DOWN = 6,\n        /**\n        * Attention greater than 50\n        */\n        //% block=\"↘\"\n        RDOWN = 12,\n        // /**\n        //  * 33\n        //  */\n        // //% block=\"right3\"\n        // Button_R3 = 33,\n        // /**\n        //  * Attention greater than 35\n        //  */\n        // //% block=\"R⬆\"\n        // R_UP = 7,\n        // /**\n        //  * Attention greater than 50\n        //  */\n        // //% block=\"R⬇\"\n        // R_DOWN = 7,\n        // /**\n        //  * Attention greater than 65\n        //  */\n        // //% block=\"R⬅\"\n        // R_LEFT = 7,\n        // /**\n        // * Attention greater than 35\n        // */\n        // //% block=\"R➡\"\n        // R_RIGHT = 7,\n        // /**\n        // * Attention greater than 35\n        // */\n        // //% block=\"R↖\"\n        // R_LUP = 8,\n        // /**\n        // * Attention greater than 35\n        // */\n        // //% block=\"R↗\"\n        // R_RUP = 8,/**\n        // * Attention greater than 35\n        // */\n        // //% block=\"R↙\"\n        // R_LDOWN = 8,\n        // /**\n        // * Attention greater than 50\n        // */\n        // //% block=\"R↘\"\n        // R_RDOWN = 8,\n    }\n\n\n\n    export enum ButtonEventSrouse {\n        /**\n         * 35\n         */\n        //% block=\"⬆\"\n        Button_UP = 35,\n        /**\n         * 37\n         */\n        //% block=\"⬇\"\n        Button_DOWN = 37,\n        /**\n         * 38\n         */\n        //% block=\"⬅\"\n        Button_LEFT = 38,\n        /**\n        * 36\n        */\n        //% block=\"➡\"\n        Button_RIGHT = 36,\n        /**\n         * 43\n         */\n        //% block=\"▷\"\n        Button_Tri = 43,\n        /**\n         * 46\n         */\n        //% block=\"☐\"\n        Button_Squ = 46,\n        /**\n        * 44\n        */\n        //% block=\"𐤏\"\n        Button_Cir = 44,\n        /**\n         * 45\n         */\n        //% block=\"⨉\"\n        Button_X = 45,\n        /**\n         * 41\n         */\n        //% block=\" left1\"\n        Button_Left1 = 41,\n        /**\n        * 42\n        */\n        //% block=\"right1\"\n        Button_Right1 = 42,\n        /**\n         * 39\n         */\n        //% block=\"left2\"\n        Button_Left2 = 39,\n        /**\n         * 40\n         */\n        //% block=\"right2\"\n        Button_Right2 = 40,\n        /**\n        * 31\n        */\n        //% block=\"select\"\n        Button_Sele = 31,\n        /**\n         * 34\n         */\n        //% block=\"start\"\n        Button_Star = 34,\n        // /**\n        //  * 32\n        //  */\n        // //% block=\"left3\"\n        // Button_L3 = 32,\n        // /**\n        //  * 33\n        //  */\n        // //% block=\"right3\"\n        // Button_R3 = 33,\n    }\n\n    export enum ButtonEventState {\n        /**\n         * Attention greater than 50\n         */\n        //% block=\"off\"\n        Button_off = 0,\n        /**\n         * Attention greater than 50\n         */\n        //% block=\"on\"\n        Button_on = 1,\n    }\n\n\n    export enum value_A {\n        /**\n         * Attention greater than 35\n         */\n        //% block=\"RX\"\n        RX = 25,\n        /**\n         * Attention greater than 50\n         */\n        //% block=\"RY\"\n        RY = 26,\n        /**\n         * Attention greater than 65\n         */\n        //% block=\"LX\"\n        LX = 27,\n        /**\n        * Attention greater than 35\n        */\n        //% block=\"LY\"\n        LY = 28,\n        /**\n         * 32\n         */\n        //% block=\"L3\"\n        Button_L3 = 32,\n        /**\n         * 33\n         */\n        //% block=\"R3\"\n        Button_R3 = 33,\n    }\n\n    export enum Vibration {\n        /**\n         * Attention greater than 50\n         */\n        //% block=\"off\"\n        Vibration_off = 30,\n        /**\n         * Attention greater than 50\n         */\n        //% block=\"on\"\n        Vibration_on = 29,\n    }\n\n    /**\n    * Whether a Button is pressed\n    */\n    //% subcategory=Input group=\"IIC Port\" color=#00B1ED\n    //% block=\"Joystick button %value_level is pressed\" blockId=\"DigitalButton\"\n    export function get_Attention_Value(level: value_level): boolean {\n        let value = 0\n        let digital = 0\n\n        while (pins.i2cReadNumber(0x08, NumberFormat.UInt8LE, false) != 0x10);\n\n        switch (level) {\n            case value_level.UP:\n                digital = value_level.UP\n                pins.i2cWriteNumber(0x08, digital, NumberFormat.UInt8LE, false);\n                value = pins.i2cReadNumber(0x08, NumberFormat.UInt8LE, false);\n                if (value == 1) {\n                    return true\n                }\n                else if (value == 0) {\n                    return false\n                }\n            case value_level.DOWN:\n                digital = value_level.DOWN\n                pins.i2cWriteNumber(0x08, digital, NumberFormat.UInt8LE, false);\n                value = pins.i2cReadNumber(0x08, NumberFormat.UInt8LE, false);\n                if (value == 1) {\n                    return true\n                }\n                else if (value == 0) {\n                    return false\n                }\n            case value_level.LEFT:\n                digital = value_level.LEFT\n                pins.i2cWriteNumber(0x08, digital, NumberFormat.UInt8LE, false);\n                value = pins.i2cReadNumber(0x08, NumberFormat.UInt8LE, false);\n                if (value == 1) {\n                    return true\n                }\n                else if (value == 0) {\n                    return false\n                }\n            case value_level.RIGHT:\n                digital = value_level.RIGHT\n                pins.i2cWriteNumber(0x08, digital, NumberFormat.UInt8LE, false);\n                value = pins.i2cReadNumber(0x08, NumberFormat.UInt8LE, false);\n                if (value == 1) {\n                    return true\n                }\n                else if (value == 0) {\n                    return false\n                }\n            case value_level.Tri:\n                digital = value_level.Tri\n                pins.i2cWriteNumber(0x08, digital, NumberFormat.UInt8LE, false);\n                value = pins.i2cReadNumber(0x08, NumberFormat.UInt8LE, false);\n                if (value == 1) {\n                    return true\n                }\n                else if (value == 0) {\n                    return false\n                }\n            case value_level.Squ:\n                digital = value_level.Squ\n                pins.i2cWriteNumber(0x08, digital, NumberFormat.UInt8LE, false);\n                value = pins.i2cReadNumber(0x08, NumberFormat.UInt8LE, false);\n                if (value == 1) {\n                    return true\n                }\n                else if (value == 0) {\n                    return false\n                }\n            case value_level.Cir:\n                digital = value_level.Cir\n                pins.i2cWriteNumber(0x08, digital, NumberFormat.UInt8LE, false);\n                value = pins.i2cReadNumber(0x08, NumberFormat.UInt8LE, false);\n                if (value == 1) {\n                    return true\n                }\n                else if (value == 0) {\n                    return false\n                }\n            case value_level.X:\n                digital = value_level.X\n                pins.i2cWriteNumber(0x08, digital, NumberFormat.UInt8LE, false);\n                value = pins.i2cReadNumber(0x08, NumberFormat.UInt8LE, false);\n                if (value == 1) {\n                    return true\n                }\n                else if (value == 0) {\n                    return false\n                }\n            case value_level.Left1:\n                digital = value_level.Left1\n                pins.i2cWriteNumber(0x08, digital, NumberFormat.UInt8LE, false);\n                value = pins.i2cReadNumber(0x08, NumberFormat.UInt8LE, false);\n                if (value == 1) {\n                    return true\n                }\n                else if (value == 0) {\n                    return false\n                }\n            case value_level.Left2:\n                digital = value_level.Left2\n                pins.i2cWriteNumber(0x08, digital, NumberFormat.UInt8LE, false);\n                value = pins.i2cReadNumber(0x08, NumberFormat.UInt8LE, false);\n                if (value == 1) {\n                    return true\n                }\n                else if (value == 0) {\n                    return false\n                }\n            case value_level.Right1:\n                digital = value_level.Right1\n                pins.i2cWriteNumber(0x08, digital, NumberFormat.UInt8LE, false);\n                value = pins.i2cReadNumber(0x08, NumberFormat.UInt8LE, false);\n                if (value == 1) {\n                    return true\n                }\n                else if (value == 0) {\n                    return false\n                }\n            case value_level.Right2:\n                digital = value_level.Right2\n                pins.i2cWriteNumber(0x08, digital, NumberFormat.UInt8LE, false);\n                value = pins.i2cReadNumber(0x08, NumberFormat.UInt8LE, false);\n                if (value == 1) {\n                    return true\n                }\n                else if (value == 0) {\n                    return false\n                }\n            case value_level.Sele:\n                digital = value_level.Sele\n                pins.i2cWriteNumber(0x08, digital, NumberFormat.UInt8LE, false);\n                value = pins.i2cReadNumber(0x08, NumberFormat.UInt8LE, false);\n                if (value == 1) {\n                    return true\n                }\n                else if (value == 0) {\n                    return false\n                }\n            case value_level.Star:\n                digital = value_level.Star\n                pins.i2cWriteNumber(0x08, digital, NumberFormat.UInt8LE, false);\n                value = pins.i2cReadNumber(0x08, NumberFormat.UInt8LE, false);\n                if (value == 1) {\n                    return true\n                }\n                else if (value == 0) {\n                    return false\n                }\n            case value_level.L3:\n                digital = value_level.L3\n                pins.i2cWriteNumber(0x08, digital, NumberFormat.UInt8LE, false);\n                value = pins.i2cReadNumber(0x08, NumberFormat.UInt8LE, false);\n                if (value == 1) {\n                    return true\n                }\n                else if (value == 0) {\n                    return false\n                }\n            case value_level.R3:\n                digital = value_level.R3\n                pins.i2cWriteNumber(0x08, digital, NumberFormat.UInt8LE, false);\n                value = pins.i2cReadNumber(0x08, NumberFormat.UInt8LE, false);\n                if (value == 1) {\n                    return true\n                }\n                else if (value == 0) {\n                    return false\n                }\n            default:\n                return false\n        }\n\n    }\n\n    /**\n     * Get Analog value\n    */\n    //% subcategory=Input group=\"IIC Port\" color=#00B1ED\n    //% blockId=\"AnlogValue\" block=\"Joystick rocker value of %value_A\"\n    export function GetAnalogValue(Button: value_A): number {\n        let Analog = 0\n        let re_value = 128\n\n        while (pins.i2cReadNumber(0x08, NumberFormat.UInt8LE, false) != 0x10);\n\n        switch (Button) {\n            case value_A.RX:\n                Analog = value_A.RX\n                pins.i2cWriteNumber(0x08, Analog, NumberFormat.UInt8LE, false);\n                re_value = pins.i2cReadNumber(0x08, NumberFormat.UInt8LE, false);\n                if (re_value != 128 && re_value != 0)\n                    re_value = re_value + 1;\n                break\n            case value_A.RY:\n                Analog = value_A.RY\n                pins.i2cWriteNumber(0x08, Analog, NumberFormat.UInt8LE, false);\n                re_value = pins.i2cReadNumber(0x08, NumberFormat.UInt8LE, false);\n                if (re_value != 0)\n                    re_value = re_value + 1;\n                break\n            case value_A.LX:\n                Analog = value_A.LX\n                pins.i2cWriteNumber(0x08, Analog, NumberFormat.UInt8LE, false);\n                re_value = pins.i2cReadNumber(0x08, NumberFormat.UInt8LE, false);\n                if (re_value != 128 && re_value != 0)\n                    re_value = re_value + 1;\n                break\n            case value_A.LY:\n                Analog = value_A.LY\n                pins.i2cWriteNumber(0x08, Analog, NumberFormat.UInt8LE, false);\n                re_value = pins.i2cReadNumber(0x08, NumberFormat.UInt8LE, false);\n                if (re_value != 0)\n                    re_value = re_value + 1;\n                break\n            default:\n                re_value = 66\n                break\n        }\n\n        re_value = re_value * 4;\n        return re_value\n    }\n\n    let sc_byte = 0\n    let dat = 0\n    let low = 0\n    let high = 0\n    let temp = 0\n    let temperature = 0\n    let ack = 0\n    let lastTemp = 0\n\n    export enum ValType {\n        //% block=\"temperature(℃)\" enumval=0\n        DS18B20_temperature_C,\n\n        //% block=\"temperature(℉)\" enumval=1\n        DS18B20_temperature_F\n    }\n    function init_18b20(mpin: DigitalPin) {\n        pins.digitalWritePin(mpin, 0)\n        control.waitMicros(600)\n        pins.digitalWritePin(mpin, 1)\n        control.waitMicros(30)\n        ack = pins.digitalReadPin(mpin)\n        control.waitMicros(600)\n        return ack\n    }\n    function write_18b20(mpin: DigitalPin, data: number) {\n        sc_byte = 0x01\n        for (let index = 0; index < 8; index++) {\n            pins.digitalWritePin(mpin, 0)\n            if (data & sc_byte) {\n                pins.digitalWritePin(mpin, 1)\n                control.waitMicros(60)\n            } else {\n                pins.digitalWritePin(mpin, 0)\n                control.waitMicros(60)\n            }\n            pins.digitalWritePin(mpin, 1)\n            data = data >> 1\n        }\n    }\n    function read_18b20(mpin: DigitalPin) {\n        dat = 0x00\n        sc_byte = 0x01\n        for (let index = 0; index < 8; index++) {\n            pins.digitalWritePin(mpin, 0)\n            pins.digitalWritePin(mpin, 1)\n            if (pins.digitalReadPin(mpin)) {\n                dat = dat + sc_byte\n            }\n            sc_byte = sc_byte << 1\n            control.waitMicros(60)\n        }\n        return dat\n    }\n\n    //% subcategory=Sensor group=\"Digital\" color=#EA5532\n    //% block=\"value of DS18B20 %state at pin %Rjpin\"\n    export function Ds18b20Temp(Rjpin: DigitalRJPin, state: ValType): number {\n        let pin = RJpin_to_digital(Rjpin)\n        init_18b20(pin)\n        write_18b20(pin, 0xCC)\n        write_18b20(pin, 0x44)\n        basic.pause(10)\n        init_18b20(pin)\n        write_18b20(pin, 0xCC)\n        write_18b20(pin, 0xBE)\n        low = read_18b20(pin)\n        high = read_18b20(pin)\n        temperature = high << 8 | low\n        temperature = temperature / 16\n        if (temperature > 130) {\n            temperature = lastTemp\n        }\n        lastTemp = temperature\n        switch (state) {\n            case ValType.DS18B20_temperature_C:\n                return temperature\n            case ValType.DS18B20_temperature_F:\n                temperature = (temperature * 1.8) + 32\n                return temperature\n            default:\n                return 0\n        }\n\n    }\n}\n","nezha.ts":"/**\n* Functions to NeZha multifunctional expansion board by ELECFREAKS Co.,Ltd.\n*/\n//% color=#ff0000  icon=\"\\uf06d\" block=\"Hub\" blockId=\"Hub\"\nnamespace neZha {\n    const neZha_address = 0x10\n    /**\n    * MotorList\n    */\n    export enum MotorList {\n        //% block=\"M1\"\n        M1,\n        //% block=\"M2\"\n        M2,\n        //% block=\"M3\"\n        M3,\n        //% block=\"M4\"\n        M4\n    }\n    /**\n    * ServoList\n    */\n    export enum ServoList {\n        //% block=\"S1\" \n        S1,\n        //% block=\"S2\"\n        S2,\n        //% block=\"S3\" \n        S3,\n        //% block=\"S4\"\n        S4\n    }\n    export enum ServoTypeList {\n        //% block=\"180°\" \n        _180,\n        //% block=\"270°\"\n        _270,\n        //% block=\"360°\" \n        _360\n    }\n    /**\n     * Purpose: Set the speed of M1, M2, M3, M4 motor. \n     * @param motor M1, M2, M3, M4 motor , eg: MotorList.M1\n     * @param speed motor speed, eg: 100\n     */\n    //% weight=88\n    //% blockId=setMotorSpeed block=\"Set motor %motor speed to %speed\\\\%\"\n    //% speed.min=-100 speed.max=100\n    export function setMotorSpeed(motor: MotorList, speed: number): void {\n        let iic_buffer = pins.createBuffer(4);\n        if (speed > 100) {\n            speed = 100\n        }\n        else if (speed < -100) {\n            speed = -100\n        }\n        switch (motor) {\n            case MotorList.M1:\n                iic_buffer[0] = 0x01;\n                if (speed >= 0) {\n                    iic_buffer[1] = 0x01;\n                }\n                else {\n                    iic_buffer[1] = 0x02;\n                    speed = speed * -1\n                }\n                iic_buffer[2] = speed;\n                iic_buffer[3] = 0;\n                pins.i2cWriteBuffer(neZha_address, iic_buffer);\n                break;\n            case MotorList.M2:\n                iic_buffer[0] = 0x02;\n                if (speed >= 0) {\n                    iic_buffer[1] = 0x01;\n                }\n                else {\n                    iic_buffer[1] = 0x02;\n                    speed = speed * -1\n                }\n                iic_buffer[2] = speed;\n                iic_buffer[3] = 0;\n                pins.i2cWriteBuffer(neZha_address, iic_buffer);\n                break;\n            case MotorList.M3:\n                iic_buffer[0] = 0x03;\n                if (speed >= 0) {\n                    iic_buffer[1] = 0x01;\n                }\n                else {\n                    iic_buffer[1] = 0x02;\n                    speed = speed * -1\n                }\n                iic_buffer[2] = speed;\n                iic_buffer[3] = 0;\n                pins.i2cWriteBuffer(neZha_address, iic_buffer);\n                break;\n            case MotorList.M4:\n                iic_buffer[0] = 0x04;\n                if (speed >= 0) {\n                    iic_buffer[1] = 0x01;\n                }\n                else {\n                    iic_buffer[1] = 0x02;\n                    speed = speed * -1\n                }\n                iic_buffer[2] = speed;\n                iic_buffer[3] = 0;\n                pins.i2cWriteBuffer(neZha_address, iic_buffer);\n                break;\n            default:\n                break;\n        }\n    }\n\n    /*\n     * Purpose: Stop one of the motors. \n     * @param motor A motor in the MotorList , eg: MotorList.M1\n     */\n    //% weight=86\n    //% blockId=stopMotor block=\"Stop motor %motor\"\n    export function stopMotor(motor: MotorList): void {\n        setMotorSpeed(motor, 0)\n    }\n    /*\n     * Purpose: Stop all motors, including M1, M2, M3, M4.\n     */\n    //% weight=85\n    //% blockId=stopAllMotor  block=\"Stop all motor\"\n    export function stopAllMotor(): void {\n        setMotorSpeed(MotorList.M1, 0)\n        setMotorSpeed(MotorList.M2, 0)\n        setMotorSpeed(MotorList.M3, 0)\n        setMotorSpeed(MotorList.M4, 0)\n    }\n\n    /*\n     * Purpose: Setting the angle of a servo motor. \n     * @param servo A servo in the ServoList , eg: ServoList.S1\n     * @param angle Angle of servo motor , eg: 90\n     */\n    //% weight=84\n    //% blockId=setServoAngle block=\"Set %servoType servo %servo angle to %angle°\"\n    export function setServoAngle(servoType: ServoTypeList, servo: ServoList, angle: number): void {\n        let iic_buffer = pins.createBuffer(4);\n        switch (servo) {\n            case ServoList.S1:\n                iic_buffer[0] = 0x10;\n                break;\n            case ServoList.S2:\n                iic_buffer[0] = 0x11;\n                break;\n            case ServoList.S3:\n                iic_buffer[0] = 0x12;\n                break;\n            case ServoList.S4:\n                iic_buffer[0] = 0x13;\n                break;\n        }\n        switch (servoType) {\n            case ServoTypeList._180:\n                angle = Math.map(angle, 0, 180, 0, 180)\n                break\n            case ServoTypeList._270:\n                angle = Math.map(angle, 0, 270, 0, 180)\n                break\n            case ServoTypeList._360:\n                angle = Math.map(angle, 0, 360, 0, 180)\n                break\n        }\n        iic_buffer[1] = angle;\n        iic_buffer[2] = 0;\n        iic_buffer[3] = 0;\n        pins.i2cWriteBuffer(neZha_address, iic_buffer);\n    }\n    /*\n     * Purpose: Setting the speed of a servo motor. \n     * @param servo A servo in the ServoList , eg: ServoList.S1\n     * @param angle Angle of servo motor , eg: 100\n     */\n    //% weight=83\n    //% blockId=setServoSpeed block=\"Set continuous rotation servo %servo speed to %speed\\\\%\"\n    //% speed.min=-100 speed.max=100\n    export function setServoSpeed(servo: ServoList, speed: number): void {\n        speed = Math.map(speed, -100, 100, 0, 180)\n        setServoAngle(ServoTypeList._180, servo, speed)\n    }\n}\n","notlegos.ts":"// NotLegos Blocks\n\n//% block=\"Not LEGOs\" color=#0031AF weight=1000 icon=\"\\uf3a5\"\n//% groups=['MP3\",'Display', 'Laser', 'others']\nnamespace notLegos {\n\n    // Variables for MP3 and Volume Pot\n    let isPot = false\n    let potPin = AnalogPin.P0\n    let mp3bits = 0\n    let mp3Apin = SerialPin.P0\n    let mp3Bpin = SerialPin.P0\n    let mp3Cpin = SerialPin.P0\n    let mp3Avolume = 1\n    let mp3Bvolume = 1\n    let mp3Cvolume = 1\n    let relativeCvolume = 1\n    let lastMP3bit = \"\"\n    let Start_Byte = 0x7E\n    let Version_Byte = 0xFF\n    let Command_Length = 0x06\n    let End_Byte = 0xEF\n    let Acknowledge = 0x00\n    let CMD = 0x00\n    let para1 = 0x00\n    let para2 = 0x00\n    let highByte = 0x00\n    let lowByte = 0x00\n    let dataArr: number[] = [Start_Byte, Version_Byte, Command_Length, CMD, Acknowledge, para1, para2, highByte, lowByte, End_Byte]\n\n    // String Arrays for Full Player Sound Sets and Shuffled Playlists Thereof\n    let PlayerAwaitingMusic: string[] = []\n    let PlayerFailure: string[] = []\n    let PlayerHurry: string[] = []\n    let PlayerIntro: string[] = []\n    let PlayerIntroMusic: string[] = []\n    let PlayerLevelMusic: string[] = []\n    let PlayerLost: string[] = []\n    let PlayerLostMusic: string[] = []\n    let PlayerName: string[] = []\n    let PlayerNay: string[] = []\n    let PlayerOuch: string[] = []\n    let PlayerReady: string[] = []\n    let PlayerSuccess: string[] = []\n    let PlayerTutorialMusic: string[] = []\n    let PlayerWon: string[] = []\n    let PlayerWonMusic: string[] = []\n    let PlayerYay: string[] = []\n    let PlaylistAwaitingMusic: string[] = []\n    let PlaylistCorrect: string[] = []\n    let PlaylistExplosion: string[] = []\n    let PlaylistFailure: string[] = []\n    let PlaylistFire: string[] = []\n    let PlaylistGhost: string[] = []\n    let PlaylistHurry: string[] = []\n    let PlaylistIncorrect: string[] = []\n    let PlaylistIntro: string[] = []\n    let PlaylistLost: string[] = []\n    let PlaylistName: string[] = []\n    let PlaylistNay: string[] = []\n    let PlaylistOuch: string[] = []\n    let PlaylistReady: string[] = []\n    let PlaylistSlash: string[] = []\n    let PlaylistSpark: string[] = []\n    let PlaylistSplash: string[] = []\n    let PlaylistSuccess: string[] = []\n    let PlaylistWon: string[] = []\n    let PlaylistYay: string[] = []\n\n    // Sound Strings - Global\n    let VoiceTracks = \"10_1_90_1.75|10_2_90_3.65|10_3_50_11.5|10_4_90_0|10_5_90_0|10_6_90_4.65|10_7_90_7.15|10_8_90_4.8|10_9_90_3.75|10_10_90_5.05|10_11_90_0|10_12_90_0|10_13_90_3|10_14_90_3|10_15_90_3|10_16_90_4|10_17_90_0|10_18_90_3|10_19_90_3|10_20_90_4|10_21_90_2|10_22_90_0|10_23_90_2|10_24_90_2|10_25_90_6|10_26_90_6|10_27_90_6|10_28_90_6|10_29_90_6|10_30_90_6|10_31_90_6|10_32_90_6|10_33_90_8|10_34_90_9|10_35_90_6|10_36_90_6|10_37_90_6|10_38_90_6|10_39_90_6|10_40_90_6\".split(\"|\")\n    let CorrectSFX = \"7_1_100_4|7_2_100_8|7_3_100_8|7_4_100_6|7_5_100_10|7_6_100_8|7_7_100_6|7_8_100_4|7_9_100_17|7_10_100_9|7_11_100_4|7_12_100_8|7_13_100_12|7_14_100_7|7_15_100_10|7_16_100_9|7_17_100_10|7_18_100_9|7_19_100_8|7_20_100_4|7_21_100_7|7_22_100_26|7_23_100_5|7_24_100_4|7_25_100_10|7_26_100_7|7_27_100_7|7_28_100_6|7_29_100_7|7_30_100_7|7_31_100_12|7_32_100_4|7_33_100_6|7_34_100_6|7_35_100_6|7_36_100_6|7_37_100_5|7_38_100_3|7_39_100_6|7_40_100_6|7_41_100_6|7_42_100_8|7_43_100_6|7_44_100_8|7_45_100_6|7_46_100_5|7_47_100_5|7_48_100_12|7_49_100_3|7_50_100_7|7_51_100_8|7_52_100_11|7_53_100_6|7_54_100_2|7_55_100_5|7_56_100_7|7_57_100_8|7_58_100_7|7_59_100_6|7_60_100_7|7_61_100_6|7_62_100_8|7_63_100_5|7_64_100_5|7_65_100_7|7_66_100_9|7_67_100_6|7_68_100_6|7_69_100_7|7_70_100_10|7_71_100_7|7_72_100_5|7_73_100_6|7_74_100_8|7_75_100_3|7_76_100_3|7_77_100_6|7_78_100_7|7_79_100_4|7_80_100_6|7_81_100_2|7_82_100_3|7_83_100_3|7_84_100_1|7_85_100_3|7_86_100_6|7_87_100_7|7_88_100_5|7_89_100_3|7_90_100_5|7_91_100_3|7_92_100_3|7_93_100_2|7_94_100_3|7_95_100_3|7_96_100_1|7_99_100_1|7_100_100_1|7_101_100_1|7_102_100_1|7_103_100_1|7_104_100_3|7_105_100_1|7_106_100_1|7_107_100_4|7_108_100_4|7_109_100_1|7_110_100_1|7_111_100_1|7_112_100_1|7_113_100_1|7_114_100_2|7_115_100_1|7_116_100_1|7_117_100_1|7_118_100_1\".split(\"|\")\n    let IncorrectSFX = \"8_1_100_6|8_2_100_5|8_3_100_3|8_4_100_5|8_5_100_7|8_6_100_6|8_7_100_4|8_8_100_1|8_9_100_3|8_10_100_4|8_11_100_3|8_12_100_3|8_13_100_6|8_14_100_3|8_15_100_1|8_16_100_1|8_17_100_1|8_18_100_1|8_19_100_0|8_20_100_0|8_21_100_5|8_22_100_4|8_23_100_3|8_24_100_7\".split(\"|\")\n    let AllSFX = \"9_1_100_4.754|9_2_100_4.336|9_3_100_5.172|9_4_100_4.806|9_5_100_4.754|9_6_100_1.536|9_7_100_2.136|9_8_100_1.896|9_9_100_2.592|9_10_100_0.936|9_11_100_1.008|9_12_100_0.312|9_13_100_1.44|9_14_100_1.8|9_15_100_1.992|9_16_100_1.104|9_17_100_1.08|9_18_100_0.912|9_19_100_0.528|9_20_100_0.72|9_21_100_0.672|9_22_100_0.696|9_23_100_0.6|9_24_100_0.576|9_25_100_1.44|9_26_100_1.8|9_27_100_1.464|9_28_100_0.432|9_29_100_0.312|9_30_100_2.112|9_31_100_0.648|9_32_100_0.384|9_33_100_2.352|9_34_100_1.8|9_35_100_1.608|9_36_100_0.648|9_37_100_0.768|9_38_100_0.552|9_39_100_0.48|9_40_100_1.032|9_41_100_0.456|9_42_100_0.384|9_43_100_0.552|9_44_100_0.432|9_45_100_0.216|9_46_100_0.624|9_47_100_1.248|9_48_100_1.104|9_49_100_1.248|9_50_100_0.648|9_51_100_0.456|9_53_100_5.256|9_54_100_2.328|9_55_100_4.992|9_56_100_1.776|9_57_100_2.28|9_58_100_0.504|9_59_100_0.984|9_60_100_0.984|9_61_100_0.504|9_62_100_1.632|9_63_100_0.288|9_64_100_0.192|9_65_100_0.168|9_66_100_0.288|9_67_100_0.288|9_68_100_0.312|9_69_100_0.72|9_70_100_0.672|9_71_100_0.648|9_72_100_0.648|9_73_100_1.632|9_74_100_1.416|9_75_100_1.248|9_76_100_0.48|9_77_100_0.36|9_78_100_0.216|9_79_100_0.576|9_80_100_0.731|9_81_100_1.128|9_82_100_2.184|9_83_100_0.744|9_84_100_0.6|9_85_100_1.152|9_86_100_1.68|9_87_100_1.32|9_88_100_0.528|9_89_100_0.36|9_90_100_0.792|9_91_100_2.496|9_92_100_1.8|9_93_100_1.8|9_94_100_0.744|9_95_100_1.776|9_96_100_5.544|9_97_100_0.432|9_98_100_2.064|9_99_100_0.744|9_100_100_0.696|9_101_100_1.776|9_102_100_0.12|9_103_100_0.168|9_104_100_0.96|9_105_100_0.96|9_106_100_2.04|9_107_100_3.984|9_108_100_1.608|9_109_100_3.528|9_110_100_0.456|9_111_100_0.696|9_112_100_1.632|9_113_100_2.232\".split(\"|\")\n    let GhostSFX = \"9_1_100_4.754|9_2_100_4.336|9_3_100_5.172|9_4_100_4.806\".split(\"|\")\n    let FireSFX = \"9_6_100_1.536|9_15_100_1.992|9_53_100_5.256|9_106_100_2.04\".split(\"|\")\n    let ExplosionSFX = \"9_77_100_0.36|9_101_100_1.776|9_109_100_3.528\".split(\"|\")\n    let SplashSFX = \"9_33_100_2.352|9_34_100_1.8\".split(\"|\")\n    let SparkSFX = \"9_5_100_4.754|9_51_100_0.456|9_85_100_1.152|9_86_100_1.68|9_111_100_0.696|9_112_100_1.632\".split(\"|\")\n    let SlashSFX = \"9_10_100_0.936|9_25_100_1.44|9_28_100_0.432|9_32_100_0.384|9_50_100_0.648|9_59_100_0.984|9_63_100_0.288|9_64_100_0.192|9_65_100_0.168|9_66_100_0.288|9_67_100_0.288|9_68_100_0.312|9_69_100_0.72|9_75_100_1.248|9_76_100_0.48|9_77_100_0.36|9_78_100_0.216|9_89_100_0.36\".split(\"|\")\n    \n    // Music Strings - Super Mario Brothers\n    let SMBIntroMusic = \"1_1_75_2.808|1_2_75_3.912|1_3_75_7.81|1_4_75_4.992|1_5_75_3.918|1_6_75_12.382|1_7_75_3.204|1_8_75_6.648|1_9_75_6.168|1_10_75_7.464|1_11_75_9.36|1_12_75_9.038|1_13_75_10.605|1_14_75_3.492|1_15_75_9.613|1_16_75_3.48|1_17_75_5.58|1_18_75_5.041|1_19_75_6.336|1_20_75_5.424|1_21_75_7.2|1_22_75_5.424|1_23_75_3.317|1_24_75_7.262|1_25_75_5.59|1_26_75_5.52|1_27_75_10.776|1_28_75_4.944|1_29_75_5.496|1_30_75_4.032|1_31_75_6.264|1_32_75_3.918|1_33_75_4.44|1_34_75_10.152|1_35_75_8.097|1_36_75_7.706|1_37_75_3.317|1_38_75_6.87|1_39_75_4.466|1_40_75_5.877|1_41_75_3.432|1_42_75_7.392|1_43_75_6.768|1_44_75_2.616|1_45_75_6.269|1_46_75_1.188|1_47_75_2.088|1_48_75_2.124|1_49_75_8.228|1_50_75_15.647|1_51_75_9.064|1_52_75_10.152|1_53_75_13.008|1_54_75_14.16|1_55_75_14.236|1_56_75_15.792|1_57_75_7.392|1_58_75_4.368|1_59_75_9.384|1_60_75_7.653|1_61_75_8.76|1_62_75_8.952|1_63_75_12.024|1_64_75_4.284|1_65_75_6.048|1_66_75_9.072|1_67_75_4.68|1_68_75_6.138|1_69_75_5.208|1_70_75_9.576|1_71_75_8.045|1_72_75_8.045|1_73_75_5.407|1_74_75_3.186\".split(\"|\")\n    let SMBTutorialMusic = \"2_1_65_36|2_2_65_40|2_3_65_41|2_4_65_46|2_5_65_50|2_6_65_51|2_7_65_59|2_8_65_63|2_9_65_64|2_10_65_65|2_11_65_66|2_12_65_67|2_13_65_68|2_14_65_69|2_15_65_76|2_16_65_80|2_17_65_84|2_18_65_90|2_19_65_92|2_20_65_100|2_21_65_103|2_22_65_105|2_23_65_112|2_24_65_113|2_25_65_123|2_26_65_138|2_27_65_142|2_28_65_144|2_29_65_156|2_30_65_158|2_31_65_120|2_32_65_120|2_33_65_120|2_34_65_120|2_35_65_120|2_36_65_120\".split(\"|\")\n    let SMBAwaitingMusic = \"3_1_100_64|3_2_100_211|3_3_100_185|3_4_100_185|3_5_100_182|3_6_100_114|3_7_100_181|3_8_100_103|3_9_100_303|3_10_100_21|3_11_100_235|3_12_100_121|3_13_100_203|3_14_100_119|3_15_100_206|3_16_100_146|3_17_100_237|3_18_100_210|3_19_100_160\".split(\"|\")\n    let SMBLevelMusic = \"4_1_100_128|4_3_100_142|4_5_100_111|4_6_100_141|4_9_100_126|4_11_100_132|4_15_100_119|4_16_100_146|4_18_100_120|4_20_100_143|4_22_100_142|4_23_100_112|4_24_100_138|4_25_100_139|4_26_100_111|4_27_100_116|4_28_100_129|4_31_100_98|4_32_100_146|4_33_100_177|4_34_100_82|4_36_100_160|4_38_100_180|4_39_100_211|4_41_100_134|4_42_100_183|4_43_100_124|4_44_100_261|4_45_100_91|4_46_100_138|4_49_100_207|4_50_100_41|4_51_100_180|4_52_100_202|4_53_100_194|4_56_100_209|4_57_100_195|4_58_100_180|4_60_100_198|4_61_100_180|4_63_100_78|4_66_100_139|4_67_100_224|4_68_100_180|4_73_100_180|4_76_100_180|4_77_100_196|4_78_100_113|4_82_100_180|4_83_100_123|4_84_100_180|4_86_100_126|4_93_100_121|4_97_100_59|4_98_100_180|4_99_100_180|4_100_100_118|4_101_100_156|4_102_100_180|4_103_100_70|4_104_100_216|4_105_100_140|4_106_100_180|4_107_100_147|4_108_100_147|4_109_100_180|4_110_100_158|4_111_100_180|4_112_100_80|4_113_100_152|4_114_100_127|4_116_100_122|4_118_100_106|4_123_100_143|4_124_100_36|4_125_100_164|4_127_100_282|4_128_100_311|4_129_100_123|4_130_100_187|4_131_100_62|4_132_100_180|4_133_100_130|4_134_100_112|4_135_100_105|4_139_100_126|4_141_100_176|4_142_100_135|4_143_100_126|4_144_100_144|4_145_100_140|4_146_100_133|4_149_100_167|4_150_100_120|4_151_100_180|4_155_100_226|4_157_100_164|4_158_100_144|4_159_100_104|4_161_100_180|4_162_100_87|4_163_100_126|4_164_100_118|4_165_100_194|4_166_100_135|4_167_100_50|4_168_100_109|4_169_100_180|4_170_100_133|4_171_100_180|4_172_100_91|4_173_100_138|4_176_100_120|4_177_100_81|4_178_100_150|4_179_100_153|4_180_100_104|4_181_100_112\".split(\"|\")\n    let SMBWonMusic = \"5_1_100_4|5_2_100_17|5_3_100_29|5_4_100_172|5_5_100_13|5_6_100_248|5_7_100_11|5_8_100_445|5_9_100_241|5_10_100_244|5_11_100_20|5_12_100_7|5_13_100_28|5_14_100_74|5_15_100_15|5_16_100_74|5_17_100_17|5_18_100_17|5_19_100_15|5_20_100_38|5_21_100_42|5_22_100_67|5_23_100_8|5_24_100_8|5_25_100_13|5_26_100_17|5_27_100_5|5_28_100_122|5_29_100_226|5_30_100_79\".split(\"|\")\n    let SMBLostMusic = \"6_1_100_87|6_2_100_31|6_3_100_196|6_4_100_65|6_5_100_4|6_6_100_23|6_7_100_65|6_8_100_62|6_9_100_78|6_10_100_6|6_11_100_162\".split(\"|\")\n    \n    // Player Strings - Mario\n    let MarioSoundString = \"A_21_1_100_1.5|A_21_2_100_1|I_21_3_100_3.3|A_21_4_100_1.9|A_21_5_100_2.1|I_21_6_100_1.8|I_21_7_100_1.8|R_21_8_100_0.6|R_21_9_100_1.3|R_21_10_100_1.1|R_21_11_100_0.6|R_21_12_100_0.8|R_21_13_100_1.6|R_21_14_100_1.3|R_21_15_100_1.2|R_21_16_100_1.1|R_21_17_100_1.3|R_21_18_100_1|Y_21_19_100_0.2|Y_21_20_100_0.2|Y_21_21_100_0.3|Y_21_22_100_0.5|Y_21_23_100_0.6|Y_21_24_100_0.6|Y_21_25_100_0.6|Y_21_26_100_0.6|Y_21_27_100_0.6|Y_21_28_100_0.6|Y_21_29_100_0.7|Y_21_30_100_0.7|Y_21_31_100_0.7|Y_21_32_100_0.7|Y_21_33_100_0.7|Y_21_34_100_0.8|Y_21_35_100_0.8|Y_21_36_100_0.8|Y_21_37_100_0.8|Y_21_38_100_0.8|Y_21_39_100_0.8|Y_21_40_100_0.9|Y_21_41_100_0.9|Y_21_42_100_0.9|Y_21_43_100_0.9|Y_21_44_100_0.9|Y_21_45_100_0.9|Y_21_46_100_0.9|Y_21_47_100_1|Y_21_48_100_1|Y_21_49_100_1|Y_21_50_100_1|Y_21_51_100_1.1|Y_21_52_100_1.1|Y_21_53_100_1.1|Y_21_54_100_1.2|Y_21_55_100_1.2|Y_21_56_100_1.2|Y_21_57_100_1.2|Y_21_58_100_1.3|Y_21_59_100_1.3|Y_21_60_100_1.3|Y_21_61_100_1.4|Y_21_62_100_1.4|S_21_63_100_1|S_21_64_100_1.6|S_21_65_100_1.7|S_21_66_100_1.7|S_21_67_100_1.9|S_21_68_100_2.1|S_21_69_100_2.2|S_21_70_100_2.4|S_21_71_100_2.4|S_21_72_100_2.5|W_21_73_100_1.8|W_21_74_100_2|W_21_75_100_2.2|W_21_76_100_2.6|W_21_77_100_2.9|O_21_78_100_0.6|O_21_79_100_0.4|O_21_80_100_0.4|O_21_81_100_1.1|O_21_82_100_1.5|O_21_83_100_0.8|O_21_84_100_0.7|O_21_85_100_0.8|O_21_86_100_0.9|O_21_87_100_1.3|O_21_88_100_0.5|O_21_89_100_1|O_21_90_100_1|O_21_91_100_0.4|O_21_92_100_0.5|O_21_93_100_0.9|O_21_94_100_0.4|O_21_95_100_0.4|N_21_96_100_1|N_21_97_100_1.1|N_21_98_100_1|N_21_99_100_0.6|N_21_100_100_0.9|N_21_101_100_1.4|N_21_102_100_1.7|N_21_103_100_1.3|N_21_104_100_0.6|N_21_105_100_1.4|N_21_106_100_0.8|N_21_107_100_1.1|N_21_108_100_1.1|N_21_109_100_0.8|N_21_110_100_1.7|N_21_111_100_2.4|I_21_112_100_0.8|I_21_113_100_0.9|F_21_114_100_1.1|F_21_115_100_2.5|F_21_116_100_2.5|F_21_117_100_1.4|L_21_118_100_3.4|L_21_119_100_3.5|L_21_120_100_4.4|L_21_121_100_1.5|H_21_122_100_44.4\"\n\n    // BLOCK - Set the Player's Sounds\n    //% blockId=nl_player_set\n    //% subcategory=\"MP3\" group=\"MP3\"\n    //% weight=101\n    //% block=\"Set player to $player\"\n    export function setSounds(player: string): void {\n        let theSound = \"\"\n        let thisLetter = \"\"\n        let series = \"\"\n        let soundStrings: string[] = []\n        if (player == \"Mario\") {\n            soundStrings = MarioSoundString.split(\"|\")\n            series = \"SMB\"\n        }\n        if (series == \"SMB\") {\n            PlayerIntroMusic = SMBIntroMusic\n            PlayerTutorialMusic = SMBTutorialMusic\n            PlayerAwaitingMusic = SMBAwaitingMusic\n            PlayerLevelMusic = SMBLevelMusic\n            PlayerWonMusic = SMBWonMusic\n            PlayerLostMusic = SMBLostMusic\n        }\n        for (let sString of soundStrings) {\n            thisLetter = sString.charAt(0)\n            theSound = sString.substr(2, sString.length - 2)\n            if (thisLetter == \"A\") {\n                PlayerName.push(theSound)\n            } else if (thisLetter == \"R\") {\n                PlayerReady.push(theSound)\n            } else if (thisLetter == \"Y\") {\n                PlayerYay.push(theSound)\n            } else if (thisLetter == \"I\") {\n                PlayerIntro.push(theSound)\n            } else if (thisLetter == \"N\") {\n                PlayerNay.push(theSound)\n            } else if (thisLetter == \"O\") {\n                PlayerOuch.push(theSound)\n            } else if (thisLetter == \"S\") {\n                PlayerSuccess.push(theSound)\n            } else if (thisLetter == \"F\") {\n                PlayerFailure.push(theSound)\n            } else if (thisLetter == \"W\") {\n                PlayerWon.push(theSound)\n            } else if (thisLetter == \"L\") {\n                PlayerLost.push(theSound)\n            } else if (thisLetter == \"H\") {\n                PlayerHurry.push(theSound)\n            }\n        }\n    }    \n    \n    // Internal Function - Take a Sound from a Playlist After Filling it from a Soundbank if it's Empty\n    function takeReplenish(Playlist: any[], Soundbank: any[]) {\n        let returnSound = \"\"\n        returnSound = \"\"\n        if (Playlist.length == 0) {\n            for (let index = 0; index <= Soundbank.length - 1; index++) {\n                if (index == 0) {\n                    Playlist.push(Soundbank[index])\n                } else if (index >= 1) {\n                    Playlist.insertAt(randint(0, index), Soundbank[index])\n                }\n            }\n        }\n        returnSound = Playlist.shift()\n        return returnSound\n    }\n\n    // BLOCK - Fetch a Sound of a Type from a Category\n    //% blockId=nl_get_soundstring\n    //% subcategory=\"MP3\" group=\"MP3\"\n    //% weight=101\n    //% block=\"Get $Category sound $Type\"\n    export function getSoundString(Category: string, Type: string): string {\n        let returnString = \"\"\n        if (Category == \"Voice\") {\n            returnString = VoiceTracks[parseFloat(Type)]\n        } else if (Category == \"Player\") {\n            if (Type == \"Name\") {\n                returnString = takeReplenish(PlaylistName, PlayerName)\n            } else if (Type == \"Intro\") {\n                returnString = takeReplenish(PlaylistIntro, PlayerIntro)\n            } else if (Type == \"Ready\") {\n                returnString = takeReplenish(PlaylistReady, PlayerReady)\n            } else if (Type == \"Yay\") {\n                returnString = takeReplenish(PlaylistYay, PlayerYay)\n            } else if (Type == \"Success\") {\n                returnString = takeReplenish(PlaylistSuccess, PlayerSuccess)\n            } else if (Type == \"Nay\") {\n                returnString = takeReplenish(PlaylistNay, PlayerNay)\n            } else if (Type == \"Failure\") {\n                returnString = takeReplenish(PlaylistFailure, PlayerFailure)\n            } else if (Type == \"Won\") {\n                returnString = takeReplenish(PlaylistWon, PlayerWon)\n            } else if (Type == \"Lost\") {\n                returnString = takeReplenish(PlaylistLost, PlayerLost)\n            } else if (Type == \"Hurry\") {\n                returnString = takeReplenish(PlaylistHurry, PlayerHurry)\n            }\n        } else if (Category == \"SFX\") {\n            if (Type == \"Correct\") {\n                returnString = takeReplenish(PlaylistCorrect, CorrectSFX)\n            } else if (Type == \"Incorrect\") {\n                returnString = takeReplenish(PlaylistIncorrect, IncorrectSFX)\n            } else if (Type == \"Ghost\") {\n                returnString = takeReplenish(PlaylistGhost, GhostSFX)\n            } else if (Type == \"Fire\") {\n                returnString = takeReplenish(PlaylistFire, FireSFX)\n            } else if (Type == \"Explosion\") {\n                returnString = takeReplenish(PlaylistExplosion, ExplosionSFX)\n            } else if (Type == \"Splash\") {\n                returnString = takeReplenish(PlaylistSplash, SplashSFX)\n            } else if (Type == \"Spark\") {\n                returnString = takeReplenish(PlaylistSpark, SparkSFX)\n            } else if (Type == \"Slash\") {\n                returnString = takeReplenish(PlaylistSlash, SlashSFX)\n            }\n        } else if (Category == \"Music\") {\n            if (Type == \"Intro\") {\n                let PlaylistIntroMusic: number[] = []\n                returnString = takeReplenish(PlaylistIntroMusic, PlayerIntroMusic)\n            } else if (Type == \"Tutorial\") {\n                let PlaylistTutorialMusic: number[] = []\n                returnString = takeReplenish(PlaylistTutorialMusic, PlayerTutorialMusic)\n            } else if (Type == \"Awaiting\") {\n                returnString = takeReplenish(PlaylistAwaitingMusic, PlayerAwaitingMusic)\n            } else if (Type == \"Level\") {\n                let PlaylistLevelMusic: number[] = []\n                returnString = takeReplenish(PlaylistLevelMusic, PlayerLevelMusic)\n            } else if (Type == \"Won\") {\n                let PlaylistWonMusic: number[] = []\n                returnString = takeReplenish(PlaylistWonMusic, PlayerWonMusic)\n            } else if (Type == \"Lost\") {\n                let PlaylistLostMusic: number[] = []\n                returnString = takeReplenish(PlaylistLostMusic, PlayerLostMusic)\n            }\n        }\n        return returnString\n    }\n\n\n    ///////////////////////////////////////////////////////MP3\n    function mp3_sendData(): void {\n        let myBuff = pins.createBuffer(10);\n        for (let i = 0; i < 10; i++) {\n            myBuff.setNumber(NumberFormat.UInt8BE, i, dataArr[i])\n        }\n        serial.writeBuffer(myBuff)\n        basic.pause(20) // Was 100; problematic at 10\n    }\n    function mp3_checkSum(): void {\n        let total = 0;\n        for (let i = 1; i < 7; i++) {\n            total += dataArr[i]\n        }\n        total = 65536 - total\n        lowByte = total & 0xFF;\n        highByte = total >> 8;\n        dataArr[7] = highByte\n        dataArr[8] = lowByte\n    }\n    function mp3_sendDataFast(): void {\n        let myBuff = pins.createBuffer(10);\n        for (let i = 0; i < 10; i++) {\n            myBuff.setNumber(NumberFormat.UInt8BE, i, dataArr[i])\n        }\n        serial.writeBuffer(myBuff)\n    }\n    function sendMP3volume(sPin: SerialPin): void {\n        let theVolume = 5\n        if (sPin == mp3Apin) {\n            theVolume = Math.round(potRead() * mp3Avolume)\n        } else if (sPin == mp3Bpin) {\n            theVolume = Math.round(potRead() * mp3Bvolume)\n        } else if (sPin == mp3Cpin) {\n            theVolume = Math.round(potRead() * mp3Cvolume * relativeCvolume)\n        }\n        serial.redirect(sPin, SerialPin.USB_RX, BaudRate.BaudRate9600)\n        CMD = 6\n        para1 = 0\n        para2 = theVolume\n        dataArr[3] = CMD\n        dataArr[5] = para1\n        dataArr[6] = para2\n        mp3_checkSum()\n        mp3_sendData()\n    }\n    function sendMP3volumeFast(sPin: SerialPin): void {\n        let theVolume = 5\n        if (sPin == mp3Apin) {\n            theVolume = Math.round(potRead() * mp3Avolume)\n        } else if (sPin == mp3Bpin) {\n            theVolume = Math.round(potRead() * mp3Bvolume)\n        } else if (sPin == mp3Cpin) {\n            theVolume = Math.round(potRead() * mp3Cvolume * relativeCvolume)\n        }\n        serial.redirect(sPin, SerialPin.USB_RX, BaudRate.BaudRate9600)\n        CMD = 6\n        para1 = 0\n        para2 = theVolume\n        dataArr[3] = CMD\n        dataArr[5] = para1\n        dataArr[6] = para2\n        mp3_checkSum()\n        mp3_sendDataFast()\n    }\n    function sendMP3play(folderNum: string, fileNum: string, sPin: SerialPin): void {\n        serial.redirect(sPin, SerialPin.USB_RX, BaudRate.BaudRate9600)\n        CMD = 15\n        para1 = parseInt(folderNum)\n        para2 = parseInt(fileNum)\n        dataArr[3] = CMD\n        dataArr[5] = para1\n        dataArr[6] = para2\n        mp3_checkSum()\n        mp3_sendDataFast()\n    }\n    //% blockId=\"playFileNl\" \n    //% block=\"Play length of file:$soundString\"\n    //% soundString.defl=\"1_1_25_100\"\n    //% subcategory=MP3 group=\"MP3\"\n\n    export function playFile(soundString: string): number {\n        let stringParts: string[] = []\n        let sPin = SerialPin.P16\n        stringParts = soundString.split(\"_\")\n        let theFile = stringParts[0]\n        let theVolume = stringParts[1]\n        let theLength = stringParts[2]\n        sendMP3file(theFile, theVolume, sPin)\n        return parseFloat(theLength) * 1000\n    }\n    function sendMP3file(fileNum: string, volumeNum: string, sPin: SerialPin): void {\n        serial.redirect(sPin, SerialPin.USB_RX, BaudRate.BaudRate9600)\n        CMD = 3\n        para1 = parseInt(fileNum)\n        para2 = parseInt(volumeNum)\n        para1 = parseInt(\"0\")\n        para2 = parseInt(fileNum)\n        dataArr[3] = CMD\n        dataArr[5] = para1\n        dataArr[6] = para2\n        mp3_checkSum()\n        mp3_sendDataFast()\n    }\n\n    //% blockId=\"playFileNl2\" \n    //% block=\"Play2 length of file:$soundString\"\n    //% soundString.defl=\"1_1_25_100\"\n    //% subcategory=MP3 group=\"MP3\"\n\n    export function playFile2(soundString: string): number {\n        let stringParts: string[] = []\n        let sPin = SerialPin.P16\n        stringParts = soundString.split(\"_\")\n        let theFile = stringParts[0]\n        let theVolume = stringParts[1]\n        let theLength = stringParts[2]\n        sendMP3file2(theFile, theVolume, sPin)\n        return parseFloat(theLength) * 1000\n    }\n    function sendMP3file2(fileNum: string, volumeNum: string, sPin: SerialPin): void {\n        serial.redirect(sPin, SerialPin.USB_RX, BaudRate.BaudRate9600)\n        CMD = 15\n        para1 = parseInt(fileNum)\n        para2 = parseInt(volumeNum)\n        para1 = parseInt(\"1\")\n        para2 = parseInt(\"1\")\n        dataArr[3] = CMD\n        dataArr[5] = para1\n        dataArr[6] = para2\n        mp3_checkSum()\n        mp3_sendDataFast()\n    }\n\n\n    //% blockId=nl_backgroundVolume\n    //% block=\"Set background volume to:%relativeVolume\"\n    //% subcategory=\"MP3\" group=\"MP3\"\n    export function sendBackgroundVolume(relativeVolume: number): void {\n        relativeCvolume = relativeVolume/100\n\n        let sPin = mp3Cpin\n        let theVolume = Math.round(potRead() * mp3Cvolume * relativeVolume / 100)\n        serial.redirect(sPin, SerialPin.USB_RX, BaudRate.BaudRate9600)\n        CMD = 6\n        para1 = 0\n        para2 = theVolume\n        dataArr[3] = CMD\n        dataArr[5] = para1\n        dataArr[6] = para2\n        mp3_checkSum()\n        mp3_sendDataFast()\n    }\n\n\n    //% blockId=MP3execute2 block=\"Set MP3 execute procedure:%myType\"\n    //% myType.fieldEditor=\"gridpicker\"\n    //% myType.fieldOptions.columns=2\n    //% subcategory=Excute group=\"MP3\" color=#EA5532\n    export function execute(myType: playType): void {\n        CMD = myType\n        para1 = 0x00\n        para2 = 0x00\n        dataArr[3] = CMD\n        dataArr[5] = para1\n        dataArr[6] = para2\n        mp3_checkSum()\n        mp3_sendData()\n    }\n  \n    //% blockId=notlegos_pot_read\n    //% subcategory=\"MP3\" group=\"MP3\"\n    //% block=\"Trimpot analog value\"\n    export function potRead() {\n        if(isPot){\n            return Math.round(pins.map(pins.analogReadPin(potPin), 0, 1023, 0, 30))\n        } else{\n            return 5\n        }\n    }\n\n    //% blockId=notlegos_relCread\n    //% subcategory=\"MP3\" group=\"MP3\"\n    //% block=\"Return background volume\"\n    export function getBackgroundVolume() {\n\n            return relativeCvolume\n\n    }\n    //% blockId=notlegos_mp3Avolume\n    //% subcategory=\"MP3\" group=\"MP3\"\n    //% block=\"Return MP3A volume\"\n    export function getMP3AVolume() {\n        return potRead() * mp3Avolume\n    }\n    //% blockId=notlegos_mp3Bvolume\n    //% subcategory=\"MP3\" group=\"MP3\"\n    //% block=\"Return MP3B volume\"\n    export function getMP3BVolume() {\n        return potRead() * mp3Bvolume\n    }\n      //% blockId=notlegos_mp3Cvolume\n    //% subcategory=\"MP3\" group=\"MP3\"\n    //% block=\"Return MP3C volume\"\n    export function getMP3CVolume() {\n        return potRead() * mp3Cvolume * relativeCvolume\n    }\n\n    //% blockId=notlegos_pot_set\n    //% subcategory=\"MP3\" group=\"MP3\"\n    //% block=\"Connect Volume Control Pot at pin %aPin\"\n    //% aPin.fieldEditor=\"gridpicker\"\n    export function potSet(aPin: AnalogPin): void{\n        potPin = aPin\n        isPot = true\n    }\n\n    //% blockId=notlegos_mp3_ports_set\n    //% subcategory=\"MP3\" group=\"MP3\"\n    //% block=\"Connect MP3 bit at pin %dPin\"\n    //% dPin.fieldEditor=\"gridpicker\"\n    export function mp3setPorts(sPin: SerialPin): void {\n        if (mp3bits == 0){\n            mp3Apin = sPin\n            mp3bits = 1\n        } else if (mp3bits == 1){\n            mp3Bpin = sPin\n            mp3bits = 2\n        } else if (mp3bits == 2){\n            mp3Cpin = sPin\n            mp3bits = 3\n        }\n    }\n\n    //% blockId=\"playFolderFile\" \n    //% block=\"play the mp3 in the folder:$folderNum filename:$fileNum\"\n    //% fileNum.defl=\"01\" folderNum.defl=\"01\"\n    //% subcategory=MP3 group=\"MP3\"\n    export function playFolderFile(folderNum: string, fileNum: string): void {\n    \n        if (mp3bits > 0) {\n            sendMP3volume(mp3Apin)\n        }\n        if (mp3bits > 1) {\n           // sendMP3volume(mp3Bpin)\n        }\n        if (mp3bits >0) {\n            sendMP3play(folderNum, fileNum, mp3Apin)\n        }\n        if (mp3bits > 1) {\n          //  sendMP3play(folderNum, fileNum, mp3Bpin)\n        }\n    }\n\n    //% blockId=\"playsFor\" \n    //% block=\"Play length:$soundString\"\n    //% soundString.defl=\"1_1_25_100\"\n    //% subcategory=MP3 group=\"MP3\"\n    export function playsFor(soundString: string): number {\n        let stringParts: string[] = []\n        let sPin = SerialPin.P0\n        stringParts = soundString.split(\"_\")\n        let theFolder = stringParts[0]\n        let theFile = stringParts[1]\n        if (mp3bits == 1) {\n            sPin = mp3Apin\n            mp3Avolume = pins.map(parseInt(stringParts[2]), 0, 100, 0, 1)\n        } else {\n            if (lastMP3bit == \"A\") {\n                    sPin = mp3Bpin\n                    mp3Bvolume = pins.map(parseInt(stringParts[2]), 0, 100, 0, 1)\n                    lastMP3bit = \"B\"\n            } else {\n                sPin = mp3Apin\n                mp3Avolume = pins.map(parseInt(stringParts[2]), 0, 100, 0, 1)\n            lastMP3bit = \"A\"\n            }\n        }\n        let theLength = stringParts[3]\n        sendMP3volume(sPin)\n        sendMP3play(theFolder, theFile, sPin)\n        return parseFloat(theLength) * 1000 + 20\n    }\n\n    //% blockId=nl_volume_refresh\n    //% subcategory=\"MP3\" group=\"MP3\"\n    //% block=\"Update volume\"\n    export function updateVolume(): void {\n        if (mp3bits > 0) {\n            sendMP3volumeFast(mp3Apin)\n        }\n        if (mp3bits > 1) {\n            sendMP3volumeFast(mp3Bpin)\n        }\n        if (mp3bits > 2) {\n            sendMP3volumeFast(mp3Cpin)\n        }\n    }\n\n\n    //% blockId=\"nl_playsForTwo\" \n    //% block=\"Dual play length:$soundString\"\n    //% soundString.defl=\"1_1_25_100\"\n    //% subcategory=MP3 group=\"MP3\"\n    export function playsForTwo(soundString: string): number {\n        let stringParts: string[] = []\n        let sPin = SerialPin.P0\n        stringParts = soundString.split(\"_\")\n        let theFolder = stringParts[0]\n        let theFile = stringParts[1]\n        let theLength = stringParts[3]\n\n        mp3Avolume = pins.map(parseInt(stringParts[2]), 0, 100, 0, 1)\n        mp3Bvolume = pins.map(parseInt(stringParts[2]), 0, 100, 0, 1)\n\n        sendMP3volumeFast(mp3Apin)\n        sendMP3volumeFast(mp3Bpin)\n        \n        basic.pause(20)\n\n        sendMP3play(theFolder, theFile, mp3Apin)\n        sendMP3play(theFolder, theFile, mp3Bpin)\n        \n        return parseFloat(theLength) * 1000 + 20\n    }\n\n\n    //% blockId=\"nl_playsForBackground\" \n    //% block=\"Play in background length:$soundString\"\n    //% soundString.defl=\"1_1_25_100\"\n    //% subcategory=MP3 group=\"MP3\"\n    export function playsForBackground(soundString: string): number {\n        let stringParts: string[] = []\n        let sPin = SerialPin.P0\n        stringParts = soundString.split(\"_\")\n        let theFolder = stringParts[0]\n        let theFile = stringParts[1]\n        let theLength = stringParts[3]\n        mp3Cvolume = pins.map(parseInt(stringParts[2]), 0, 100, 0, 1)\n        sPin = mp3Cpin\n        sendMP3volume(sPin)\n        sendMP3play(theFolder, theFile, sPin)\n        return parseFloat(theLength) * 1000 + 20\n    }\n\n\n    //% blockId=\"nl_playBackground\" \n    //% block=\"Play in background:$soundString\"\n    //% soundString.defl=\"1_1_25_100\"\n    //% subcategory=MP3 group=\"MP3\"\n    export function playBackground(soundString: string): void {\n        let stringParts: string[] = []\n        let sPin = SerialPin.P0\n        stringParts = soundString.split(\"_\")\n        let theFolder = stringParts[0]\n        let theFile = stringParts[1]\n        let theLength = stringParts[3]\n        mp3Cvolume = pins.map(parseInt(stringParts[2]), 0, 100, 0, 1)\n        sPin = mp3Cpin\n        sendMP3volume(sPin)\n        sendMP3play(theFolder, theFile, sPin)\n    }\n\n\n    //% blockId=\"nl_backgroundStop\" \n    //% block=\"Stop background sound\"\n    //% subcategory=MP3 group=\"MP3\"\n    export function stopBackgroundSound(): void {\n        serial.redirect(mp3Cpin, SerialPin.USB_RX, BaudRate.BaudRate9600)\n        CMD = 0x16\n        para1 = 0x00\n        para2 = 0x00\n        dataArr[3] = CMD\n        dataArr[5] = para1\n        dataArr[6] = para2\n        mp3_checkSum()\n        mp3_sendData()\n    }\n\n    // Nezha - Functions for Pins and Ports\n    function RJpin_to_analog(Rjpin: AnalogRJPin): any {\n        let pin = AnalogPin.P1\n        switch (Rjpin) {\n            case AnalogRJPin.J1:\n                pin = AnalogPin.P1\n                break;\n            case AnalogRJPin.J2:\n                pin = AnalogPin.P2\n                break;\n        }\n        return pin\n    }\n    function RJpin_to_digital(Rjpin: DigitalRJPin): any {\n        let pin = DigitalPin.P1\n        switch (Rjpin) {\n            case DigitalRJPin.J1:\n                pin = DigitalPin.P8\n                break;\n            case DigitalRJPin.J2:\n                pin = DigitalPin.P12\n                break;\n            case DigitalRJPin.J3:\n                pin = DigitalPin.P14\n                break;\n            case DigitalRJPin.J4:\n                pin = DigitalPin.P16\n                break;\n            case DigitalRJPin.P0:\n                pin = DigitalPin.P0\n                break;\n            case DigitalRJPin.P1:\n                pin = DigitalPin.P1\n                break;\n            case DigitalRJPin.P2:\n                pin = DigitalPin.P2\n                break;\n            case DigitalRJPin.P3:\n                pin = DigitalPin.P3\n                break;\n            case DigitalRJPin.P4:\n                pin = DigitalPin.P4\n                break;\n            case DigitalRJPin.P4:\n                pin = DigitalPin.P4\n                break;\n            case DigitalRJPin.P5:\n                pin = DigitalPin.P5\n                break;\n            case DigitalRJPin.P6:\n                pin = DigitalPin.P6\n                break;\n            case DigitalRJPin.P7:\n                pin = DigitalPin.P7\n                break;\n            case DigitalRJPin.P8:\n                pin = DigitalPin.P8\n                break;\n            case DigitalRJPin.P9:\n                pin = DigitalPin.P9\n                break;\n            case DigitalRJPin.P10:\n                pin = DigitalPin.P10\n                break;\n            case DigitalRJPin.P11:\n                pin = DigitalPin.P11\n                break;\n            case DigitalRJPin.P12:\n                pin = DigitalPin.P12\n                break;\n            case DigitalRJPin.P13:\n                pin = DigitalPin.P13\n                break;\n            case DigitalRJPin.P14:\n                pin = DigitalPin.P14\n                break;\n            case DigitalRJPin.P15:\n                pin = DigitalPin.P15\n                break;\n            case DigitalRJPin.P16:\n                pin = DigitalPin.P16\n                break;\n        }\n        return pin\n    }\n    function RJpin_to_Serial(Rjpin: DigitalRJPin): any {\n        let pin = SerialPin.USB_TX\n        switch (Rjpin) {\n            case DigitalRJPin.J1:\n                pin = SerialPin.P8\n                break;\n            case DigitalRJPin.J2:\n                pin = SerialPin.P12\n                break;\n            case DigitalRJPin.J3:\n                pin = SerialPin.P14\n                break;\n            case DigitalRJPin.J4:\n                pin = SerialPin.P16\n                break;\n            case DigitalRJPin.P0:\n                pin = SerialPin.P0\n                break;\n            case DigitalRJPin.P1:\n                pin = SerialPin.P1\n                break;\n            case DigitalRJPin.P2:\n                pin = SerialPin.P2\n                break;\n            case DigitalRJPin.P8:\n                pin = SerialPin.P8\n                break;\n            case DigitalRJPin.P12:\n                pin = SerialPin.P12\n                break;\n            case DigitalRJPin.P13:\n                pin = SerialPin.P13\n                break;\n            case DigitalRJPin.P14:\n                pin = SerialPin.P14\n                break;\n            case DigitalRJPin.P15:\n                pin = SerialPin.P15\n                break;\n            case DigitalRJPin.P16:\n                pin = SerialPin.P16\n                break;\n        }\n        return pin\n    }\n\n\n    ///////////////////////////////enum\n\n    // Enum - To Support MP3\n    export enum playType {\n        //% block=\"Play\"\n        Play = 0x0D,\n        //% block=\"Stop\"\n        Stop = 0x16,\n        //% block=\"PlayNext\"\n        PlayNext = 0x01,\n        //% block=\"PlayPrevious\"\n        PlayPrevious = 0x02,\n        //% block=\"Pause\"\n        Pause = 0x0E\n    }\n\n    // Enum - Nezha and Pins\n    export enum AnalogRJPin {\n        //% block=\"J1\"\n        J1,\n        //% block=\"J2\"\n        J2\n    }\n    export enum DigitalRJPin {\n        //% block=\"J1\"\n        J1,\n        //% block=\"J2\"\n        J2,\n        //% block=\"J3\"\n        J3,\n        //% block=\"J4\"\n        J4,\n        //% block=\"J5\"\n        J5,\n        //% block=\"P0\"\n        P0,\n        //% block=\"P1\"\n        P1,\n        //% block=\"P2\"\n        P2,\n        //% block=\"P3\"\n        P3,\n        //% block=\"P4\"\n        P4,\n        //% block=\"P5\"\n        P5,\n        //% block=\"P6\"\n        P6,\n        //% block=\"P7\"\n        P7,\n        //% block=\"P8\"\n        P8,\n        //% block=\"P9\"\n        P9,\n        //% block=\"P10\"\n        P10,\n        //% block=\"P11\"\n        P11,\n        //% block=\"P12\"\n        P12,\n        //% block=\"P13\"\n        P13,\n        //% block=\"P14\"\n        P14,\n        //% block=\"P15\"\n        P15,\n        //% block=\"P16\"\n        P16,\n    }\n    export enum mbPin {\n        //% block=\"P0\"\n        P0,\n        //% block=\"P1 (Analog J1)\"\n        P1,\n        //% block=\"P2 (Analog J2)\"\n        P2,\n        //% block=\"P3\"\n        P3,\n        //% block=\"P4\"\n        P4,\n        //% block=\"P5\"\n        P5,\n        //% block=\"P6\"\n        P6,\n        //% block=\"P7\"\n        P7,\n        //% block=\"P8 (J1)\"\n        P8,\n        //% block=\"P9\"\n        P9,\n        //% block=\"P10\"\n        P10,\n        //% block=\"P11\"\n        P11,\n        //% block=\"P12 (J2)\"\n        P12,\n        //% block=\"P13\"\n        P13,\n        //% block=\"P14 (J3)\"\n        P14,\n        //% block=\"P15\"\n        P15,\n        //% block=\"P16 (J4)\"\n        P16,\n    }\n}","pxt.json":"{\n    \"name\": \"SoundExtension\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"radio\": \"*\",\n        \"microphone\": \"*\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\",\n        \"displaySendBuffer.asm\",\n        \"display.ts\",\n        \"planetxbasic.ts\",\n        \"nezha.ts\",\n        \"notlegos.ts\"\n    ],\n    \"testFiles\": [\n        \"test.ts\"\n    ],\n    \"targetVersions\": {\n        \"target\": \"7.0.42\",\n        \"targetId\": \"microbit\"\n    },\n    \"supportedTargets\": [\n        \"microbit\"\n    ],\n    \"preferredEditor\": \"tsprj\"\n}\n","test.ts":""}}],"shares":[],"lastSaveTime":1726419089716}